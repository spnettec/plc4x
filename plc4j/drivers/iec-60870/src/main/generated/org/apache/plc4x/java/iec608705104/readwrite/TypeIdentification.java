/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.iec608705104.readwrite;

import java.util.HashMap;
import java.util.Map;

// Code generated by code-generation. DO NOT EDIT.

public enum TypeIdentification {
  NOT_USED((short) 0x00),
  SINGLE_POINT_INFORMATION((short) 0x01),
  SINGLE_POINT_INFORMATION_WITH_TIME_TAG((short) 0x02),
  DOUBLE_POINT_INFORMATION((short) 0x03),
  DOUBLE_POINT_INFORMATION_WITH_TIME_TAG((short) 0x04),
  STEP_POSITION_INFORMATION((short) 0x05),
  STEP_POSITION_INFORMATION_WITH_TIME_TAG((short) 0x06),
  BITSTRING_OF_32_BIT((short) 0x07),
  BITSTRING_OF_32_BIT_WITH_TIME_TAG((short) 0x08),
  MEASURED_VALUE_NORMALISED_VALUE((short) 0x09),
  MEASURED_VALUE_NORMALIZED_VALUE_WITH_TIME_TAG((short) 0x0A),
  MEASURED_VALUE_SCALED_VALUE((short) 0x0B),
  MEASURED_VALUE_SCALED_VALUE_WIT_TIME_TAG((short) 0x0C),
  MEASURED_VALUE_SHORT_FLOATING_POINT_NUMBER((short) 0x0D),
  MEASURED_VALUE_SHORT_FLOATING_POINT_NUMBER_WITH_TIME_TAG((short) 0x0E),
  INTEGRATED_TOTALS((short) 0x0F),
  INTEGRATED_TOTALS_WITH_TIME_TAG((short) 0x10),
  EVENT_OF_PROTECTION_EQUIPMENT_WITH_TIME_TAG((short) 0x11),
  PACKED_START_EVENTS_OF_PROTECTION_EQUIPMENT_WITH_TIME_TAG((short) 0x12),
  PACKED_OUTPUT_CIRCUIT_INFORMATION_OF_PROTECTION_EQUIPMENT_WITH_TIME_TAG((short) 0x13),
  PACKED_SINGLE_POINT_INFORMATION_WITH_STATUS_CHANGE_DETECTION((short) 0x14),
  MEASURED_VALUE_NORMALIZED_VALUE_WITHOUT_QUALITY_DESCRIPTOR((short) 0x15),
  SINGLE_POINT_INFORMATION_WITH_TIME_TAG_CP56TIME2A((short) 0x1E),
  DOUBLE_POINT_INFORMATION_WITH_TIME_TAG_CP56TIME2A((short) 0x1F),
  STEP_POSITION_INFORMATION_WITH_TIME_TAG_CP56TIME2A((short) 0x20),
  BITSTRING_OF_32_BIT_WITH_TIME_TAG_CP56TIME2A((short) 0x21),
  MEASURED_VALUE_NORMALISED_VALUE_WITH_TIME_TAG_CP56TIME2A((short) 0x22),
  MEASURED_VALUE_SCALED_VALUE_WITH_TIME_TAG_CP56TIME2A((short) 0x23),
  MEASURED_VALUE_SHORT_FLOATING_POINT_NUMBER_WITH_TIME_TAG_CP56TIME2A((short) 0x24),
  INTEGRATED_TOTALS_WITH_TIME_TAG_CP56TIME2A((short) 0x25),
  EVENT_OF_PROTECTION_EQUIPMENT_WITH_TIME_TAG_CP56TIME2A((short) 0x26),
  PACKED_START_EVENTS_OF_PROTECTION_EQUIPMENT_WITH_TIME_TAG_CP56TIME2A((short) 0x27),
  PACKED_OUTPUT_CIRCUIT_INFORMATION_OF_PROTECTION_EQUIPMENT_WITH_TIME_TAG_CP56TIME2A((short) 0x28),
  SINGLE_COMMAND((short) 0x2D),
  DOUBLE_COMMAND((short) 0x2E),
  REGULATING_STEP_COMMAND((short) 0x2F),
  SET_POINT_COMMAND_NORMALISED_VALUE((short) 0x30),
  SET_POINT_COMMAND_SCALED_VALUE((short) 0x31),
  SET_POINT_COMMAND_SHORT_FLOATING_POINT_NUMBER((short) 0x32),
  BITSTRING_32_BIT_COMMAND((short) 0x33),
  SINGLE_COMMAND_WITH_TIME_TAG_CP56TIME2A((short) 0x3A),
  DOUBLE_COMMAND_WITH_TIME_TAG_CP56TIME2A((short) 0x3B),
  REGULATING_STEP_COMMAND_WITH_TIME_TAG_CP56TIME2A((short) 0x3C),
  MEASURED_VALUE_NORMALISED_VALUE_COMMAND_WITH_TIME_TAG_CP56TIME2A((short) 0x3D),
  MEASURED_VALUE_SCALED_VALUE_COMMAND_WITH_TIME_TAG_CP56TIME2A((short) 0x3E),
  MEASURED_VALUE_SHORT_FLOATING_POINT_NUMBER_COMMAND_WITH_TIME_TAG_CP56TIME2A((short) 0x3F),
  BITSTRING_OF_32_BIT_COMMAND_WITH_TIME_TAG_CP56TIME2A((short) 0x40),
  END_OF_INITIALISATION((short) 0x46),
  INTERROGATION_COMMAND((short) 0x64),
  COUNTER_INTERROGATION_COMMAND((short) 0x65),
  READ_COMMAND((short) 0x66),
  CLOCK_SYNCHRONISATION_COMMAND((short) 0x67),
  TEST_COMMAND((short) 0x68),
  RESET_PROCESS_COMMAND((short) 0x69),
  DELAY_ACQUISITION_COMMAND((short) 0x6A),
  TEST_COMMAND_WITH_TIME_TAG_CP56TIME2A((short) 0x6B),
  PARAMETER_OF_MEASURED_VALUES_NORMALIZED_VALUE((short) 0x6E),
  PARAMETER_OF_MEASURED_VALUES_SCALED_VALUE((short) 0x6F),
  PARAMETER_OF_MEASURED_VALUES_SHORT_FLOATING_POINT_NUMBER((short) 0x70),
  PARAMETER_ACTIVATION((short) 0x71),
  FILE_READY((short) 0x78),
  SECTION_READY((short) 0x79),
  CALL_DIRECTORY_SELECT_FILE_CALL_FILE_CALL_SECTION((short) 0x7A),
  LAST_SECTION_LAST_SEGMENT((short) 0x7B),
  ACK_FILE_ACK_SECTION((short) 0x7C),
  SEGMENT((short) 0x7D),
  DIRECTORY((short) 0x7E);
  private static final Map<Short, TypeIdentification> map;

  static {
    map = new HashMap<>();
    for (TypeIdentification value : TypeIdentification.values()) {
      map.put((short) value.getValue(), value);
    }
  }

  private final short value;

  TypeIdentification(short value) {
    this.value = value;
  }

  public short getValue() {
    return value;
  }

  public static TypeIdentification enumForValue(short value) {
    return map.get(value);
  }

  public static Boolean isDefined(short value) {
    return map.containsKey(value);
  }
}
