/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.plc4x.java.bacnetip;

import org.apache.commons.lang3.ArrayUtils;
import org.apache.plc4x.java.bacnetip.readwrite.BVLC;
import org.apache.plc4x.java.spi.generation.ReadBufferByteBased;
import org.junit.jupiter.api.Test;

import java.util.stream.IntStream;

import static org.junit.jupiter.api.Assertions.assertNotNull;

public class TrickyPackagesTest {

    // from plugfest-tridium-1.pcap
    @Test
    public void testTridium255() throws Exception {
        int[] rawBytesAsInts = new int[]{
            /*0000*/   0x00, 0x1d, 0x09, 0xbc, 0x43, 0x5f, 0x00, 0x01, 0xf0, 0x8c, 0x11, 0x50, 0x08, 0x00, 0x45, 0x00,
            /*0010*/   0x01, 0xfc, 0x7e, 0x47, 0x00, 0x00, 0x40, 0x11, 0x27, 0x92, 0xac, 0x10, 0x24, 0xcd, 0xac, 0x10,
            /*0020*/   0x56, 0x2a, 0xba, 0xc0, 0xba, 0xc0, 0x01, 0xe8, 0x24, 0xd9, 0x81, 0x0a, 0x01, 0xe0, 0x01, 0x00,
            /*0030*/   0x30, 0x6e, 0x0e, 0x0c, 0x04, 0x40, 0x00, 0x01, 0x1e, 0x29, 0x4b, 0x4e, 0xc4, 0x04, 0x40, 0x00,
            /*0040*/   0x01, 0x4f, 0x29, 0x4d, 0x4e, 0x75, 0x13, 0x00, 0x53, 0x63, 0x68, 0x65, 0x64, 0x2e, 0x45, 0x6e,
            /*0050*/   0x75, 0x6d, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4f, 0x29, 0x4f, 0x4e, 0x91, 0x11,
            /*0060*/   0x4f, 0x29, 0x55, 0x4e, 0x21, 0x07, 0x4f, 0x29, 0x20, 0x4e, 0xa4, 0xff, 0xff, 0xff, 0xff, 0xa4,
            /*0070*/   0xff, 0xff, 0xff, 0xff, 0x4f, 0x29, 0xae, 0x4e, 0x21, 0x01, 0x4f, 0x29, 0x36, 0x4e, 0x0c, 0x04,
            /*0080*/   0xc0, 0x00, 0x66, 0x19, 0x57, 0x29, 0x0a, 0x0c, 0x04, 0xc0, 0x00, 0x65, 0x19, 0x57, 0x29, 0x0a,
            /*0090*/   0x4f, 0x29, 0x58, 0x4e, 0x21, 0x10, 0x4f, 0x29, 0x6f, 0x4e, 0x82, 0x04, 0x00, 0x4f, 0x29, 0x67,
            /*00a0*/   0x4e, 0x91, 0x00, 0x4f, 0x29, 0x51, 0x4e, 0x10, 0x4f, 0x29, 0x7b, 0x4e, 0x0e, 0xb4, 0x06, 0x00,
            /*00b0*/   0x00, 0x00, 0x21, 0x01, 0xb4, 0x09, 0x00, 0x00, 0x00, 0x21, 0x02, 0xb4, 0x0c, 0x00, 0x00, 0x00,
            /*00c0*/   0x21, 0x03, 0xb4, 0x0f, 0x00, 0x00, 0x00, 0x21, 0x04, 0xb4, 0x12, 0x00, 0x00, 0x00, 0x00, 0x0f,
            /*00d0*/   0x0e, 0xb4, 0x06, 0x00, 0x00, 0x00, 0x21, 0x01, 0xb4, 0x09, 0x00, 0x00, 0x00, 0x21, 0x02, 0xb4,
            /*00e0*/   0x0c, 0x00, 0x00, 0x00, 0x21, 0x03, 0xb4, 0x0f, 0x00, 0x00, 0x00, 0x21, 0x04, 0xb4, 0x12, 0x00,
            /*00f0*/   0x00, 0x00, 0x00, 0x0f, 0x0e, 0xb4, 0x06, 0x00, 0x00, 0x00, 0x21, 0x01, 0xb4, 0x09, 0x00, 0x00,
            /*0100*/   0x00, 0x21, 0x02, 0xb4, 0x0c, 0x00, 0x00, 0x00, 0x21, 0x03, 0xb4, 0x0f, 0x00, 0x00, 0x00, 0x21,
            /*0110*/   0x04, 0xb4, 0x12, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0e, 0xb4, 0x06, 0x00, 0x00, 0x00, 0x21, 0x01,
            /*0120*/   0xb4, 0x09, 0x00, 0x00, 0x00, 0x21, 0x02, 0xb4, 0x0c, 0x00, 0x00, 0x00, 0x21, 0x03, 0xb4, 0x0f,
            /*0130*/   0x00, 0x00, 0x00, 0x21, 0x04, 0xb4, 0x12, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0e, 0xb4, 0x06, 0x00,
            /*0140*/   0x00, 0x00, 0x21, 0x01, 0xb4, 0x09, 0x00, 0x00, 0x00, 0x21, 0x02, 0xb4, 0x0c, 0x00, 0x00, 0x00,
            /*0150*/   0x21, 0x03, 0xb4, 0x0f, 0x00, 0x00, 0x00, 0x21, 0x04, 0xb4, 0x12, 0x00, 0x00, 0x00, 0x00, 0x0f,
            /*0160*/   0x0e, 0xb4, 0x06, 0x00, 0x00, 0x00, 0x21, 0x05, 0xb4, 0x0c, 0x00, 0x00, 0x00, 0x21, 0x06, 0xb4,
            /*0170*/   0x12, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0e, 0xb4, 0x06, 0x00, 0x00, 0x00, 0x21, 0x05, 0xb4, 0x0c,
            /*0180*/   0x00, 0x00, 0x00, 0x21, 0x06, 0xb4, 0x12, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x4f, 0x29, 0x26, 0x4e,
            /*0190*/   0x0e, 0x0c, 0xff, 0xff, 0xff, 0x03, 0x0f, 0x2e, 0x2f, 0x39, 0x10, 0x1c, 0x01, 0x80, 0x00, 0x01,
            /*01a0*/   0x2e, 0xb4, 0x09, 0x00, 0x00, 0x00, 0x21, 0x08, 0xb4, 0x0c, 0x00, 0x00, 0x00, 0x00, 0xb4, 0x0f,
            /*01b0*/   0x1e, 0x00, 0x00, 0x21, 0x08, 0xb4, 0x12, 0x00, 0x00, 0x00, 0x00, 0x2f, 0x39, 0x10, 0x1c, 0x01,
            /*01c0*/   0x80, 0x00, 0x00, 0x2e, 0xb4, 0x03, 0x00, 0x00, 0x00, 0x21, 0x07, 0xb4, 0x06, 0x00, 0x00, 0x00,
            /*01d0*/   0x00, 0xb4, 0x07, 0x1e, 0x00, 0x00, 0x21, 0x07, 0xb4, 0x09, 0x1e, 0x00, 0x00, 0x00, 0xb4, 0x0a,
            /*01e0*/   0x1e, 0x00, 0x00, 0x21, 0x07, 0xb4, 0x0d, 0x00, 0x00, 0x00, 0x00, 0xb4, 0x0e, 0x1e, 0x00, 0x00,
            /*01f0*/   0x21, 0x07, 0xb4, 0x11, 0x1e, 0x00, 0x00, 0x00, 0xb4, 0x13, 0x00, 0x00, 0x00, 0x21, 0x07, 0xb4,
            /*0200*/   0x14, 0x1e, 0x00, 0x00, 0x00, 0x2f, 0x39, 0x10, 0x4f, 0x1f,
        };
        var rawBytes = (byte[]) ArrayUtils.toPrimitive(IntStream.of(rawBytesAsInts).boxed().map(Integer::byteValue).toArray(Byte[]::new));
        rawBytes = ArrayUtils.subarray(rawBytes, 42, rawBytes.length);
        BVLC bvlc = BVLC.staticParse(new ReadBufferByteBased(rawBytes));
        assertNotNull(bvlc);
        System.out.println(bvlc);
    }

    // from plugfest-delta-2b.cap
    @Test
    public void testDelta1204() throws Exception {
        int[] rawBytesAsInts = new int[]{
            /*0000*/   0x00, 0x06, 0x5b, 0xd6, 0x9f, 0xfe, 0x00, 0x40, 0xae, 0x00, 0x45, 0xd7, 0x08, 0x00, 0x45, 0x00,
            /*0010*/   0x01, 0x5e, 0x28, 0x64, 0x00, 0x00, 0x3c, 0x11, 0xec, 0xc9, 0xac, 0x10, 0x08, 0x0a, 0xac, 0x10,
            /*0020*/   0x08, 0x37, 0xba, 0xc0, 0xba, 0xc0, 0x01, 0x4a, 0x00, 0x00, 0x81, 0x0a, 0x01, 0x42, 0x01, 0x00,
            /*0030*/   0x30, 0xef, 0x0e, 0x0c, 0x45, 0x80, 0x00, 0x01, 0x1e, 0x29, 0x1c, 0x4e, 0x71, 0x00, 0x4f, 0x2a,
            /*0040*/   0x04, 0x0a, 0x4e, 0x91, 0x00, 0x4f, 0x2a, 0x04, 0x0c, 0x4e, 0x0e, 0x09, 0x01, 0x19, 0x04, 0x2c,
            /*0050*/   0x01, 0xfe, 0xed, 0xd8, 0x3d, 0x06, 0x03, 0xff, 0x3b, 0xe8, 0x3e, 0xf1, 0x4a, 0x04, 0x57, 0x5a,
            /*0060*/   0x01, 0xe0, 0x69, 0x64, 0x79, 0x0a, 0x89, 0x2a, 0x99, 0x32, 0xaa, 0x13, 0x88, 0xba, 0x0b, 0xb8,
            /*0070*/   0xca, 0x1b, 0x58, 0xd9, 0x03, 0xea, 0x13, 0x88, 0xfa, 0x0f, 0x01, 0xe0, 0xf9, 0x10, 0x00, 0x0f,
            /*0080*/   0x4f, 0x2a, 0x04, 0x27, 0x4e, 0x0a, 0x02, 0x51, 0x19, 0x00, 0x29, 0x00, 0x39, 0x00, 0x4a, 0x06,
            /*0090*/   0x0b, 0x59, 0x00, 0x69, 0x00, 0x79, 0x00, 0x89, 0x00, 0x99, 0x00, 0xa9, 0x00, 0x4f, 0x2a, 0x04,
            /*00a0*/   0x3a, 0x39, 0x00, 0x4e, 0x21, 0x05, 0x4f, 0x2a, 0x04, 0x3a, 0x4e, 0x09, 0x00, 0x19, 0x00, 0x29,
            /*00b0*/   0x01, 0x39, 0x01, 0x4c, 0x45, 0x80, 0x00, 0x01, 0x59, 0x01, 0x69, 0x06, 0x79, 0x01, 0x8e, 0x0b,
            /*00c0*/   0x01, 0xea, 0xc9, 0x19, 0x00, 0x29, 0x00, 0x39, 0x00, 0x49, 0x00, 0x8f, 0x9c, 0x00, 0x00, 0x00,
            /*00d0*/   0x00, 0x09, 0x00, 0x19, 0x00, 0x29, 0x01, 0x39, 0x01, 0x4c, 0x45, 0x80, 0x00, 0x01, 0x59, 0x02,
            /*00e0*/   0x69, 0x06, 0x79, 0x02, 0x8e, 0x0a, 0x79, 0xef, 0x19, 0x00, 0x2b, 0x01, 0x80, 0x7e, 0x3a, 0x05,
            /*00f0*/   0xe7, 0x49, 0x32, 0x8f, 0x9c, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x19, 0x00, 0x29, 0x01, 0x39,
            /*0100*/   0x01, 0x4c, 0x45, 0x80, 0x00, 0x01, 0x59, 0x01, 0x69, 0x01, 0x79, 0x03, 0x8e, 0x0a, 0x01, 0x01,
            /*0110*/   0x19, 0x00, 0x29, 0x00, 0x39, 0x00, 0x49, 0x00, 0x8f, 0x9c, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00,
            /*0120*/   0x19, 0x00, 0x29, 0x01, 0x39, 0x01, 0x4c, 0x45, 0x80, 0x00, 0x01, 0x59, 0x04, 0x69, 0x01, 0x79,
            /*0130*/   0x05, 0x8e, 0x0a, 0x31, 0x20, 0x19, 0x00, 0x2a, 0x2f, 0x37, 0x39, 0xc3, 0x49, 0x00, 0x8f, 0x9c,
            /*0140*/   0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x19, 0x00, 0x29, 0x01, 0x39, 0x01, 0x4c, 0x45, 0x80, 0x00,
            /*0150*/   0x01, 0x59, 0x05, 0x69, 0x01, 0x79, 0x07, 0x8e, 0x0a, 0x26, 0xe1, 0x19, 0x00, 0x2a, 0x25, 0xb9,
            /*0160*/   0x39, 0x00, 0x49, 0x00, 0x8f, 0x9c, 0x00, 0x00, 0x00, 0x00, 0x4f, 0x1f,
        };
        var rawBytes = (byte[]) ArrayUtils.toPrimitive(IntStream.of(rawBytesAsInts).boxed().map(Integer::byteValue).toArray(Byte[]::new));
        rawBytes = ArrayUtils.subarray(rawBytes, 42, rawBytes.length);
        BVLC bvlc = BVLC.staticParse(new ReadBufferByteBased(rawBytes));
        assertNotNull(bvlc);
        System.out.println(bvlc);
    }
}
