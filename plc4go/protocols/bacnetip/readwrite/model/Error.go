/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// Error is the data-structure of this message
type Error struct {
	ErrorClass *ErrorClassTagged
	ErrorCode  *ErrorCodeTagged
}

// IError is the corresponding interface of Error
type IError interface {
	// GetErrorClass returns ErrorClass (property field)
	GetErrorClass() *ErrorClassTagged
	// GetErrorCode returns ErrorCode (property field)
	GetErrorCode() *ErrorCodeTagged
	// GetLengthInBytes returns the length in bytes
	GetLengthInBytes() uint16
	// GetLengthInBits returns the length in bits
	GetLengthInBits() uint16
	// Serialize serializes this type
	Serialize(writeBuffer utils.WriteBuffer) error
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *Error) GetErrorClass() *ErrorClassTagged {
	return m.ErrorClass
}

func (m *Error) GetErrorCode() *ErrorCodeTagged {
	return m.ErrorCode
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewError factory function for Error
func NewError(errorClass *ErrorClassTagged, errorCode *ErrorCodeTagged) *Error {
	return &Error{ErrorClass: errorClass, ErrorCode: errorCode}
}

func CastError(structType interface{}) *Error {
	if casted, ok := structType.(Error); ok {
		return &casted
	}
	if casted, ok := structType.(*Error); ok {
		return casted
	}
	return nil
}

func (m *Error) GetTypeName() string {
	return "Error"
}

func (m *Error) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *Error) GetLengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(0)

	// Simple field (errorClass)
	lengthInBits += m.ErrorClass.GetLengthInBits()

	// Simple field (errorCode)
	lengthInBits += m.ErrorCode.GetLengthInBits()

	return lengthInBits
}

func (m *Error) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func ErrorParse(readBuffer utils.ReadBuffer) (*Error, error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("Error"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for Error")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	// Simple Field (errorClass)
	if pullErr := readBuffer.PullContext("errorClass"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for errorClass")
	}
	_errorClass, _errorClassErr := ErrorClassTaggedParse(readBuffer, uint8(uint8(0)), TagClass(TagClass_APPLICATION_TAGS))
	if _errorClassErr != nil {
		return nil, errors.Wrap(_errorClassErr, "Error parsing 'errorClass' field")
	}
	errorClass := CastErrorClassTagged(_errorClass)
	if closeErr := readBuffer.CloseContext("errorClass"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for errorClass")
	}

	// Simple Field (errorCode)
	if pullErr := readBuffer.PullContext("errorCode"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for errorCode")
	}
	_errorCode, _errorCodeErr := ErrorCodeTaggedParse(readBuffer, uint8(uint8(0)), TagClass(TagClass_APPLICATION_TAGS))
	if _errorCodeErr != nil {
		return nil, errors.Wrap(_errorCodeErr, "Error parsing 'errorCode' field")
	}
	errorCode := CastErrorCodeTagged(_errorCode)
	if closeErr := readBuffer.CloseContext("errorCode"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for errorCode")
	}

	if closeErr := readBuffer.CloseContext("Error"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for Error")
	}

	// Create the instance
	return NewError(errorClass, errorCode), nil
}

func (m *Error) Serialize(writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	if pushErr := writeBuffer.PushContext("Error"); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for Error")
	}

	// Simple Field (errorClass)
	if pushErr := writeBuffer.PushContext("errorClass"); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for errorClass")
	}
	_errorClassErr := m.ErrorClass.Serialize(writeBuffer)
	if popErr := writeBuffer.PopContext("errorClass"); popErr != nil {
		return errors.Wrap(popErr, "Error popping for errorClass")
	}
	if _errorClassErr != nil {
		return errors.Wrap(_errorClassErr, "Error serializing 'errorClass' field")
	}

	// Simple Field (errorCode)
	if pushErr := writeBuffer.PushContext("errorCode"); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for errorCode")
	}
	_errorCodeErr := m.ErrorCode.Serialize(writeBuffer)
	if popErr := writeBuffer.PopContext("errorCode"); popErr != nil {
		return errors.Wrap(popErr, "Error popping for errorCode")
	}
	if _errorCodeErr != nil {
		return errors.Wrap(_errorCodeErr, "Error serializing 'errorCode' field")
	}

	if popErr := writeBuffer.PopContext("Error"); popErr != nil {
		return errors.Wrap(popErr, "Error popping for Error")
	}
	return nil
}

func (m *Error) String() string {
	if m == nil {
		return "<nil>"
	}
	buffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := m.Serialize(buffer); err != nil {
		return err.Error()
	}
	return buffer.GetBox().String()
}
