/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// BACnetValueSourceAddress is the data-structure of this message
type BACnetValueSourceAddress struct {
	*BACnetValueSource
	Address *BACnetAddressEnclosed
}

// IBACnetValueSourceAddress is the corresponding interface of BACnetValueSourceAddress
type IBACnetValueSourceAddress interface {
	IBACnetValueSource
	// GetAddress returns Address (property field)
	GetAddress() *BACnetAddressEnclosed
	// GetLengthInBytes returns the length in bytes
	GetLengthInBytes() uint16
	// GetLengthInBits returns the length in bits
	GetLengthInBits() uint16
	// Serialize serializes this type
	Serialize(writeBuffer utils.WriteBuffer) error
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for discriminator values.
///////////////////////

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

func (m *BACnetValueSourceAddress) InitializeParent(parent *BACnetValueSource, peekedTagHeader *BACnetTagHeader) {
	m.BACnetValueSource.PeekedTagHeader = peekedTagHeader
}

func (m *BACnetValueSourceAddress) GetParent() *BACnetValueSource {
	return m.BACnetValueSource
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *BACnetValueSourceAddress) GetAddress() *BACnetAddressEnclosed {
	return m.Address
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewBACnetValueSourceAddress factory function for BACnetValueSourceAddress
func NewBACnetValueSourceAddress(address *BACnetAddressEnclosed, peekedTagHeader *BACnetTagHeader) *BACnetValueSourceAddress {
	_result := &BACnetValueSourceAddress{
		Address:           address,
		BACnetValueSource: NewBACnetValueSource(peekedTagHeader),
	}
	_result.Child = _result
	return _result
}

func CastBACnetValueSourceAddress(structType interface{}) *BACnetValueSourceAddress {
	if casted, ok := structType.(BACnetValueSourceAddress); ok {
		return &casted
	}
	if casted, ok := structType.(*BACnetValueSourceAddress); ok {
		return casted
	}
	if casted, ok := structType.(BACnetValueSource); ok {
		return CastBACnetValueSourceAddress(casted.Child)
	}
	if casted, ok := structType.(*BACnetValueSource); ok {
		return CastBACnetValueSourceAddress(casted.Child)
	}
	return nil
}

func (m *BACnetValueSourceAddress) GetTypeName() string {
	return "BACnetValueSourceAddress"
}

func (m *BACnetValueSourceAddress) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *BACnetValueSourceAddress) GetLengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(m.GetParentLengthInBits())

	// Simple field (address)
	lengthInBits += m.Address.GetLengthInBits()

	return lengthInBits
}

func (m *BACnetValueSourceAddress) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func BACnetValueSourceAddressParse(readBuffer utils.ReadBuffer) (*BACnetValueSourceAddress, error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("BACnetValueSourceAddress"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for BACnetValueSourceAddress")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	// Simple Field (address)
	if pullErr := readBuffer.PullContext("address"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for address")
	}
	_address, _addressErr := BACnetAddressEnclosedParse(readBuffer, uint8(uint8(2)))
	if _addressErr != nil {
		return nil, errors.Wrap(_addressErr, "Error parsing 'address' field")
	}
	address := CastBACnetAddressEnclosed(_address)
	if closeErr := readBuffer.CloseContext("address"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for address")
	}

	if closeErr := readBuffer.CloseContext("BACnetValueSourceAddress"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for BACnetValueSourceAddress")
	}

	// Create a partially initialized instance
	_child := &BACnetValueSourceAddress{
		Address:           CastBACnetAddressEnclosed(address),
		BACnetValueSource: &BACnetValueSource{},
	}
	_child.BACnetValueSource.Child = _child
	return _child, nil
}

func (m *BACnetValueSourceAddress) Serialize(writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	ser := func() error {
		if pushErr := writeBuffer.PushContext("BACnetValueSourceAddress"); pushErr != nil {
			return errors.Wrap(pushErr, "Error pushing for BACnetValueSourceAddress")
		}

		// Simple Field (address)
		if pushErr := writeBuffer.PushContext("address"); pushErr != nil {
			return errors.Wrap(pushErr, "Error pushing for address")
		}
		_addressErr := writeBuffer.WriteSerializable(m.Address)
		if popErr := writeBuffer.PopContext("address"); popErr != nil {
			return errors.Wrap(popErr, "Error popping for address")
		}
		if _addressErr != nil {
			return errors.Wrap(_addressErr, "Error serializing 'address' field")
		}

		if popErr := writeBuffer.PopContext("BACnetValueSourceAddress"); popErr != nil {
			return errors.Wrap(popErr, "Error popping for BACnetValueSourceAddress")
		}
		return nil
	}
	return m.SerializeParent(writeBuffer, m, ser)
}

func (m *BACnetValueSourceAddress) String() string {
	if m == nil {
		return "<nil>"
	}
	writeBuffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := writeBuffer.WriteSerializable(m); err != nil {
		return err.Error()
	}
	return writeBuffer.GetBox().String()
}
