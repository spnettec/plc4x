/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// BACnetDestination is the data-structure of this message
type BACnetDestination struct {
	ValidDays                   *BACnetDaysOfWeekTagged
	FromTime                    *BACnetApplicationTagTime
	ToTime                      *BACnetApplicationTagTime
	Recipient                   *BACnetRecipient
	ProcessIdentifier           *BACnetApplicationTagUnsignedInteger
	IssueConfirmedNotifications *BACnetApplicationTagBoolean
	Transitions                 *BACnetEventTransitionBitsTagged
}

// IBACnetDestination is the corresponding interface of BACnetDestination
type IBACnetDestination interface {
	// GetValidDays returns ValidDays (property field)
	GetValidDays() *BACnetDaysOfWeekTagged
	// GetFromTime returns FromTime (property field)
	GetFromTime() *BACnetApplicationTagTime
	// GetToTime returns ToTime (property field)
	GetToTime() *BACnetApplicationTagTime
	// GetRecipient returns Recipient (property field)
	GetRecipient() *BACnetRecipient
	// GetProcessIdentifier returns ProcessIdentifier (property field)
	GetProcessIdentifier() *BACnetApplicationTagUnsignedInteger
	// GetIssueConfirmedNotifications returns IssueConfirmedNotifications (property field)
	GetIssueConfirmedNotifications() *BACnetApplicationTagBoolean
	// GetTransitions returns Transitions (property field)
	GetTransitions() *BACnetEventTransitionBitsTagged
	// GetLengthInBytes returns the length in bytes
	GetLengthInBytes() uint16
	// GetLengthInBits returns the length in bits
	GetLengthInBits() uint16
	// Serialize serializes this type
	Serialize(writeBuffer utils.WriteBuffer) error
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *BACnetDestination) GetValidDays() *BACnetDaysOfWeekTagged {
	return m.ValidDays
}

func (m *BACnetDestination) GetFromTime() *BACnetApplicationTagTime {
	return m.FromTime
}

func (m *BACnetDestination) GetToTime() *BACnetApplicationTagTime {
	return m.ToTime
}

func (m *BACnetDestination) GetRecipient() *BACnetRecipient {
	return m.Recipient
}

func (m *BACnetDestination) GetProcessIdentifier() *BACnetApplicationTagUnsignedInteger {
	return m.ProcessIdentifier
}

func (m *BACnetDestination) GetIssueConfirmedNotifications() *BACnetApplicationTagBoolean {
	return m.IssueConfirmedNotifications
}

func (m *BACnetDestination) GetTransitions() *BACnetEventTransitionBitsTagged {
	return m.Transitions
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewBACnetDestination factory function for BACnetDestination
func NewBACnetDestination(validDays *BACnetDaysOfWeekTagged, fromTime *BACnetApplicationTagTime, toTime *BACnetApplicationTagTime, recipient *BACnetRecipient, processIdentifier *BACnetApplicationTagUnsignedInteger, issueConfirmedNotifications *BACnetApplicationTagBoolean, transitions *BACnetEventTransitionBitsTagged) *BACnetDestination {
	return &BACnetDestination{ValidDays: validDays, FromTime: fromTime, ToTime: toTime, Recipient: recipient, ProcessIdentifier: processIdentifier, IssueConfirmedNotifications: issueConfirmedNotifications, Transitions: transitions}
}

func CastBACnetDestination(structType interface{}) *BACnetDestination {
	if casted, ok := structType.(BACnetDestination); ok {
		return &casted
	}
	if casted, ok := structType.(*BACnetDestination); ok {
		return casted
	}
	return nil
}

func (m *BACnetDestination) GetTypeName() string {
	return "BACnetDestination"
}

func (m *BACnetDestination) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *BACnetDestination) GetLengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(0)

	// Simple field (validDays)
	lengthInBits += m.ValidDays.GetLengthInBits()

	// Simple field (fromTime)
	lengthInBits += m.FromTime.GetLengthInBits()

	// Simple field (toTime)
	lengthInBits += m.ToTime.GetLengthInBits()

	// Simple field (recipient)
	lengthInBits += m.Recipient.GetLengthInBits()

	// Simple field (processIdentifier)
	lengthInBits += m.ProcessIdentifier.GetLengthInBits()

	// Simple field (issueConfirmedNotifications)
	lengthInBits += m.IssueConfirmedNotifications.GetLengthInBits()

	// Simple field (transitions)
	lengthInBits += m.Transitions.GetLengthInBits()

	return lengthInBits
}

func (m *BACnetDestination) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func BACnetDestinationParse(readBuffer utils.ReadBuffer) (*BACnetDestination, error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("BACnetDestination"); pullErr != nil {
		return nil, pullErr
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	// Simple Field (validDays)
	if pullErr := readBuffer.PullContext("validDays"); pullErr != nil {
		return nil, pullErr
	}
	_validDays, _validDaysErr := BACnetDaysOfWeekTaggedParse(readBuffer, uint8(uint8(0)), TagClass(TagClass_APPLICATION_TAGS))
	if _validDaysErr != nil {
		return nil, errors.Wrap(_validDaysErr, "Error parsing 'validDays' field")
	}
	validDays := CastBACnetDaysOfWeekTagged(_validDays)
	if closeErr := readBuffer.CloseContext("validDays"); closeErr != nil {
		return nil, closeErr
	}

	// Simple Field (fromTime)
	if pullErr := readBuffer.PullContext("fromTime"); pullErr != nil {
		return nil, pullErr
	}
	_fromTime, _fromTimeErr := BACnetApplicationTagParse(readBuffer)
	if _fromTimeErr != nil {
		return nil, errors.Wrap(_fromTimeErr, "Error parsing 'fromTime' field")
	}
	fromTime := CastBACnetApplicationTagTime(_fromTime)
	if closeErr := readBuffer.CloseContext("fromTime"); closeErr != nil {
		return nil, closeErr
	}

	// Simple Field (toTime)
	if pullErr := readBuffer.PullContext("toTime"); pullErr != nil {
		return nil, pullErr
	}
	_toTime, _toTimeErr := BACnetApplicationTagParse(readBuffer)
	if _toTimeErr != nil {
		return nil, errors.Wrap(_toTimeErr, "Error parsing 'toTime' field")
	}
	toTime := CastBACnetApplicationTagTime(_toTime)
	if closeErr := readBuffer.CloseContext("toTime"); closeErr != nil {
		return nil, closeErr
	}

	// Simple Field (recipient)
	if pullErr := readBuffer.PullContext("recipient"); pullErr != nil {
		return nil, pullErr
	}
	_recipient, _recipientErr := BACnetRecipientParse(readBuffer)
	if _recipientErr != nil {
		return nil, errors.Wrap(_recipientErr, "Error parsing 'recipient' field")
	}
	recipient := CastBACnetRecipient(_recipient)
	if closeErr := readBuffer.CloseContext("recipient"); closeErr != nil {
		return nil, closeErr
	}

	// Simple Field (processIdentifier)
	if pullErr := readBuffer.PullContext("processIdentifier"); pullErr != nil {
		return nil, pullErr
	}
	_processIdentifier, _processIdentifierErr := BACnetApplicationTagParse(readBuffer)
	if _processIdentifierErr != nil {
		return nil, errors.Wrap(_processIdentifierErr, "Error parsing 'processIdentifier' field")
	}
	processIdentifier := CastBACnetApplicationTagUnsignedInteger(_processIdentifier)
	if closeErr := readBuffer.CloseContext("processIdentifier"); closeErr != nil {
		return nil, closeErr
	}

	// Simple Field (issueConfirmedNotifications)
	if pullErr := readBuffer.PullContext("issueConfirmedNotifications"); pullErr != nil {
		return nil, pullErr
	}
	_issueConfirmedNotifications, _issueConfirmedNotificationsErr := BACnetApplicationTagParse(readBuffer)
	if _issueConfirmedNotificationsErr != nil {
		return nil, errors.Wrap(_issueConfirmedNotificationsErr, "Error parsing 'issueConfirmedNotifications' field")
	}
	issueConfirmedNotifications := CastBACnetApplicationTagBoolean(_issueConfirmedNotifications)
	if closeErr := readBuffer.CloseContext("issueConfirmedNotifications"); closeErr != nil {
		return nil, closeErr
	}

	// Simple Field (transitions)
	if pullErr := readBuffer.PullContext("transitions"); pullErr != nil {
		return nil, pullErr
	}
	_transitions, _transitionsErr := BACnetEventTransitionBitsTaggedParse(readBuffer, uint8(uint8(0)), TagClass(TagClass_APPLICATION_TAGS))
	if _transitionsErr != nil {
		return nil, errors.Wrap(_transitionsErr, "Error parsing 'transitions' field")
	}
	transitions := CastBACnetEventTransitionBitsTagged(_transitions)
	if closeErr := readBuffer.CloseContext("transitions"); closeErr != nil {
		return nil, closeErr
	}

	if closeErr := readBuffer.CloseContext("BACnetDestination"); closeErr != nil {
		return nil, closeErr
	}

	// Create the instance
	return NewBACnetDestination(validDays, fromTime, toTime, recipient, processIdentifier, issueConfirmedNotifications, transitions), nil
}

func (m *BACnetDestination) Serialize(writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	if pushErr := writeBuffer.PushContext("BACnetDestination"); pushErr != nil {
		return pushErr
	}

	// Simple Field (validDays)
	if pushErr := writeBuffer.PushContext("validDays"); pushErr != nil {
		return pushErr
	}
	_validDaysErr := m.ValidDays.Serialize(writeBuffer)
	if popErr := writeBuffer.PopContext("validDays"); popErr != nil {
		return popErr
	}
	if _validDaysErr != nil {
		return errors.Wrap(_validDaysErr, "Error serializing 'validDays' field")
	}

	// Simple Field (fromTime)
	if pushErr := writeBuffer.PushContext("fromTime"); pushErr != nil {
		return pushErr
	}
	_fromTimeErr := m.FromTime.Serialize(writeBuffer)
	if popErr := writeBuffer.PopContext("fromTime"); popErr != nil {
		return popErr
	}
	if _fromTimeErr != nil {
		return errors.Wrap(_fromTimeErr, "Error serializing 'fromTime' field")
	}

	// Simple Field (toTime)
	if pushErr := writeBuffer.PushContext("toTime"); pushErr != nil {
		return pushErr
	}
	_toTimeErr := m.ToTime.Serialize(writeBuffer)
	if popErr := writeBuffer.PopContext("toTime"); popErr != nil {
		return popErr
	}
	if _toTimeErr != nil {
		return errors.Wrap(_toTimeErr, "Error serializing 'toTime' field")
	}

	// Simple Field (recipient)
	if pushErr := writeBuffer.PushContext("recipient"); pushErr != nil {
		return pushErr
	}
	_recipientErr := m.Recipient.Serialize(writeBuffer)
	if popErr := writeBuffer.PopContext("recipient"); popErr != nil {
		return popErr
	}
	if _recipientErr != nil {
		return errors.Wrap(_recipientErr, "Error serializing 'recipient' field")
	}

	// Simple Field (processIdentifier)
	if pushErr := writeBuffer.PushContext("processIdentifier"); pushErr != nil {
		return pushErr
	}
	_processIdentifierErr := m.ProcessIdentifier.Serialize(writeBuffer)
	if popErr := writeBuffer.PopContext("processIdentifier"); popErr != nil {
		return popErr
	}
	if _processIdentifierErr != nil {
		return errors.Wrap(_processIdentifierErr, "Error serializing 'processIdentifier' field")
	}

	// Simple Field (issueConfirmedNotifications)
	if pushErr := writeBuffer.PushContext("issueConfirmedNotifications"); pushErr != nil {
		return pushErr
	}
	_issueConfirmedNotificationsErr := m.IssueConfirmedNotifications.Serialize(writeBuffer)
	if popErr := writeBuffer.PopContext("issueConfirmedNotifications"); popErr != nil {
		return popErr
	}
	if _issueConfirmedNotificationsErr != nil {
		return errors.Wrap(_issueConfirmedNotificationsErr, "Error serializing 'issueConfirmedNotifications' field")
	}

	// Simple Field (transitions)
	if pushErr := writeBuffer.PushContext("transitions"); pushErr != nil {
		return pushErr
	}
	_transitionsErr := m.Transitions.Serialize(writeBuffer)
	if popErr := writeBuffer.PopContext("transitions"); popErr != nil {
		return popErr
	}
	if _transitionsErr != nil {
		return errors.Wrap(_transitionsErr, "Error serializing 'transitions' field")
	}

	if popErr := writeBuffer.PopContext("BACnetDestination"); popErr != nil {
		return popErr
	}
	return nil
}

func (m *BACnetDestination) String() string {
	if m == nil {
		return "<nil>"
	}
	buffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := m.Serialize(buffer); err != nil {
		return err.Error()
	}
	return buffer.GetBox().String()
}
