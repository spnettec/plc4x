/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// BACnetPropertyAccessResultAccessResultPropertyAccessError is the data-structure of this message
type BACnetPropertyAccessResultAccessResultPropertyAccessError struct {
	*BACnetPropertyAccessResultAccessResult
	PropertyAccessError *ErrorEnclosed

	// Arguments.
	ObjectTypeArgument         BACnetObjectType
	PropertyIdentifierArgument BACnetPropertyIdentifier
	PropertyArrayIndexArgument *BACnetTagPayloadUnsignedInteger
}

// IBACnetPropertyAccessResultAccessResultPropertyAccessError is the corresponding interface of BACnetPropertyAccessResultAccessResultPropertyAccessError
type IBACnetPropertyAccessResultAccessResultPropertyAccessError interface {
	IBACnetPropertyAccessResultAccessResult
	// GetPropertyAccessError returns PropertyAccessError (property field)
	GetPropertyAccessError() *ErrorEnclosed
	// GetLengthInBytes returns the length in bytes
	GetLengthInBytes() uint16
	// GetLengthInBits returns the length in bits
	GetLengthInBits() uint16
	// Serialize serializes this type
	Serialize(writeBuffer utils.WriteBuffer) error
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for discriminator values.
///////////////////////

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

func (m *BACnetPropertyAccessResultAccessResultPropertyAccessError) InitializeParent(parent *BACnetPropertyAccessResultAccessResult, peekedTagHeader *BACnetTagHeader) {
	m.BACnetPropertyAccessResultAccessResult.PeekedTagHeader = peekedTagHeader
}

func (m *BACnetPropertyAccessResultAccessResultPropertyAccessError) GetParent() *BACnetPropertyAccessResultAccessResult {
	return m.BACnetPropertyAccessResultAccessResult
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *BACnetPropertyAccessResultAccessResultPropertyAccessError) GetPropertyAccessError() *ErrorEnclosed {
	return m.PropertyAccessError
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewBACnetPropertyAccessResultAccessResultPropertyAccessError factory function for BACnetPropertyAccessResultAccessResultPropertyAccessError
func NewBACnetPropertyAccessResultAccessResultPropertyAccessError(propertyAccessError *ErrorEnclosed, peekedTagHeader *BACnetTagHeader, objectTypeArgument BACnetObjectType, propertyIdentifierArgument BACnetPropertyIdentifier, propertyArrayIndexArgument *BACnetTagPayloadUnsignedInteger) *BACnetPropertyAccessResultAccessResultPropertyAccessError {
	_result := &BACnetPropertyAccessResultAccessResultPropertyAccessError{
		PropertyAccessError:                    propertyAccessError,
		BACnetPropertyAccessResultAccessResult: NewBACnetPropertyAccessResultAccessResult(peekedTagHeader, objectTypeArgument, propertyIdentifierArgument, propertyArrayIndexArgument),
	}
	_result.Child = _result
	return _result
}

func CastBACnetPropertyAccessResultAccessResultPropertyAccessError(structType interface{}) *BACnetPropertyAccessResultAccessResultPropertyAccessError {
	if casted, ok := structType.(BACnetPropertyAccessResultAccessResultPropertyAccessError); ok {
		return &casted
	}
	if casted, ok := structType.(*BACnetPropertyAccessResultAccessResultPropertyAccessError); ok {
		return casted
	}
	if casted, ok := structType.(BACnetPropertyAccessResultAccessResult); ok {
		return CastBACnetPropertyAccessResultAccessResultPropertyAccessError(casted.Child)
	}
	if casted, ok := structType.(*BACnetPropertyAccessResultAccessResult); ok {
		return CastBACnetPropertyAccessResultAccessResultPropertyAccessError(casted.Child)
	}
	return nil
}

func (m *BACnetPropertyAccessResultAccessResultPropertyAccessError) GetTypeName() string {
	return "BACnetPropertyAccessResultAccessResultPropertyAccessError"
}

func (m *BACnetPropertyAccessResultAccessResultPropertyAccessError) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *BACnetPropertyAccessResultAccessResultPropertyAccessError) GetLengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(m.GetParentLengthInBits())

	// Simple field (propertyAccessError)
	lengthInBits += m.PropertyAccessError.GetLengthInBits()

	return lengthInBits
}

func (m *BACnetPropertyAccessResultAccessResultPropertyAccessError) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func BACnetPropertyAccessResultAccessResultPropertyAccessErrorParse(readBuffer utils.ReadBuffer, objectTypeArgument BACnetObjectType, propertyIdentifierArgument BACnetPropertyIdentifier, propertyArrayIndexArgument *BACnetTagPayloadUnsignedInteger) (*BACnetPropertyAccessResultAccessResultPropertyAccessError, error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("BACnetPropertyAccessResultAccessResultPropertyAccessError"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for BACnetPropertyAccessResultAccessResultPropertyAccessError")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	// Simple Field (propertyAccessError)
	if pullErr := readBuffer.PullContext("propertyAccessError"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for propertyAccessError")
	}
	_propertyAccessError, _propertyAccessErrorErr := ErrorEnclosedParse(readBuffer, uint8(uint8(5)))
	if _propertyAccessErrorErr != nil {
		return nil, errors.Wrap(_propertyAccessErrorErr, "Error parsing 'propertyAccessError' field")
	}
	propertyAccessError := CastErrorEnclosed(_propertyAccessError)
	if closeErr := readBuffer.CloseContext("propertyAccessError"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for propertyAccessError")
	}

	if closeErr := readBuffer.CloseContext("BACnetPropertyAccessResultAccessResultPropertyAccessError"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for BACnetPropertyAccessResultAccessResultPropertyAccessError")
	}

	// Create a partially initialized instance
	_child := &BACnetPropertyAccessResultAccessResultPropertyAccessError{
		PropertyAccessError:                    CastErrorEnclosed(propertyAccessError),
		BACnetPropertyAccessResultAccessResult: &BACnetPropertyAccessResultAccessResult{},
	}
	_child.BACnetPropertyAccessResultAccessResult.Child = _child
	return _child, nil
}

func (m *BACnetPropertyAccessResultAccessResultPropertyAccessError) Serialize(writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	ser := func() error {
		if pushErr := writeBuffer.PushContext("BACnetPropertyAccessResultAccessResultPropertyAccessError"); pushErr != nil {
			return errors.Wrap(pushErr, "Error pushing for BACnetPropertyAccessResultAccessResultPropertyAccessError")
		}

		// Simple Field (propertyAccessError)
		if pushErr := writeBuffer.PushContext("propertyAccessError"); pushErr != nil {
			return errors.Wrap(pushErr, "Error pushing for propertyAccessError")
		}
		_propertyAccessErrorErr := writeBuffer.WriteSerializable(m.PropertyAccessError)
		if popErr := writeBuffer.PopContext("propertyAccessError"); popErr != nil {
			return errors.Wrap(popErr, "Error popping for propertyAccessError")
		}
		if _propertyAccessErrorErr != nil {
			return errors.Wrap(_propertyAccessErrorErr, "Error serializing 'propertyAccessError' field")
		}

		if popErr := writeBuffer.PopContext("BACnetPropertyAccessResultAccessResultPropertyAccessError"); popErr != nil {
			return errors.Wrap(popErr, "Error popping for BACnetPropertyAccessResultAccessResultPropertyAccessError")
		}
		return nil
	}
	return m.SerializeParent(writeBuffer, m, ser)
}

func (m *BACnetPropertyAccessResultAccessResultPropertyAccessError) String() string {
	if m == nil {
		return "<nil>"
	}
	writeBuffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := writeBuffer.WriteSerializable(m); err != nil {
		return err.Error()
	}
	return writeBuffer.GetBox().String()
}
