/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// BACnetError is the data-structure of this message
type BACnetError struct {
	Child IBACnetErrorChild
}

// IBACnetError is the corresponding interface of BACnetError
type IBACnetError interface {
	// GetErrorChoice returns ErrorChoice (discriminator field)
	GetErrorChoice() BACnetConfirmedServiceChoice
	// GetLengthInBytes returns the length in bytes
	GetLengthInBytes() uint16
	// GetLengthInBits returns the length in bits
	GetLengthInBits() uint16
	// Serialize serializes this type
	Serialize(writeBuffer utils.WriteBuffer) error
}

type IBACnetErrorParent interface {
	SerializeParent(writeBuffer utils.WriteBuffer, child IBACnetError, serializeChildFunction func() error) error
	GetTypeName() string
}

type IBACnetErrorChild interface {
	Serialize(writeBuffer utils.WriteBuffer) error
	InitializeParent(parent *BACnetError)
	GetParent() *BACnetError

	GetTypeName() string
	IBACnetError
}

// NewBACnetError factory function for BACnetError
func NewBACnetError() *BACnetError {
	return &BACnetError{}
}

func CastBACnetError(structType interface{}) *BACnetError {
	if casted, ok := structType.(BACnetError); ok {
		return &casted
	}
	if casted, ok := structType.(*BACnetError); ok {
		return casted
	}
	if casted, ok := structType.(IBACnetErrorChild); ok {
		return casted.GetParent()
	}
	return nil
}

func (m *BACnetError) GetTypeName() string {
	return "BACnetError"
}

func (m *BACnetError) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *BACnetError) GetLengthInBitsConditional(lastItem bool) uint16 {
	return m.Child.GetLengthInBits()
}

func (m *BACnetError) GetParentLengthInBits() uint16 {
	lengthInBits := uint16(0)

	return lengthInBits
}

func (m *BACnetError) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func BACnetErrorParse(readBuffer utils.ReadBuffer, errorChoice BACnetConfirmedServiceChoice) (*BACnetError, error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("BACnetError"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for BACnetError")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	// Switch Field (Depending on the discriminator values, passes the instantiation to a sub-type)
	type BACnetErrorChild interface {
		InitializeParent(*BACnetError)
		GetParent() *BACnetError
	}
	var _child BACnetErrorChild
	var typeSwitchError error
	switch {
	case errorChoice == BACnetConfirmedServiceChoice_SUBSCRIBE_COV_PROPERTY_MULTIPLE: // SubscribeCOVPropertyMultipleError
		_child, typeSwitchError = SubscribeCOVPropertyMultipleErrorParse(readBuffer, errorChoice)
	case errorChoice == BACnetConfirmedServiceChoice_ADD_LIST_ELEMENT: // ChangeListAddError
		_child, typeSwitchError = ChangeListAddErrorParse(readBuffer, errorChoice)
	case errorChoice == BACnetConfirmedServiceChoice_REMOVE_LIST_ELEMENT: // ChangeListRemoveError
		_child, typeSwitchError = ChangeListRemoveErrorParse(readBuffer, errorChoice)
	case errorChoice == BACnetConfirmedServiceChoice_CREATE_OBJECT: // CreateObjectError
		_child, typeSwitchError = CreateObjectErrorParse(readBuffer, errorChoice)
	case errorChoice == BACnetConfirmedServiceChoice_WRITE_PROPERTY_MULTIPLE: // WritePropertyMultipleError
		_child, typeSwitchError = WritePropertyMultipleErrorParse(readBuffer, errorChoice)
	case errorChoice == BACnetConfirmedServiceChoice_CONFIRMED_PRIVATE_TRANSFER: // ConfirmedPrivateTransferError
		_child, typeSwitchError = ConfirmedPrivateTransferErrorParse(readBuffer, errorChoice)
	case errorChoice == BACnetConfirmedServiceChoice_VT_CLOSE: // VTCloseError
		_child, typeSwitchError = VTCloseErrorParse(readBuffer, errorChoice)
	case true: // BACnetErrorGeneral
		_child, typeSwitchError = BACnetErrorGeneralParse(readBuffer, errorChoice)
	default:
		// TODO: return actual type
		typeSwitchError = errors.New("Unmapped type")
	}
	if typeSwitchError != nil {
		return nil, errors.Wrap(typeSwitchError, "Error parsing sub-type for type-switch.")
	}

	if closeErr := readBuffer.CloseContext("BACnetError"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for BACnetError")
	}

	// Finish initializing
	_child.InitializeParent(_child.GetParent())
	return _child.GetParent(), nil
}

func (m *BACnetError) Serialize(writeBuffer utils.WriteBuffer) error {
	return m.Child.Serialize(writeBuffer)
}

func (m *BACnetError) SerializeParent(writeBuffer utils.WriteBuffer, child IBACnetError, serializeChildFunction func() error) error {
	positionAware := writeBuffer
	_ = positionAware
	if pushErr := writeBuffer.PushContext("BACnetError"); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for BACnetError")
	}

	// Switch field (Depending on the discriminator values, passes the serialization to a sub-type)
	if _typeSwitchErr := serializeChildFunction(); _typeSwitchErr != nil {
		return errors.Wrap(_typeSwitchErr, "Error serializing sub-type field")
	}

	if popErr := writeBuffer.PopContext("BACnetError"); popErr != nil {
		return errors.Wrap(popErr, "Error popping for BACnetError")
	}
	return nil
}

func (m *BACnetError) String() string {
	if m == nil {
		return "<nil>"
	}
	writeBuffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := writeBuffer.WriteSerializable(m); err != nil {
		return err.Error()
	}
	return writeBuffer.GetBox().String()
}
