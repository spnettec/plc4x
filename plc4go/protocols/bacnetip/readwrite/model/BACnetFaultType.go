/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// BACnetFaultType is an enum
type BACnetFaultType uint8

type IBACnetFaultType interface {
	Serialize(writeBuffer utils.WriteBuffer) error
}

const (
	BACnetFaultType_NONE                  BACnetFaultType = 0
	BACnetFaultType_FAULT_CHARACTERSTRING BACnetFaultType = 1
	BACnetFaultType_FAULT_EXTENDED        BACnetFaultType = 2
	BACnetFaultType_FAULT_LIFE_SAFETY     BACnetFaultType = 3
	BACnetFaultType_FAULT_STATE           BACnetFaultType = 4
	BACnetFaultType_FAULT_STATUS_FLAGS    BACnetFaultType = 5
	BACnetFaultType_FAULT_OUT_OF_RANGE    BACnetFaultType = 6
	BACnetFaultType_FAULT_LISTED          BACnetFaultType = 7
)

var BACnetFaultTypeValues []BACnetFaultType

func init() {
	_ = errors.New
	BACnetFaultTypeValues = []BACnetFaultType{
		BACnetFaultType_NONE,
		BACnetFaultType_FAULT_CHARACTERSTRING,
		BACnetFaultType_FAULT_EXTENDED,
		BACnetFaultType_FAULT_LIFE_SAFETY,
		BACnetFaultType_FAULT_STATE,
		BACnetFaultType_FAULT_STATUS_FLAGS,
		BACnetFaultType_FAULT_OUT_OF_RANGE,
		BACnetFaultType_FAULT_LISTED,
	}
}

func BACnetFaultTypeByValue(value uint8) BACnetFaultType {
	switch value {
	case 0:
		return BACnetFaultType_NONE
	case 1:
		return BACnetFaultType_FAULT_CHARACTERSTRING
	case 2:
		return BACnetFaultType_FAULT_EXTENDED
	case 3:
		return BACnetFaultType_FAULT_LIFE_SAFETY
	case 4:
		return BACnetFaultType_FAULT_STATE
	case 5:
		return BACnetFaultType_FAULT_STATUS_FLAGS
	case 6:
		return BACnetFaultType_FAULT_OUT_OF_RANGE
	case 7:
		return BACnetFaultType_FAULT_LISTED
	}
	return 0
}

func BACnetFaultTypeByName(value string) BACnetFaultType {
	switch value {
	case "NONE":
		return BACnetFaultType_NONE
	case "FAULT_CHARACTERSTRING":
		return BACnetFaultType_FAULT_CHARACTERSTRING
	case "FAULT_EXTENDED":
		return BACnetFaultType_FAULT_EXTENDED
	case "FAULT_LIFE_SAFETY":
		return BACnetFaultType_FAULT_LIFE_SAFETY
	case "FAULT_STATE":
		return BACnetFaultType_FAULT_STATE
	case "FAULT_STATUS_FLAGS":
		return BACnetFaultType_FAULT_STATUS_FLAGS
	case "FAULT_OUT_OF_RANGE":
		return BACnetFaultType_FAULT_OUT_OF_RANGE
	case "FAULT_LISTED":
		return BACnetFaultType_FAULT_LISTED
	}
	return 0
}

func BACnetFaultTypeKnows(value uint8) bool {
	for _, typeValue := range BACnetFaultTypeValues {
		if uint8(typeValue) == value {
			return true
		}
	}
	return false
}

func CastBACnetFaultType(structType interface{}) BACnetFaultType {
	castFunc := func(typ interface{}) BACnetFaultType {
		if sBACnetFaultType, ok := typ.(BACnetFaultType); ok {
			return sBACnetFaultType
		}
		return 0
	}
	return castFunc(structType)
}

func (m BACnetFaultType) GetLengthInBits() uint16 {
	return 8
}

func (m BACnetFaultType) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func BACnetFaultTypeParse(readBuffer utils.ReadBuffer) (BACnetFaultType, error) {
	val, err := readBuffer.ReadUint8("BACnetFaultType", 8)
	if err != nil {
		return 0, nil
	}
	return BACnetFaultTypeByValue(val), nil
}

func (e BACnetFaultType) Serialize(writeBuffer utils.WriteBuffer) error {
	return writeBuffer.WriteUint8("BACnetFaultType", 8, uint8(e), utils.WithAdditionalStringRepresentation(e.name()))
}

func (e BACnetFaultType) name() string {
	switch e {
	case BACnetFaultType_NONE:
		return "NONE"
	case BACnetFaultType_FAULT_CHARACTERSTRING:
		return "FAULT_CHARACTERSTRING"
	case BACnetFaultType_FAULT_EXTENDED:
		return "FAULT_EXTENDED"
	case BACnetFaultType_FAULT_LIFE_SAFETY:
		return "FAULT_LIFE_SAFETY"
	case BACnetFaultType_FAULT_STATE:
		return "FAULT_STATE"
	case BACnetFaultType_FAULT_STATUS_FLAGS:
		return "FAULT_STATUS_FLAGS"
	case BACnetFaultType_FAULT_OUT_OF_RANGE:
		return "FAULT_OUT_OF_RANGE"
	case BACnetFaultType_FAULT_LISTED:
		return "FAULT_LISTED"
	}
	return ""
}

func (e BACnetFaultType) String() string {
	return e.name()
}
