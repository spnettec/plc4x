/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// BACnetFaultParameterNone is the data-structure of this message
type BACnetFaultParameterNone struct {
	*BACnetFaultParameter
	None *BACnetContextTagNull
}

// IBACnetFaultParameterNone is the corresponding interface of BACnetFaultParameterNone
type IBACnetFaultParameterNone interface {
	IBACnetFaultParameter
	// GetNone returns None (property field)
	GetNone() *BACnetContextTagNull
	// GetLengthInBytes returns the length in bytes
	GetLengthInBytes() uint16
	// GetLengthInBits returns the length in bits
	GetLengthInBits() uint16
	// Serialize serializes this type
	Serialize(writeBuffer utils.WriteBuffer) error
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for discriminator values.
///////////////////////

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

func (m *BACnetFaultParameterNone) InitializeParent(parent *BACnetFaultParameter, peekedTagHeader *BACnetTagHeader) {
	m.BACnetFaultParameter.PeekedTagHeader = peekedTagHeader
}

func (m *BACnetFaultParameterNone) GetParent() *BACnetFaultParameter {
	return m.BACnetFaultParameter
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *BACnetFaultParameterNone) GetNone() *BACnetContextTagNull {
	return m.None
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewBACnetFaultParameterNone factory function for BACnetFaultParameterNone
func NewBACnetFaultParameterNone(none *BACnetContextTagNull, peekedTagHeader *BACnetTagHeader) *BACnetFaultParameterNone {
	_result := &BACnetFaultParameterNone{
		None:                 none,
		BACnetFaultParameter: NewBACnetFaultParameter(peekedTagHeader),
	}
	_result.Child = _result
	return _result
}

func CastBACnetFaultParameterNone(structType interface{}) *BACnetFaultParameterNone {
	if casted, ok := structType.(BACnetFaultParameterNone); ok {
		return &casted
	}
	if casted, ok := structType.(*BACnetFaultParameterNone); ok {
		return casted
	}
	if casted, ok := structType.(BACnetFaultParameter); ok {
		return CastBACnetFaultParameterNone(casted.Child)
	}
	if casted, ok := structType.(*BACnetFaultParameter); ok {
		return CastBACnetFaultParameterNone(casted.Child)
	}
	return nil
}

func (m *BACnetFaultParameterNone) GetTypeName() string {
	return "BACnetFaultParameterNone"
}

func (m *BACnetFaultParameterNone) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *BACnetFaultParameterNone) GetLengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(m.GetParentLengthInBits())

	// Simple field (none)
	lengthInBits += m.None.GetLengthInBits()

	return lengthInBits
}

func (m *BACnetFaultParameterNone) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func BACnetFaultParameterNoneParse(readBuffer utils.ReadBuffer) (*BACnetFaultParameterNone, error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("BACnetFaultParameterNone"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for BACnetFaultParameterNone")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	// Simple Field (none)
	if pullErr := readBuffer.PullContext("none"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for none")
	}
	_none, _noneErr := BACnetContextTagParse(readBuffer, uint8(uint8(0)), BACnetDataType(BACnetDataType_NULL))
	if _noneErr != nil {
		return nil, errors.Wrap(_noneErr, "Error parsing 'none' field")
	}
	none := CastBACnetContextTagNull(_none)
	if closeErr := readBuffer.CloseContext("none"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for none")
	}

	if closeErr := readBuffer.CloseContext("BACnetFaultParameterNone"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for BACnetFaultParameterNone")
	}

	// Create a partially initialized instance
	_child := &BACnetFaultParameterNone{
		None:                 CastBACnetContextTagNull(none),
		BACnetFaultParameter: &BACnetFaultParameter{},
	}
	_child.BACnetFaultParameter.Child = _child
	return _child, nil
}

func (m *BACnetFaultParameterNone) Serialize(writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	ser := func() error {
		if pushErr := writeBuffer.PushContext("BACnetFaultParameterNone"); pushErr != nil {
			return errors.Wrap(pushErr, "Error pushing for BACnetFaultParameterNone")
		}

		// Simple Field (none)
		if pushErr := writeBuffer.PushContext("none"); pushErr != nil {
			return errors.Wrap(pushErr, "Error pushing for none")
		}
		_noneErr := m.None.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("none"); popErr != nil {
			return errors.Wrap(popErr, "Error popping for none")
		}
		if _noneErr != nil {
			return errors.Wrap(_noneErr, "Error serializing 'none' field")
		}

		if popErr := writeBuffer.PopContext("BACnetFaultParameterNone"); popErr != nil {
			return errors.Wrap(popErr, "Error popping for BACnetFaultParameterNone")
		}
		return nil
	}
	return m.SerializeParent(writeBuffer, m, ser)
}

func (m *BACnetFaultParameterNone) String() string {
	if m == nil {
		return "<nil>"
	}
	buffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := m.Serialize(buffer); err != nil {
		return err.Error()
	}
	return buffer.GetBox().String()
}
