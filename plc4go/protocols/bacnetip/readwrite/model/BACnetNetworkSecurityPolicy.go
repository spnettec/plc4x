/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// BACnetNetworkSecurityPolicy is the data-structure of this message
type BACnetNetworkSecurityPolicy struct {
	PortId        *BACnetContextTagUnsignedInteger
	SecurityLevel *BACnetSecurityPolicyTagged
}

// IBACnetNetworkSecurityPolicy is the corresponding interface of BACnetNetworkSecurityPolicy
type IBACnetNetworkSecurityPolicy interface {
	// GetPortId returns PortId (property field)
	GetPortId() *BACnetContextTagUnsignedInteger
	// GetSecurityLevel returns SecurityLevel (property field)
	GetSecurityLevel() *BACnetSecurityPolicyTagged
	// GetLengthInBytes returns the length in bytes
	GetLengthInBytes() uint16
	// GetLengthInBits returns the length in bits
	GetLengthInBits() uint16
	// Serialize serializes this type
	Serialize(writeBuffer utils.WriteBuffer) error
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *BACnetNetworkSecurityPolicy) GetPortId() *BACnetContextTagUnsignedInteger {
	return m.PortId
}

func (m *BACnetNetworkSecurityPolicy) GetSecurityLevel() *BACnetSecurityPolicyTagged {
	return m.SecurityLevel
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewBACnetNetworkSecurityPolicy factory function for BACnetNetworkSecurityPolicy
func NewBACnetNetworkSecurityPolicy(portId *BACnetContextTagUnsignedInteger, securityLevel *BACnetSecurityPolicyTagged) *BACnetNetworkSecurityPolicy {
	return &BACnetNetworkSecurityPolicy{PortId: portId, SecurityLevel: securityLevel}
}

func CastBACnetNetworkSecurityPolicy(structType interface{}) *BACnetNetworkSecurityPolicy {
	if casted, ok := structType.(BACnetNetworkSecurityPolicy); ok {
		return &casted
	}
	if casted, ok := structType.(*BACnetNetworkSecurityPolicy); ok {
		return casted
	}
	return nil
}

func (m *BACnetNetworkSecurityPolicy) GetTypeName() string {
	return "BACnetNetworkSecurityPolicy"
}

func (m *BACnetNetworkSecurityPolicy) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *BACnetNetworkSecurityPolicy) GetLengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(0)

	// Simple field (portId)
	lengthInBits += m.PortId.GetLengthInBits()

	// Simple field (securityLevel)
	lengthInBits += m.SecurityLevel.GetLengthInBits()

	return lengthInBits
}

func (m *BACnetNetworkSecurityPolicy) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func BACnetNetworkSecurityPolicyParse(readBuffer utils.ReadBuffer) (*BACnetNetworkSecurityPolicy, error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("BACnetNetworkSecurityPolicy"); pullErr != nil {
		return nil, pullErr
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	// Simple Field (portId)
	if pullErr := readBuffer.PullContext("portId"); pullErr != nil {
		return nil, pullErr
	}
	_portId, _portIdErr := BACnetContextTagParse(readBuffer, uint8(uint8(0)), BACnetDataType(BACnetDataType_UNSIGNED_INTEGER))
	if _portIdErr != nil {
		return nil, errors.Wrap(_portIdErr, "Error parsing 'portId' field")
	}
	portId := CastBACnetContextTagUnsignedInteger(_portId)
	if closeErr := readBuffer.CloseContext("portId"); closeErr != nil {
		return nil, closeErr
	}

	// Simple Field (securityLevel)
	if pullErr := readBuffer.PullContext("securityLevel"); pullErr != nil {
		return nil, pullErr
	}
	_securityLevel, _securityLevelErr := BACnetSecurityPolicyTaggedParse(readBuffer, uint8(uint8(1)), TagClass(TagClass_CONTEXT_SPECIFIC_TAGS))
	if _securityLevelErr != nil {
		return nil, errors.Wrap(_securityLevelErr, "Error parsing 'securityLevel' field")
	}
	securityLevel := CastBACnetSecurityPolicyTagged(_securityLevel)
	if closeErr := readBuffer.CloseContext("securityLevel"); closeErr != nil {
		return nil, closeErr
	}

	if closeErr := readBuffer.CloseContext("BACnetNetworkSecurityPolicy"); closeErr != nil {
		return nil, closeErr
	}

	// Create the instance
	return NewBACnetNetworkSecurityPolicy(portId, securityLevel), nil
}

func (m *BACnetNetworkSecurityPolicy) Serialize(writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	if pushErr := writeBuffer.PushContext("BACnetNetworkSecurityPolicy"); pushErr != nil {
		return pushErr
	}

	// Simple Field (portId)
	if pushErr := writeBuffer.PushContext("portId"); pushErr != nil {
		return pushErr
	}
	_portIdErr := m.PortId.Serialize(writeBuffer)
	if popErr := writeBuffer.PopContext("portId"); popErr != nil {
		return popErr
	}
	if _portIdErr != nil {
		return errors.Wrap(_portIdErr, "Error serializing 'portId' field")
	}

	// Simple Field (securityLevel)
	if pushErr := writeBuffer.PushContext("securityLevel"); pushErr != nil {
		return pushErr
	}
	_securityLevelErr := m.SecurityLevel.Serialize(writeBuffer)
	if popErr := writeBuffer.PopContext("securityLevel"); popErr != nil {
		return popErr
	}
	if _securityLevelErr != nil {
		return errors.Wrap(_securityLevelErr, "Error serializing 'securityLevel' field")
	}

	if popErr := writeBuffer.PopContext("BACnetNetworkSecurityPolicy"); popErr != nil {
		return popErr
	}
	return nil
}

func (m *BACnetNetworkSecurityPolicy) String() string {
	if m == nil {
		return "<nil>"
	}
	buffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := m.Serialize(buffer); err != nil {
		return err.Error()
	}
	return buffer.GetBox().String()
}
