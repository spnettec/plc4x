/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/spi/utils"
	"github.com/pkg/errors"
	"io"
)

// Code generated by code-generation. DO NOT EDIT.

// BACnetAccessRule is the data-structure of this message
type BACnetAccessRule struct {
	TimeRangeSpecifier *BACnetAccessRuleTimeRangeSpecifierTagged
	TimeRange          *BACnetDeviceObjectPropertyReferenceEnclosed
	LocationSpecifier  *BACnetAccessRuleLocationSpecifierTagged
	Location           *BACnetDeviceObjectReferenceEnclosed
	Enable             *BACnetContextTagBoolean
}

// IBACnetAccessRule is the corresponding interface of BACnetAccessRule
type IBACnetAccessRule interface {
	// GetTimeRangeSpecifier returns TimeRangeSpecifier (property field)
	GetTimeRangeSpecifier() *BACnetAccessRuleTimeRangeSpecifierTagged
	// GetTimeRange returns TimeRange (property field)
	GetTimeRange() *BACnetDeviceObjectPropertyReferenceEnclosed
	// GetLocationSpecifier returns LocationSpecifier (property field)
	GetLocationSpecifier() *BACnetAccessRuleLocationSpecifierTagged
	// GetLocation returns Location (property field)
	GetLocation() *BACnetDeviceObjectReferenceEnclosed
	// GetEnable returns Enable (property field)
	GetEnable() *BACnetContextTagBoolean
	// GetLengthInBytes returns the length in bytes
	GetLengthInBytes() uint16
	// GetLengthInBits returns the length in bits
	GetLengthInBits() uint16
	// Serialize serializes this type
	Serialize(writeBuffer utils.WriteBuffer) error
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *BACnetAccessRule) GetTimeRangeSpecifier() *BACnetAccessRuleTimeRangeSpecifierTagged {
	return m.TimeRangeSpecifier
}

func (m *BACnetAccessRule) GetTimeRange() *BACnetDeviceObjectPropertyReferenceEnclosed {
	return m.TimeRange
}

func (m *BACnetAccessRule) GetLocationSpecifier() *BACnetAccessRuleLocationSpecifierTagged {
	return m.LocationSpecifier
}

func (m *BACnetAccessRule) GetLocation() *BACnetDeviceObjectReferenceEnclosed {
	return m.Location
}

func (m *BACnetAccessRule) GetEnable() *BACnetContextTagBoolean {
	return m.Enable
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewBACnetAccessRule factory function for BACnetAccessRule
func NewBACnetAccessRule(timeRangeSpecifier *BACnetAccessRuleTimeRangeSpecifierTagged, timeRange *BACnetDeviceObjectPropertyReferenceEnclosed, locationSpecifier *BACnetAccessRuleLocationSpecifierTagged, location *BACnetDeviceObjectReferenceEnclosed, enable *BACnetContextTagBoolean) *BACnetAccessRule {
	return &BACnetAccessRule{TimeRangeSpecifier: timeRangeSpecifier, TimeRange: timeRange, LocationSpecifier: locationSpecifier, Location: location, Enable: enable}
}

func CastBACnetAccessRule(structType interface{}) *BACnetAccessRule {
	if casted, ok := structType.(BACnetAccessRule); ok {
		return &casted
	}
	if casted, ok := structType.(*BACnetAccessRule); ok {
		return casted
	}
	return nil
}

func (m *BACnetAccessRule) GetTypeName() string {
	return "BACnetAccessRule"
}

func (m *BACnetAccessRule) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *BACnetAccessRule) GetLengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(0)

	// Simple field (timeRangeSpecifier)
	lengthInBits += m.TimeRangeSpecifier.GetLengthInBits()

	// Optional Field (timeRange)
	if m.TimeRange != nil {
		lengthInBits += (*m.TimeRange).GetLengthInBits()
	}

	// Simple field (locationSpecifier)
	lengthInBits += m.LocationSpecifier.GetLengthInBits()

	// Optional Field (location)
	if m.Location != nil {
		lengthInBits += (*m.Location).GetLengthInBits()
	}

	// Simple field (enable)
	lengthInBits += m.Enable.GetLengthInBits()

	return lengthInBits
}

func (m *BACnetAccessRule) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func BACnetAccessRuleParse(readBuffer utils.ReadBuffer) (*BACnetAccessRule, error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("BACnetAccessRule"); pullErr != nil {
		return nil, pullErr
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	// Simple Field (timeRangeSpecifier)
	if pullErr := readBuffer.PullContext("timeRangeSpecifier"); pullErr != nil {
		return nil, pullErr
	}
	_timeRangeSpecifier, _timeRangeSpecifierErr := BACnetAccessRuleTimeRangeSpecifierTaggedParse(readBuffer, uint8(uint8(0)), TagClass(TagClass_CONTEXT_SPECIFIC_TAGS))
	if _timeRangeSpecifierErr != nil {
		return nil, errors.Wrap(_timeRangeSpecifierErr, "Error parsing 'timeRangeSpecifier' field")
	}
	timeRangeSpecifier := CastBACnetAccessRuleTimeRangeSpecifierTagged(_timeRangeSpecifier)
	if closeErr := readBuffer.CloseContext("timeRangeSpecifier"); closeErr != nil {
		return nil, closeErr
	}

	// Optional Field (timeRange) (Can be skipped, if a given expression evaluates to false)
	var timeRange *BACnetDeviceObjectPropertyReferenceEnclosed = nil
	if bool((timeRangeSpecifier) != (nil)) {
		currentPos = positionAware.GetPos()
		if pullErr := readBuffer.PullContext("timeRange"); pullErr != nil {
			return nil, pullErr
		}
		_val, _err := BACnetDeviceObjectPropertyReferenceEnclosedParse(readBuffer, uint8(1))
		switch {
		case errors.Is(_err, utils.ParseAssertError{}) || errors.Is(_err, io.EOF):
			readBuffer.Reset(currentPos)
		case _err != nil:
			return nil, errors.Wrap(_err, "Error parsing 'timeRange' field")
		default:
			timeRange = CastBACnetDeviceObjectPropertyReferenceEnclosed(_val)
			if closeErr := readBuffer.CloseContext("timeRange"); closeErr != nil {
				return nil, closeErr
			}
		}
	}

	// Simple Field (locationSpecifier)
	if pullErr := readBuffer.PullContext("locationSpecifier"); pullErr != nil {
		return nil, pullErr
	}
	_locationSpecifier, _locationSpecifierErr := BACnetAccessRuleLocationSpecifierTaggedParse(readBuffer, uint8(uint8(2)), TagClass(TagClass_CONTEXT_SPECIFIC_TAGS))
	if _locationSpecifierErr != nil {
		return nil, errors.Wrap(_locationSpecifierErr, "Error parsing 'locationSpecifier' field")
	}
	locationSpecifier := CastBACnetAccessRuleLocationSpecifierTagged(_locationSpecifier)
	if closeErr := readBuffer.CloseContext("locationSpecifier"); closeErr != nil {
		return nil, closeErr
	}

	// Optional Field (location) (Can be skipped, if a given expression evaluates to false)
	var location *BACnetDeviceObjectReferenceEnclosed = nil
	if bool((locationSpecifier) != (nil)) {
		currentPos = positionAware.GetPos()
		if pullErr := readBuffer.PullContext("location"); pullErr != nil {
			return nil, pullErr
		}
		_val, _err := BACnetDeviceObjectReferenceEnclosedParse(readBuffer, uint8(3))
		switch {
		case errors.Is(_err, utils.ParseAssertError{}) || errors.Is(_err, io.EOF):
			readBuffer.Reset(currentPos)
		case _err != nil:
			return nil, errors.Wrap(_err, "Error parsing 'location' field")
		default:
			location = CastBACnetDeviceObjectReferenceEnclosed(_val)
			if closeErr := readBuffer.CloseContext("location"); closeErr != nil {
				return nil, closeErr
			}
		}
	}

	// Simple Field (enable)
	if pullErr := readBuffer.PullContext("enable"); pullErr != nil {
		return nil, pullErr
	}
	_enable, _enableErr := BACnetContextTagParse(readBuffer, uint8(uint8(4)), BACnetDataType(BACnetDataType_BOOLEAN))
	if _enableErr != nil {
		return nil, errors.Wrap(_enableErr, "Error parsing 'enable' field")
	}
	enable := CastBACnetContextTagBoolean(_enable)
	if closeErr := readBuffer.CloseContext("enable"); closeErr != nil {
		return nil, closeErr
	}

	if closeErr := readBuffer.CloseContext("BACnetAccessRule"); closeErr != nil {
		return nil, closeErr
	}

	// Create the instance
	return NewBACnetAccessRule(timeRangeSpecifier, timeRange, locationSpecifier, location, enable), nil
}

func (m *BACnetAccessRule) Serialize(writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	if pushErr := writeBuffer.PushContext("BACnetAccessRule"); pushErr != nil {
		return pushErr
	}

	// Simple Field (timeRangeSpecifier)
	if pushErr := writeBuffer.PushContext("timeRangeSpecifier"); pushErr != nil {
		return pushErr
	}
	_timeRangeSpecifierErr := m.TimeRangeSpecifier.Serialize(writeBuffer)
	if popErr := writeBuffer.PopContext("timeRangeSpecifier"); popErr != nil {
		return popErr
	}
	if _timeRangeSpecifierErr != nil {
		return errors.Wrap(_timeRangeSpecifierErr, "Error serializing 'timeRangeSpecifier' field")
	}

	// Optional Field (timeRange) (Can be skipped, if the value is null)
	var timeRange *BACnetDeviceObjectPropertyReferenceEnclosed = nil
	if m.TimeRange != nil {
		if pushErr := writeBuffer.PushContext("timeRange"); pushErr != nil {
			return pushErr
		}
		timeRange = m.TimeRange
		_timeRangeErr := timeRange.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("timeRange"); popErr != nil {
			return popErr
		}
		if _timeRangeErr != nil {
			return errors.Wrap(_timeRangeErr, "Error serializing 'timeRange' field")
		}
	}

	// Simple Field (locationSpecifier)
	if pushErr := writeBuffer.PushContext("locationSpecifier"); pushErr != nil {
		return pushErr
	}
	_locationSpecifierErr := m.LocationSpecifier.Serialize(writeBuffer)
	if popErr := writeBuffer.PopContext("locationSpecifier"); popErr != nil {
		return popErr
	}
	if _locationSpecifierErr != nil {
		return errors.Wrap(_locationSpecifierErr, "Error serializing 'locationSpecifier' field")
	}

	// Optional Field (location) (Can be skipped, if the value is null)
	var location *BACnetDeviceObjectReferenceEnclosed = nil
	if m.Location != nil {
		if pushErr := writeBuffer.PushContext("location"); pushErr != nil {
			return pushErr
		}
		location = m.Location
		_locationErr := location.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("location"); popErr != nil {
			return popErr
		}
		if _locationErr != nil {
			return errors.Wrap(_locationErr, "Error serializing 'location' field")
		}
	}

	// Simple Field (enable)
	if pushErr := writeBuffer.PushContext("enable"); pushErr != nil {
		return pushErr
	}
	_enableErr := m.Enable.Serialize(writeBuffer)
	if popErr := writeBuffer.PopContext("enable"); popErr != nil {
		return popErr
	}
	if _enableErr != nil {
		return errors.Wrap(_enableErr, "Error serializing 'enable' field")
	}

	if popErr := writeBuffer.PopContext("BACnetAccessRule"); popErr != nil {
		return popErr
	}
	return nil
}

func (m *BACnetAccessRule) String() string {
	if m == nil {
		return "<nil>"
	}
	buffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := m.Serialize(buffer); err != nil {
		return err.Error()
	}
	return buffer.GetBox().String()
}
