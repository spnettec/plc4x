/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// BACnetSilencedState is an enum
type BACnetSilencedState uint16

type IBACnetSilencedState interface {
	Serialize(writeBuffer utils.WriteBuffer) error
}

const (
	BACnetSilencedState_UNSILENCED               BACnetSilencedState = 0
	BACnetSilencedState_AUDIBLE_SILENCED         BACnetSilencedState = 1
	BACnetSilencedState_VISIBLE_SILENCED         BACnetSilencedState = 2
	BACnetSilencedState_ALL_SILENCED             BACnetSilencedState = 3
	BACnetSilencedState_VENDOR_PROPRIETARY_VALUE BACnetSilencedState = 0xFFFF
)

var BACnetSilencedStateValues []BACnetSilencedState

func init() {
	_ = errors.New
	BACnetSilencedStateValues = []BACnetSilencedState{
		BACnetSilencedState_UNSILENCED,
		BACnetSilencedState_AUDIBLE_SILENCED,
		BACnetSilencedState_VISIBLE_SILENCED,
		BACnetSilencedState_ALL_SILENCED,
		BACnetSilencedState_VENDOR_PROPRIETARY_VALUE,
	}
}

func BACnetSilencedStateByValue(value uint16) BACnetSilencedState {
	switch value {
	case 0:
		return BACnetSilencedState_UNSILENCED
	case 0xFFFF:
		return BACnetSilencedState_VENDOR_PROPRIETARY_VALUE
	case 1:
		return BACnetSilencedState_AUDIBLE_SILENCED
	case 2:
		return BACnetSilencedState_VISIBLE_SILENCED
	case 3:
		return BACnetSilencedState_ALL_SILENCED
	}
	return 0
}

func BACnetSilencedStateByName(value string) BACnetSilencedState {
	switch value {
	case "UNSILENCED":
		return BACnetSilencedState_UNSILENCED
	case "VENDOR_PROPRIETARY_VALUE":
		return BACnetSilencedState_VENDOR_PROPRIETARY_VALUE
	case "AUDIBLE_SILENCED":
		return BACnetSilencedState_AUDIBLE_SILENCED
	case "VISIBLE_SILENCED":
		return BACnetSilencedState_VISIBLE_SILENCED
	case "ALL_SILENCED":
		return BACnetSilencedState_ALL_SILENCED
	}
	return 0
}

func BACnetSilencedStateKnows(value uint16) bool {
	for _, typeValue := range BACnetSilencedStateValues {
		if uint16(typeValue) == value {
			return true
		}
	}
	return false
}

func CastBACnetSilencedState(structType interface{}) BACnetSilencedState {
	castFunc := func(typ interface{}) BACnetSilencedState {
		if sBACnetSilencedState, ok := typ.(BACnetSilencedState); ok {
			return sBACnetSilencedState
		}
		return 0
	}
	return castFunc(structType)
}

func (m BACnetSilencedState) GetLengthInBits() uint16 {
	return 16
}

func (m BACnetSilencedState) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func BACnetSilencedStateParse(readBuffer utils.ReadBuffer) (BACnetSilencedState, error) {
	val, err := readBuffer.ReadUint16("BACnetSilencedState", 16)
	if err != nil {
		return 0, nil
	}
	return BACnetSilencedStateByValue(val), nil
}

func (e BACnetSilencedState) Serialize(writeBuffer utils.WriteBuffer) error {
	return writeBuffer.WriteUint16("BACnetSilencedState", 16, uint16(e), utils.WithAdditionalStringRepresentation(e.name()))
}

func (e BACnetSilencedState) name() string {
	switch e {
	case BACnetSilencedState_UNSILENCED:
		return "UNSILENCED"
	case BACnetSilencedState_VENDOR_PROPRIETARY_VALUE:
		return "VENDOR_PROPRIETARY_VALUE"
	case BACnetSilencedState_AUDIBLE_SILENCED:
		return "AUDIBLE_SILENCED"
	case BACnetSilencedState_VISIBLE_SILENCED:
		return "VISIBLE_SILENCED"
	case BACnetSilencedState_ALL_SILENCED:
		return "ALL_SILENCED"
	}
	return ""
}

func (e BACnetSilencedState) String() string {
	return e.name()
}
