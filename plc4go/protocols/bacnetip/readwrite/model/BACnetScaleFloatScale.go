/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// BACnetScaleFloatScale is the data-structure of this message
type BACnetScaleFloatScale struct {
	*BACnetScale
	FloatScale *BACnetContextTagReal
}

// IBACnetScaleFloatScale is the corresponding interface of BACnetScaleFloatScale
type IBACnetScaleFloatScale interface {
	IBACnetScale
	// GetFloatScale returns FloatScale (property field)
	GetFloatScale() *BACnetContextTagReal
	// GetLengthInBytes returns the length in bytes
	GetLengthInBytes() uint16
	// GetLengthInBits returns the length in bits
	GetLengthInBits() uint16
	// Serialize serializes this type
	Serialize(writeBuffer utils.WriteBuffer) error
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for discriminator values.
///////////////////////

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

func (m *BACnetScaleFloatScale) InitializeParent(parent *BACnetScale, peekedTagHeader *BACnetTagHeader) {
	m.BACnetScale.PeekedTagHeader = peekedTagHeader
}

func (m *BACnetScaleFloatScale) GetParent() *BACnetScale {
	return m.BACnetScale
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *BACnetScaleFloatScale) GetFloatScale() *BACnetContextTagReal {
	return m.FloatScale
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewBACnetScaleFloatScale factory function for BACnetScaleFloatScale
func NewBACnetScaleFloatScale(floatScale *BACnetContextTagReal, peekedTagHeader *BACnetTagHeader) *BACnetScaleFloatScale {
	_result := &BACnetScaleFloatScale{
		FloatScale:  floatScale,
		BACnetScale: NewBACnetScale(peekedTagHeader),
	}
	_result.Child = _result
	return _result
}

func CastBACnetScaleFloatScale(structType interface{}) *BACnetScaleFloatScale {
	if casted, ok := structType.(BACnetScaleFloatScale); ok {
		return &casted
	}
	if casted, ok := structType.(*BACnetScaleFloatScale); ok {
		return casted
	}
	if casted, ok := structType.(BACnetScale); ok {
		return CastBACnetScaleFloatScale(casted.Child)
	}
	if casted, ok := structType.(*BACnetScale); ok {
		return CastBACnetScaleFloatScale(casted.Child)
	}
	return nil
}

func (m *BACnetScaleFloatScale) GetTypeName() string {
	return "BACnetScaleFloatScale"
}

func (m *BACnetScaleFloatScale) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *BACnetScaleFloatScale) GetLengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(m.GetParentLengthInBits())

	// Simple field (floatScale)
	lengthInBits += m.FloatScale.GetLengthInBits()

	return lengthInBits
}

func (m *BACnetScaleFloatScale) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func BACnetScaleFloatScaleParse(readBuffer utils.ReadBuffer) (*BACnetScaleFloatScale, error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("BACnetScaleFloatScale"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for BACnetScaleFloatScale")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	// Simple Field (floatScale)
	if pullErr := readBuffer.PullContext("floatScale"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for floatScale")
	}
	_floatScale, _floatScaleErr := BACnetContextTagParse(readBuffer, uint8(uint8(0)), BACnetDataType(BACnetDataType_REAL))
	if _floatScaleErr != nil {
		return nil, errors.Wrap(_floatScaleErr, "Error parsing 'floatScale' field")
	}
	floatScale := CastBACnetContextTagReal(_floatScale)
	if closeErr := readBuffer.CloseContext("floatScale"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for floatScale")
	}

	if closeErr := readBuffer.CloseContext("BACnetScaleFloatScale"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for BACnetScaleFloatScale")
	}

	// Create a partially initialized instance
	_child := &BACnetScaleFloatScale{
		FloatScale:  CastBACnetContextTagReal(floatScale),
		BACnetScale: &BACnetScale{},
	}
	_child.BACnetScale.Child = _child
	return _child, nil
}

func (m *BACnetScaleFloatScale) Serialize(writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	ser := func() error {
		if pushErr := writeBuffer.PushContext("BACnetScaleFloatScale"); pushErr != nil {
			return errors.Wrap(pushErr, "Error pushing for BACnetScaleFloatScale")
		}

		// Simple Field (floatScale)
		if pushErr := writeBuffer.PushContext("floatScale"); pushErr != nil {
			return errors.Wrap(pushErr, "Error pushing for floatScale")
		}
		_floatScaleErr := m.FloatScale.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("floatScale"); popErr != nil {
			return errors.Wrap(popErr, "Error popping for floatScale")
		}
		if _floatScaleErr != nil {
			return errors.Wrap(_floatScaleErr, "Error serializing 'floatScale' field")
		}

		if popErr := writeBuffer.PopContext("BACnetScaleFloatScale"); popErr != nil {
			return errors.Wrap(popErr, "Error popping for BACnetScaleFloatScale")
		}
		return nil
	}
	return m.SerializeParent(writeBuffer, m, ser)
}

func (m *BACnetScaleFloatScale) String() string {
	if m == nil {
		return "<nil>"
	}
	buffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := m.Serialize(buffer); err != nil {
		return err.Error()
	}
	return buffer.GetBox().String()
}
