/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// BACnetLogRecordLogDatumFailure is the data-structure of this message
type BACnetLogRecordLogDatumFailure struct {
	*BACnetLogRecordLogDatum
	Failure *ErrorEnclosed

	// Arguments.
	TagNumber uint8
}

// IBACnetLogRecordLogDatumFailure is the corresponding interface of BACnetLogRecordLogDatumFailure
type IBACnetLogRecordLogDatumFailure interface {
	IBACnetLogRecordLogDatum
	// GetFailure returns Failure (property field)
	GetFailure() *ErrorEnclosed
	// GetLengthInBytes returns the length in bytes
	GetLengthInBytes() uint16
	// GetLengthInBits returns the length in bits
	GetLengthInBits() uint16
	// Serialize serializes this type
	Serialize(writeBuffer utils.WriteBuffer) error
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for discriminator values.
///////////////////////

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

func (m *BACnetLogRecordLogDatumFailure) InitializeParent(parent *BACnetLogRecordLogDatum, openingTag *BACnetOpeningTag, peekedTagHeader *BACnetTagHeader, closingTag *BACnetClosingTag) {
	m.BACnetLogRecordLogDatum.OpeningTag = openingTag
	m.BACnetLogRecordLogDatum.PeekedTagHeader = peekedTagHeader
	m.BACnetLogRecordLogDatum.ClosingTag = closingTag
}

func (m *BACnetLogRecordLogDatumFailure) GetParent() *BACnetLogRecordLogDatum {
	return m.BACnetLogRecordLogDatum
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *BACnetLogRecordLogDatumFailure) GetFailure() *ErrorEnclosed {
	return m.Failure
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewBACnetLogRecordLogDatumFailure factory function for BACnetLogRecordLogDatumFailure
func NewBACnetLogRecordLogDatumFailure(failure *ErrorEnclosed, openingTag *BACnetOpeningTag, peekedTagHeader *BACnetTagHeader, closingTag *BACnetClosingTag, tagNumber uint8) *BACnetLogRecordLogDatumFailure {
	_result := &BACnetLogRecordLogDatumFailure{
		Failure:                 failure,
		BACnetLogRecordLogDatum: NewBACnetLogRecordLogDatum(openingTag, peekedTagHeader, closingTag, tagNumber),
	}
	_result.Child = _result
	return _result
}

func CastBACnetLogRecordLogDatumFailure(structType interface{}) *BACnetLogRecordLogDatumFailure {
	if casted, ok := structType.(BACnetLogRecordLogDatumFailure); ok {
		return &casted
	}
	if casted, ok := structType.(*BACnetLogRecordLogDatumFailure); ok {
		return casted
	}
	if casted, ok := structType.(BACnetLogRecordLogDatum); ok {
		return CastBACnetLogRecordLogDatumFailure(casted.Child)
	}
	if casted, ok := structType.(*BACnetLogRecordLogDatum); ok {
		return CastBACnetLogRecordLogDatumFailure(casted.Child)
	}
	return nil
}

func (m *BACnetLogRecordLogDatumFailure) GetTypeName() string {
	return "BACnetLogRecordLogDatumFailure"
}

func (m *BACnetLogRecordLogDatumFailure) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *BACnetLogRecordLogDatumFailure) GetLengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(m.GetParentLengthInBits())

	// Simple field (failure)
	lengthInBits += m.Failure.GetLengthInBits()

	return lengthInBits
}

func (m *BACnetLogRecordLogDatumFailure) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func BACnetLogRecordLogDatumFailureParse(readBuffer utils.ReadBuffer, tagNumber uint8) (*BACnetLogRecordLogDatumFailure, error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("BACnetLogRecordLogDatumFailure"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for BACnetLogRecordLogDatumFailure")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	// Simple Field (failure)
	if pullErr := readBuffer.PullContext("failure"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for failure")
	}
	_failure, _failureErr := ErrorEnclosedParse(readBuffer, uint8(uint8(8)))
	if _failureErr != nil {
		return nil, errors.Wrap(_failureErr, "Error parsing 'failure' field")
	}
	failure := CastErrorEnclosed(_failure)
	if closeErr := readBuffer.CloseContext("failure"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for failure")
	}

	if closeErr := readBuffer.CloseContext("BACnetLogRecordLogDatumFailure"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for BACnetLogRecordLogDatumFailure")
	}

	// Create a partially initialized instance
	_child := &BACnetLogRecordLogDatumFailure{
		Failure:                 CastErrorEnclosed(failure),
		BACnetLogRecordLogDatum: &BACnetLogRecordLogDatum{},
	}
	_child.BACnetLogRecordLogDatum.Child = _child
	return _child, nil
}

func (m *BACnetLogRecordLogDatumFailure) Serialize(writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	ser := func() error {
		if pushErr := writeBuffer.PushContext("BACnetLogRecordLogDatumFailure"); pushErr != nil {
			return errors.Wrap(pushErr, "Error pushing for BACnetLogRecordLogDatumFailure")
		}

		// Simple Field (failure)
		if pushErr := writeBuffer.PushContext("failure"); pushErr != nil {
			return errors.Wrap(pushErr, "Error pushing for failure")
		}
		_failureErr := m.Failure.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("failure"); popErr != nil {
			return errors.Wrap(popErr, "Error popping for failure")
		}
		if _failureErr != nil {
			return errors.Wrap(_failureErr, "Error serializing 'failure' field")
		}

		if popErr := writeBuffer.PopContext("BACnetLogRecordLogDatumFailure"); popErr != nil {
			return errors.Wrap(popErr, "Error popping for BACnetLogRecordLogDatumFailure")
		}
		return nil
	}
	return m.SerializeParent(writeBuffer, m, ser)
}

func (m *BACnetLogRecordLogDatumFailure) String() string {
	if m == nil {
		return "<nil>"
	}
	buffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := m.Serialize(buffer); err != nil {
		return err.Error()
	}
	return buffer.GetBox().String()
}
