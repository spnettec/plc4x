/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/spi/utils"
	"github.com/pkg/errors"
	"github.com/rs/zerolog/log"
	"io"
)

// Code generated by code-generation. DO NOT EDIT.

// BACnetReadAccessResult is the data-structure of this message
type BACnetReadAccessResult struct {
	ObjectIdentifier *BACnetContextTagObjectIdentifier
	ListOfResults    *BACnetReadAccessResultListOfResults
}

// IBACnetReadAccessResult is the corresponding interface of BACnetReadAccessResult
type IBACnetReadAccessResult interface {
	// GetObjectIdentifier returns ObjectIdentifier (property field)
	GetObjectIdentifier() *BACnetContextTagObjectIdentifier
	// GetListOfResults returns ListOfResults (property field)
	GetListOfResults() *BACnetReadAccessResultListOfResults
	// GetLengthInBytes returns the length in bytes
	GetLengthInBytes() uint16
	// GetLengthInBits returns the length in bits
	GetLengthInBits() uint16
	// Serialize serializes this type
	Serialize(writeBuffer utils.WriteBuffer) error
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *BACnetReadAccessResult) GetObjectIdentifier() *BACnetContextTagObjectIdentifier {
	return m.ObjectIdentifier
}

func (m *BACnetReadAccessResult) GetListOfResults() *BACnetReadAccessResultListOfResults {
	return m.ListOfResults
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewBACnetReadAccessResult factory function for BACnetReadAccessResult
func NewBACnetReadAccessResult(objectIdentifier *BACnetContextTagObjectIdentifier, listOfResults *BACnetReadAccessResultListOfResults) *BACnetReadAccessResult {
	return &BACnetReadAccessResult{ObjectIdentifier: objectIdentifier, ListOfResults: listOfResults}
}

func CastBACnetReadAccessResult(structType interface{}) *BACnetReadAccessResult {
	if casted, ok := structType.(BACnetReadAccessResult); ok {
		return &casted
	}
	if casted, ok := structType.(*BACnetReadAccessResult); ok {
		return casted
	}
	return nil
}

func (m *BACnetReadAccessResult) GetTypeName() string {
	return "BACnetReadAccessResult"
}

func (m *BACnetReadAccessResult) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *BACnetReadAccessResult) GetLengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(0)

	// Simple field (objectIdentifier)
	lengthInBits += m.ObjectIdentifier.GetLengthInBits()

	// Optional Field (listOfResults)
	if m.ListOfResults != nil {
		lengthInBits += (*m.ListOfResults).GetLengthInBits()
	}

	return lengthInBits
}

func (m *BACnetReadAccessResult) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func BACnetReadAccessResultParse(readBuffer utils.ReadBuffer) (*BACnetReadAccessResult, error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("BACnetReadAccessResult"); pullErr != nil {
		return nil, pullErr
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	// Simple Field (objectIdentifier)
	if pullErr := readBuffer.PullContext("objectIdentifier"); pullErr != nil {
		return nil, pullErr
	}
	_objectIdentifier, _objectIdentifierErr := BACnetContextTagParse(readBuffer, uint8(uint8(0)), BACnetDataType(BACnetDataType_BACNET_OBJECT_IDENTIFIER))
	if _objectIdentifierErr != nil {
		return nil, errors.Wrap(_objectIdentifierErr, "Error parsing 'objectIdentifier' field")
	}
	objectIdentifier := CastBACnetContextTagObjectIdentifier(_objectIdentifier)
	if closeErr := readBuffer.CloseContext("objectIdentifier"); closeErr != nil {
		return nil, closeErr
	}

	// Optional Field (listOfResults) (Can be skipped, if a given expression evaluates to false)
	var listOfResults *BACnetReadAccessResultListOfResults = nil
	{
		currentPos = positionAware.GetPos()
		if pullErr := readBuffer.PullContext("listOfResults"); pullErr != nil {
			return nil, pullErr
		}
		_val, _err := BACnetReadAccessResultListOfResultsParse(readBuffer, uint8(1), objectIdentifier.GetObjectType())
		switch {
		case errors.Is(_err, utils.ParseAssertError{}) || errors.Is(_err, io.EOF):
			log.Debug().Err(_err).Msg("Resetting position because optional threw an error")
			readBuffer.Reset(currentPos)
		case _err != nil:
			return nil, errors.Wrap(_err, "Error parsing 'listOfResults' field")
		default:
			listOfResults = CastBACnetReadAccessResultListOfResults(_val)
			if closeErr := readBuffer.CloseContext("listOfResults"); closeErr != nil {
				return nil, closeErr
			}
		}
	}

	if closeErr := readBuffer.CloseContext("BACnetReadAccessResult"); closeErr != nil {
		return nil, closeErr
	}

	// Create the instance
	return NewBACnetReadAccessResult(objectIdentifier, listOfResults), nil
}

func (m *BACnetReadAccessResult) Serialize(writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	if pushErr := writeBuffer.PushContext("BACnetReadAccessResult"); pushErr != nil {
		return pushErr
	}

	// Simple Field (objectIdentifier)
	if pushErr := writeBuffer.PushContext("objectIdentifier"); pushErr != nil {
		return pushErr
	}
	_objectIdentifierErr := m.ObjectIdentifier.Serialize(writeBuffer)
	if popErr := writeBuffer.PopContext("objectIdentifier"); popErr != nil {
		return popErr
	}
	if _objectIdentifierErr != nil {
		return errors.Wrap(_objectIdentifierErr, "Error serializing 'objectIdentifier' field")
	}

	// Optional Field (listOfResults) (Can be skipped, if the value is null)
	var listOfResults *BACnetReadAccessResultListOfResults = nil
	if m.ListOfResults != nil {
		if pushErr := writeBuffer.PushContext("listOfResults"); pushErr != nil {
			return pushErr
		}
		listOfResults = m.ListOfResults
		_listOfResultsErr := listOfResults.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("listOfResults"); popErr != nil {
			return popErr
		}
		if _listOfResultsErr != nil {
			return errors.Wrap(_listOfResultsErr, "Error serializing 'listOfResults' field")
		}
	}

	if popErr := writeBuffer.PopContext("BACnetReadAccessResult"); popErr != nil {
		return popErr
	}
	return nil
}

func (m *BACnetReadAccessResult) String() string {
	if m == nil {
		return "<nil>"
	}
	buffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := m.Serialize(buffer); err != nil {
		return err.Error()
	}
	return buffer.GetBox().String()
}
