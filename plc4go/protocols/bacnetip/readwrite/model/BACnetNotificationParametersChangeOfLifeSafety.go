/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// BACnetNotificationParametersChangeOfLifeSafety is the data-structure of this message
type BACnetNotificationParametersChangeOfLifeSafety struct {
	*BACnetNotificationParameters
	InnerOpeningTag   *BACnetOpeningTag
	NewState          *BACnetLifeSafetyStateTagged
	NewMode           *BACnetLifeSafetyModeTagged
	StatusFlags       *BACnetStatusFlagsTagged
	OperationExpected *BACnetLifeSafetyOperationTagged
	InnerClosingTag   *BACnetClosingTag

	// Arguments.
	TagNumber          uint8
	ObjectTypeArgument BACnetObjectType
}

// IBACnetNotificationParametersChangeOfLifeSafety is the corresponding interface of BACnetNotificationParametersChangeOfLifeSafety
type IBACnetNotificationParametersChangeOfLifeSafety interface {
	IBACnetNotificationParameters
	// GetInnerOpeningTag returns InnerOpeningTag (property field)
	GetInnerOpeningTag() *BACnetOpeningTag
	// GetNewState returns NewState (property field)
	GetNewState() *BACnetLifeSafetyStateTagged
	// GetNewMode returns NewMode (property field)
	GetNewMode() *BACnetLifeSafetyModeTagged
	// GetStatusFlags returns StatusFlags (property field)
	GetStatusFlags() *BACnetStatusFlagsTagged
	// GetOperationExpected returns OperationExpected (property field)
	GetOperationExpected() *BACnetLifeSafetyOperationTagged
	// GetInnerClosingTag returns InnerClosingTag (property field)
	GetInnerClosingTag() *BACnetClosingTag
	// GetLengthInBytes returns the length in bytes
	GetLengthInBytes() uint16
	// GetLengthInBits returns the length in bits
	GetLengthInBits() uint16
	// Serialize serializes this type
	Serialize(writeBuffer utils.WriteBuffer) error
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for discriminator values.
///////////////////////

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

func (m *BACnetNotificationParametersChangeOfLifeSafety) InitializeParent(parent *BACnetNotificationParameters, openingTag *BACnetOpeningTag, peekedTagHeader *BACnetTagHeader, closingTag *BACnetClosingTag) {
	m.BACnetNotificationParameters.OpeningTag = openingTag
	m.BACnetNotificationParameters.PeekedTagHeader = peekedTagHeader
	m.BACnetNotificationParameters.ClosingTag = closingTag
}

func (m *BACnetNotificationParametersChangeOfLifeSafety) GetParent() *BACnetNotificationParameters {
	return m.BACnetNotificationParameters
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *BACnetNotificationParametersChangeOfLifeSafety) GetInnerOpeningTag() *BACnetOpeningTag {
	return m.InnerOpeningTag
}

func (m *BACnetNotificationParametersChangeOfLifeSafety) GetNewState() *BACnetLifeSafetyStateTagged {
	return m.NewState
}

func (m *BACnetNotificationParametersChangeOfLifeSafety) GetNewMode() *BACnetLifeSafetyModeTagged {
	return m.NewMode
}

func (m *BACnetNotificationParametersChangeOfLifeSafety) GetStatusFlags() *BACnetStatusFlagsTagged {
	return m.StatusFlags
}

func (m *BACnetNotificationParametersChangeOfLifeSafety) GetOperationExpected() *BACnetLifeSafetyOperationTagged {
	return m.OperationExpected
}

func (m *BACnetNotificationParametersChangeOfLifeSafety) GetInnerClosingTag() *BACnetClosingTag {
	return m.InnerClosingTag
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewBACnetNotificationParametersChangeOfLifeSafety factory function for BACnetNotificationParametersChangeOfLifeSafety
func NewBACnetNotificationParametersChangeOfLifeSafety(innerOpeningTag *BACnetOpeningTag, newState *BACnetLifeSafetyStateTagged, newMode *BACnetLifeSafetyModeTagged, statusFlags *BACnetStatusFlagsTagged, operationExpected *BACnetLifeSafetyOperationTagged, innerClosingTag *BACnetClosingTag, openingTag *BACnetOpeningTag, peekedTagHeader *BACnetTagHeader, closingTag *BACnetClosingTag, tagNumber uint8, objectTypeArgument BACnetObjectType) *BACnetNotificationParametersChangeOfLifeSafety {
	_result := &BACnetNotificationParametersChangeOfLifeSafety{
		InnerOpeningTag:              innerOpeningTag,
		NewState:                     newState,
		NewMode:                      newMode,
		StatusFlags:                  statusFlags,
		OperationExpected:            operationExpected,
		InnerClosingTag:              innerClosingTag,
		BACnetNotificationParameters: NewBACnetNotificationParameters(openingTag, peekedTagHeader, closingTag, tagNumber, objectTypeArgument),
	}
	_result.Child = _result
	return _result
}

func CastBACnetNotificationParametersChangeOfLifeSafety(structType interface{}) *BACnetNotificationParametersChangeOfLifeSafety {
	if casted, ok := structType.(BACnetNotificationParametersChangeOfLifeSafety); ok {
		return &casted
	}
	if casted, ok := structType.(*BACnetNotificationParametersChangeOfLifeSafety); ok {
		return casted
	}
	if casted, ok := structType.(BACnetNotificationParameters); ok {
		return CastBACnetNotificationParametersChangeOfLifeSafety(casted.Child)
	}
	if casted, ok := structType.(*BACnetNotificationParameters); ok {
		return CastBACnetNotificationParametersChangeOfLifeSafety(casted.Child)
	}
	return nil
}

func (m *BACnetNotificationParametersChangeOfLifeSafety) GetTypeName() string {
	return "BACnetNotificationParametersChangeOfLifeSafety"
}

func (m *BACnetNotificationParametersChangeOfLifeSafety) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *BACnetNotificationParametersChangeOfLifeSafety) GetLengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(m.GetParentLengthInBits())

	// Simple field (innerOpeningTag)
	lengthInBits += m.InnerOpeningTag.GetLengthInBits()

	// Simple field (newState)
	lengthInBits += m.NewState.GetLengthInBits()

	// Simple field (newMode)
	lengthInBits += m.NewMode.GetLengthInBits()

	// Simple field (statusFlags)
	lengthInBits += m.StatusFlags.GetLengthInBits()

	// Simple field (operationExpected)
	lengthInBits += m.OperationExpected.GetLengthInBits()

	// Simple field (innerClosingTag)
	lengthInBits += m.InnerClosingTag.GetLengthInBits()

	return lengthInBits
}

func (m *BACnetNotificationParametersChangeOfLifeSafety) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func BACnetNotificationParametersChangeOfLifeSafetyParse(readBuffer utils.ReadBuffer, tagNumber uint8, objectTypeArgument BACnetObjectType, peekedTagNumber uint8) (*BACnetNotificationParametersChangeOfLifeSafety, error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("BACnetNotificationParametersChangeOfLifeSafety"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for BACnetNotificationParametersChangeOfLifeSafety")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	// Simple Field (innerOpeningTag)
	if pullErr := readBuffer.PullContext("innerOpeningTag"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for innerOpeningTag")
	}
	_innerOpeningTag, _innerOpeningTagErr := BACnetOpeningTagParse(readBuffer, uint8(peekedTagNumber))
	if _innerOpeningTagErr != nil {
		return nil, errors.Wrap(_innerOpeningTagErr, "Error parsing 'innerOpeningTag' field")
	}
	innerOpeningTag := CastBACnetOpeningTag(_innerOpeningTag)
	if closeErr := readBuffer.CloseContext("innerOpeningTag"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for innerOpeningTag")
	}

	// Simple Field (newState)
	if pullErr := readBuffer.PullContext("newState"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for newState")
	}
	_newState, _newStateErr := BACnetLifeSafetyStateTaggedParse(readBuffer, uint8(uint8(0)), TagClass(TagClass_CONTEXT_SPECIFIC_TAGS))
	if _newStateErr != nil {
		return nil, errors.Wrap(_newStateErr, "Error parsing 'newState' field")
	}
	newState := CastBACnetLifeSafetyStateTagged(_newState)
	if closeErr := readBuffer.CloseContext("newState"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for newState")
	}

	// Simple Field (newMode)
	if pullErr := readBuffer.PullContext("newMode"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for newMode")
	}
	_newMode, _newModeErr := BACnetLifeSafetyModeTaggedParse(readBuffer, uint8(uint8(1)), TagClass(TagClass_CONTEXT_SPECIFIC_TAGS))
	if _newModeErr != nil {
		return nil, errors.Wrap(_newModeErr, "Error parsing 'newMode' field")
	}
	newMode := CastBACnetLifeSafetyModeTagged(_newMode)
	if closeErr := readBuffer.CloseContext("newMode"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for newMode")
	}

	// Simple Field (statusFlags)
	if pullErr := readBuffer.PullContext("statusFlags"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for statusFlags")
	}
	_statusFlags, _statusFlagsErr := BACnetStatusFlagsTaggedParse(readBuffer, uint8(uint8(2)), TagClass(TagClass_CONTEXT_SPECIFIC_TAGS))
	if _statusFlagsErr != nil {
		return nil, errors.Wrap(_statusFlagsErr, "Error parsing 'statusFlags' field")
	}
	statusFlags := CastBACnetStatusFlagsTagged(_statusFlags)
	if closeErr := readBuffer.CloseContext("statusFlags"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for statusFlags")
	}

	// Simple Field (operationExpected)
	if pullErr := readBuffer.PullContext("operationExpected"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for operationExpected")
	}
	_operationExpected, _operationExpectedErr := BACnetLifeSafetyOperationTaggedParse(readBuffer, uint8(uint8(3)), TagClass(TagClass_CONTEXT_SPECIFIC_TAGS))
	if _operationExpectedErr != nil {
		return nil, errors.Wrap(_operationExpectedErr, "Error parsing 'operationExpected' field")
	}
	operationExpected := CastBACnetLifeSafetyOperationTagged(_operationExpected)
	if closeErr := readBuffer.CloseContext("operationExpected"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for operationExpected")
	}

	// Simple Field (innerClosingTag)
	if pullErr := readBuffer.PullContext("innerClosingTag"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for innerClosingTag")
	}
	_innerClosingTag, _innerClosingTagErr := BACnetClosingTagParse(readBuffer, uint8(peekedTagNumber))
	if _innerClosingTagErr != nil {
		return nil, errors.Wrap(_innerClosingTagErr, "Error parsing 'innerClosingTag' field")
	}
	innerClosingTag := CastBACnetClosingTag(_innerClosingTag)
	if closeErr := readBuffer.CloseContext("innerClosingTag"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for innerClosingTag")
	}

	if closeErr := readBuffer.CloseContext("BACnetNotificationParametersChangeOfLifeSafety"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for BACnetNotificationParametersChangeOfLifeSafety")
	}

	// Create a partially initialized instance
	_child := &BACnetNotificationParametersChangeOfLifeSafety{
		InnerOpeningTag:              CastBACnetOpeningTag(innerOpeningTag),
		NewState:                     CastBACnetLifeSafetyStateTagged(newState),
		NewMode:                      CastBACnetLifeSafetyModeTagged(newMode),
		StatusFlags:                  CastBACnetStatusFlagsTagged(statusFlags),
		OperationExpected:            CastBACnetLifeSafetyOperationTagged(operationExpected),
		InnerClosingTag:              CastBACnetClosingTag(innerClosingTag),
		BACnetNotificationParameters: &BACnetNotificationParameters{},
	}
	_child.BACnetNotificationParameters.Child = _child
	return _child, nil
}

func (m *BACnetNotificationParametersChangeOfLifeSafety) Serialize(writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	ser := func() error {
		if pushErr := writeBuffer.PushContext("BACnetNotificationParametersChangeOfLifeSafety"); pushErr != nil {
			return errors.Wrap(pushErr, "Error pushing for BACnetNotificationParametersChangeOfLifeSafety")
		}

		// Simple Field (innerOpeningTag)
		if pushErr := writeBuffer.PushContext("innerOpeningTag"); pushErr != nil {
			return errors.Wrap(pushErr, "Error pushing for innerOpeningTag")
		}
		_innerOpeningTagErr := m.InnerOpeningTag.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("innerOpeningTag"); popErr != nil {
			return errors.Wrap(popErr, "Error popping for innerOpeningTag")
		}
		if _innerOpeningTagErr != nil {
			return errors.Wrap(_innerOpeningTagErr, "Error serializing 'innerOpeningTag' field")
		}

		// Simple Field (newState)
		if pushErr := writeBuffer.PushContext("newState"); pushErr != nil {
			return errors.Wrap(pushErr, "Error pushing for newState")
		}
		_newStateErr := m.NewState.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("newState"); popErr != nil {
			return errors.Wrap(popErr, "Error popping for newState")
		}
		if _newStateErr != nil {
			return errors.Wrap(_newStateErr, "Error serializing 'newState' field")
		}

		// Simple Field (newMode)
		if pushErr := writeBuffer.PushContext("newMode"); pushErr != nil {
			return errors.Wrap(pushErr, "Error pushing for newMode")
		}
		_newModeErr := m.NewMode.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("newMode"); popErr != nil {
			return errors.Wrap(popErr, "Error popping for newMode")
		}
		if _newModeErr != nil {
			return errors.Wrap(_newModeErr, "Error serializing 'newMode' field")
		}

		// Simple Field (statusFlags)
		if pushErr := writeBuffer.PushContext("statusFlags"); pushErr != nil {
			return errors.Wrap(pushErr, "Error pushing for statusFlags")
		}
		_statusFlagsErr := m.StatusFlags.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("statusFlags"); popErr != nil {
			return errors.Wrap(popErr, "Error popping for statusFlags")
		}
		if _statusFlagsErr != nil {
			return errors.Wrap(_statusFlagsErr, "Error serializing 'statusFlags' field")
		}

		// Simple Field (operationExpected)
		if pushErr := writeBuffer.PushContext("operationExpected"); pushErr != nil {
			return errors.Wrap(pushErr, "Error pushing for operationExpected")
		}
		_operationExpectedErr := m.OperationExpected.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("operationExpected"); popErr != nil {
			return errors.Wrap(popErr, "Error popping for operationExpected")
		}
		if _operationExpectedErr != nil {
			return errors.Wrap(_operationExpectedErr, "Error serializing 'operationExpected' field")
		}

		// Simple Field (innerClosingTag)
		if pushErr := writeBuffer.PushContext("innerClosingTag"); pushErr != nil {
			return errors.Wrap(pushErr, "Error pushing for innerClosingTag")
		}
		_innerClosingTagErr := m.InnerClosingTag.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("innerClosingTag"); popErr != nil {
			return errors.Wrap(popErr, "Error popping for innerClosingTag")
		}
		if _innerClosingTagErr != nil {
			return errors.Wrap(_innerClosingTagErr, "Error serializing 'innerClosingTag' field")
		}

		if popErr := writeBuffer.PopContext("BACnetNotificationParametersChangeOfLifeSafety"); popErr != nil {
			return errors.Wrap(popErr, "Error popping for BACnetNotificationParametersChangeOfLifeSafety")
		}
		return nil
	}
	return m.SerializeParent(writeBuffer, m, ser)
}

func (m *BACnetNotificationParametersChangeOfLifeSafety) String() string {
	if m == nil {
		return "<nil>"
	}
	buffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := m.Serialize(buffer); err != nil {
		return err.Error()
	}
	return buffer.GetBox().String()
}
