/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// BACnetSpecialEventPeriodCalendarReference is the data-structure of this message
type BACnetSpecialEventPeriodCalendarReference struct {
	*BACnetSpecialEventPeriod
	CalendarReference *BACnetContextTagObjectIdentifier
}

// IBACnetSpecialEventPeriodCalendarReference is the corresponding interface of BACnetSpecialEventPeriodCalendarReference
type IBACnetSpecialEventPeriodCalendarReference interface {
	IBACnetSpecialEventPeriod
	// GetCalendarReference returns CalendarReference (property field)
	GetCalendarReference() *BACnetContextTagObjectIdentifier
	// GetLengthInBytes returns the length in bytes
	GetLengthInBytes() uint16
	// GetLengthInBits returns the length in bits
	GetLengthInBits() uint16
	// Serialize serializes this type
	Serialize(writeBuffer utils.WriteBuffer) error
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for discriminator values.
///////////////////////

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

func (m *BACnetSpecialEventPeriodCalendarReference) InitializeParent(parent *BACnetSpecialEventPeriod, peekedTagHeader *BACnetTagHeader) {
	m.BACnetSpecialEventPeriod.PeekedTagHeader = peekedTagHeader
}

func (m *BACnetSpecialEventPeriodCalendarReference) GetParent() *BACnetSpecialEventPeriod {
	return m.BACnetSpecialEventPeriod
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *BACnetSpecialEventPeriodCalendarReference) GetCalendarReference() *BACnetContextTagObjectIdentifier {
	return m.CalendarReference
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewBACnetSpecialEventPeriodCalendarReference factory function for BACnetSpecialEventPeriodCalendarReference
func NewBACnetSpecialEventPeriodCalendarReference(calendarReference *BACnetContextTagObjectIdentifier, peekedTagHeader *BACnetTagHeader) *BACnetSpecialEventPeriodCalendarReference {
	_result := &BACnetSpecialEventPeriodCalendarReference{
		CalendarReference:        calendarReference,
		BACnetSpecialEventPeriod: NewBACnetSpecialEventPeriod(peekedTagHeader),
	}
	_result.Child = _result
	return _result
}

func CastBACnetSpecialEventPeriodCalendarReference(structType interface{}) *BACnetSpecialEventPeriodCalendarReference {
	if casted, ok := structType.(BACnetSpecialEventPeriodCalendarReference); ok {
		return &casted
	}
	if casted, ok := structType.(*BACnetSpecialEventPeriodCalendarReference); ok {
		return casted
	}
	if casted, ok := structType.(BACnetSpecialEventPeriod); ok {
		return CastBACnetSpecialEventPeriodCalendarReference(casted.Child)
	}
	if casted, ok := structType.(*BACnetSpecialEventPeriod); ok {
		return CastBACnetSpecialEventPeriodCalendarReference(casted.Child)
	}
	return nil
}

func (m *BACnetSpecialEventPeriodCalendarReference) GetTypeName() string {
	return "BACnetSpecialEventPeriodCalendarReference"
}

func (m *BACnetSpecialEventPeriodCalendarReference) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *BACnetSpecialEventPeriodCalendarReference) GetLengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(m.GetParentLengthInBits())

	// Simple field (calendarReference)
	lengthInBits += m.CalendarReference.GetLengthInBits()

	return lengthInBits
}

func (m *BACnetSpecialEventPeriodCalendarReference) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func BACnetSpecialEventPeriodCalendarReferenceParse(readBuffer utils.ReadBuffer) (*BACnetSpecialEventPeriodCalendarReference, error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("BACnetSpecialEventPeriodCalendarReference"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for BACnetSpecialEventPeriodCalendarReference")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	// Simple Field (calendarReference)
	if pullErr := readBuffer.PullContext("calendarReference"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for calendarReference")
	}
	_calendarReference, _calendarReferenceErr := BACnetContextTagParse(readBuffer, uint8(uint8(1)), BACnetDataType(BACnetDataType_BACNET_OBJECT_IDENTIFIER))
	if _calendarReferenceErr != nil {
		return nil, errors.Wrap(_calendarReferenceErr, "Error parsing 'calendarReference' field")
	}
	calendarReference := CastBACnetContextTagObjectIdentifier(_calendarReference)
	if closeErr := readBuffer.CloseContext("calendarReference"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for calendarReference")
	}

	if closeErr := readBuffer.CloseContext("BACnetSpecialEventPeriodCalendarReference"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for BACnetSpecialEventPeriodCalendarReference")
	}

	// Create a partially initialized instance
	_child := &BACnetSpecialEventPeriodCalendarReference{
		CalendarReference:        CastBACnetContextTagObjectIdentifier(calendarReference),
		BACnetSpecialEventPeriod: &BACnetSpecialEventPeriod{},
	}
	_child.BACnetSpecialEventPeriod.Child = _child
	return _child, nil
}

func (m *BACnetSpecialEventPeriodCalendarReference) Serialize(writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	ser := func() error {
		if pushErr := writeBuffer.PushContext("BACnetSpecialEventPeriodCalendarReference"); pushErr != nil {
			return errors.Wrap(pushErr, "Error pushing for BACnetSpecialEventPeriodCalendarReference")
		}

		// Simple Field (calendarReference)
		if pushErr := writeBuffer.PushContext("calendarReference"); pushErr != nil {
			return errors.Wrap(pushErr, "Error pushing for calendarReference")
		}
		_calendarReferenceErr := writeBuffer.WriteSerializable(m.CalendarReference)
		if popErr := writeBuffer.PopContext("calendarReference"); popErr != nil {
			return errors.Wrap(popErr, "Error popping for calendarReference")
		}
		if _calendarReferenceErr != nil {
			return errors.Wrap(_calendarReferenceErr, "Error serializing 'calendarReference' field")
		}

		if popErr := writeBuffer.PopContext("BACnetSpecialEventPeriodCalendarReference"); popErr != nil {
			return errors.Wrap(popErr, "Error popping for BACnetSpecialEventPeriodCalendarReference")
		}
		return nil
	}
	return m.SerializeParent(writeBuffer, m, ser)
}

func (m *BACnetSpecialEventPeriodCalendarReference) String() string {
	if m == nil {
		return "<nil>"
	}
	writeBuffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := writeBuffer.WriteSerializable(m); err != nil {
		return err.Error()
	}
	return writeBuffer.GetBox().String()
}
