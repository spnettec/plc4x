/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// BACnetTimerStateChangeValueConstructedValue is the data-structure of this message
type BACnetTimerStateChangeValueConstructedValue struct {
	*BACnetTimerStateChangeValue
	ConstructedValue *BACnetConstructedData

	// Arguments.
	ObjectTypeArgument BACnetObjectType
}

// IBACnetTimerStateChangeValueConstructedValue is the corresponding interface of BACnetTimerStateChangeValueConstructedValue
type IBACnetTimerStateChangeValueConstructedValue interface {
	IBACnetTimerStateChangeValue
	// GetConstructedValue returns ConstructedValue (property field)
	GetConstructedValue() *BACnetConstructedData
	// GetLengthInBytes returns the length in bytes
	GetLengthInBytes() uint16
	// GetLengthInBits returns the length in bits
	GetLengthInBits() uint16
	// Serialize serializes this type
	Serialize(writeBuffer utils.WriteBuffer) error
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for discriminator values.
///////////////////////

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

func (m *BACnetTimerStateChangeValueConstructedValue) InitializeParent(parent *BACnetTimerStateChangeValue, peekedTagHeader *BACnetTagHeader) {
	m.BACnetTimerStateChangeValue.PeekedTagHeader = peekedTagHeader
}

func (m *BACnetTimerStateChangeValueConstructedValue) GetParent() *BACnetTimerStateChangeValue {
	return m.BACnetTimerStateChangeValue
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *BACnetTimerStateChangeValueConstructedValue) GetConstructedValue() *BACnetConstructedData {
	return m.ConstructedValue
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewBACnetTimerStateChangeValueConstructedValue factory function for BACnetTimerStateChangeValueConstructedValue
func NewBACnetTimerStateChangeValueConstructedValue(constructedValue *BACnetConstructedData, peekedTagHeader *BACnetTagHeader, objectTypeArgument BACnetObjectType) *BACnetTimerStateChangeValueConstructedValue {
	_result := &BACnetTimerStateChangeValueConstructedValue{
		ConstructedValue:            constructedValue,
		BACnetTimerStateChangeValue: NewBACnetTimerStateChangeValue(peekedTagHeader, objectTypeArgument),
	}
	_result.Child = _result
	return _result
}

func CastBACnetTimerStateChangeValueConstructedValue(structType interface{}) *BACnetTimerStateChangeValueConstructedValue {
	if casted, ok := structType.(BACnetTimerStateChangeValueConstructedValue); ok {
		return &casted
	}
	if casted, ok := structType.(*BACnetTimerStateChangeValueConstructedValue); ok {
		return casted
	}
	if casted, ok := structType.(BACnetTimerStateChangeValue); ok {
		return CastBACnetTimerStateChangeValueConstructedValue(casted.Child)
	}
	if casted, ok := structType.(*BACnetTimerStateChangeValue); ok {
		return CastBACnetTimerStateChangeValueConstructedValue(casted.Child)
	}
	return nil
}

func (m *BACnetTimerStateChangeValueConstructedValue) GetTypeName() string {
	return "BACnetTimerStateChangeValueConstructedValue"
}

func (m *BACnetTimerStateChangeValueConstructedValue) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *BACnetTimerStateChangeValueConstructedValue) GetLengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(m.GetParentLengthInBits())

	// Simple field (constructedValue)
	lengthInBits += m.ConstructedValue.GetLengthInBits()

	return lengthInBits
}

func (m *BACnetTimerStateChangeValueConstructedValue) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func BACnetTimerStateChangeValueConstructedValueParse(readBuffer utils.ReadBuffer, objectTypeArgument BACnetObjectType) (*BACnetTimerStateChangeValueConstructedValue, error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("BACnetTimerStateChangeValueConstructedValue"); pullErr != nil {
		return nil, pullErr
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	// Simple Field (constructedValue)
	if pullErr := readBuffer.PullContext("constructedValue"); pullErr != nil {
		return nil, pullErr
	}
	_constructedValue, _constructedValueErr := BACnetConstructedDataParse(readBuffer, uint8(uint8(1)), BACnetObjectType(objectTypeArgument), BACnetPropertyIdentifier(BACnetPropertyIdentifier_VENDOR_PROPRIETARY_VALUE))
	if _constructedValueErr != nil {
		return nil, errors.Wrap(_constructedValueErr, "Error parsing 'constructedValue' field")
	}
	constructedValue := CastBACnetConstructedData(_constructedValue)
	if closeErr := readBuffer.CloseContext("constructedValue"); closeErr != nil {
		return nil, closeErr
	}

	if closeErr := readBuffer.CloseContext("BACnetTimerStateChangeValueConstructedValue"); closeErr != nil {
		return nil, closeErr
	}

	// Create a partially initialized instance
	_child := &BACnetTimerStateChangeValueConstructedValue{
		ConstructedValue:            CastBACnetConstructedData(constructedValue),
		BACnetTimerStateChangeValue: &BACnetTimerStateChangeValue{},
	}
	_child.BACnetTimerStateChangeValue.Child = _child
	return _child, nil
}

func (m *BACnetTimerStateChangeValueConstructedValue) Serialize(writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	ser := func() error {
		if pushErr := writeBuffer.PushContext("BACnetTimerStateChangeValueConstructedValue"); pushErr != nil {
			return pushErr
		}

		// Simple Field (constructedValue)
		if pushErr := writeBuffer.PushContext("constructedValue"); pushErr != nil {
			return pushErr
		}
		_constructedValueErr := m.ConstructedValue.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("constructedValue"); popErr != nil {
			return popErr
		}
		if _constructedValueErr != nil {
			return errors.Wrap(_constructedValueErr, "Error serializing 'constructedValue' field")
		}

		if popErr := writeBuffer.PopContext("BACnetTimerStateChangeValueConstructedValue"); popErr != nil {
			return popErr
		}
		return nil
	}
	return m.SerializeParent(writeBuffer, m, ser)
}

func (m *BACnetTimerStateChangeValueConstructedValue) String() string {
	if m == nil {
		return "<nil>"
	}
	buffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := m.Serialize(buffer); err != nil {
		return err.Error()
	}
	return buffer.GetBox().String()
}
