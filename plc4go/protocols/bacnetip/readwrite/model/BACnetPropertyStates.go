/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// BACnetPropertyStates is the data-structure of this message
type BACnetPropertyStates struct {
	PeekedTagHeader *BACnetTagHeader
	Child           IBACnetPropertyStatesChild
}

// IBACnetPropertyStates is the corresponding interface of BACnetPropertyStates
type IBACnetPropertyStates interface {
	// GetPeekedTagHeader returns PeekedTagHeader (property field)
	GetPeekedTagHeader() *BACnetTagHeader
	// GetPeekedTagNumber returns PeekedTagNumber (virtual field)
	GetPeekedTagNumber() uint8
	// GetLengthInBytes returns the length in bytes
	GetLengthInBytes() uint16
	// GetLengthInBits returns the length in bits
	GetLengthInBits() uint16
	// Serialize serializes this type
	Serialize(writeBuffer utils.WriteBuffer) error
}

type IBACnetPropertyStatesParent interface {
	SerializeParent(writeBuffer utils.WriteBuffer, child IBACnetPropertyStates, serializeChildFunction func() error) error
	GetTypeName() string
}

type IBACnetPropertyStatesChild interface {
	Serialize(writeBuffer utils.WriteBuffer) error
	InitializeParent(parent *BACnetPropertyStates, peekedTagHeader *BACnetTagHeader)
	GetParent() *BACnetPropertyStates

	GetTypeName() string
	IBACnetPropertyStates
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *BACnetPropertyStates) GetPeekedTagHeader() *BACnetTagHeader {
	return m.PeekedTagHeader
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for virtual fields.
///////////////////////

func (m *BACnetPropertyStates) GetPeekedTagNumber() uint8 {
	return uint8(m.GetPeekedTagHeader().GetActualTagNumber())
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewBACnetPropertyStates factory function for BACnetPropertyStates
func NewBACnetPropertyStates(peekedTagHeader *BACnetTagHeader) *BACnetPropertyStates {
	return &BACnetPropertyStates{PeekedTagHeader: peekedTagHeader}
}

func CastBACnetPropertyStates(structType interface{}) *BACnetPropertyStates {
	if casted, ok := structType.(BACnetPropertyStates); ok {
		return &casted
	}
	if casted, ok := structType.(*BACnetPropertyStates); ok {
		return casted
	}
	if casted, ok := structType.(IBACnetPropertyStatesChild); ok {
		return casted.GetParent()
	}
	return nil
}

func (m *BACnetPropertyStates) GetTypeName() string {
	return "BACnetPropertyStates"
}

func (m *BACnetPropertyStates) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *BACnetPropertyStates) GetLengthInBitsConditional(lastItem bool) uint16 {
	return m.Child.GetLengthInBits()
}

func (m *BACnetPropertyStates) GetParentLengthInBits() uint16 {
	lengthInBits := uint16(0)

	// A virtual field doesn't have any in- or output.

	return lengthInBits
}

func (m *BACnetPropertyStates) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func BACnetPropertyStatesParse(readBuffer utils.ReadBuffer) (*BACnetPropertyStates, error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("BACnetPropertyStates"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for BACnetPropertyStates")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	// Peek Field (peekedTagHeader)
	currentPos = positionAware.GetPos()
	if pullErr := readBuffer.PullContext("peekedTagHeader"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for peekedTagHeader")
	}
	peekedTagHeader, _ := BACnetTagHeaderParse(readBuffer)
	readBuffer.Reset(currentPos)

	// Virtual field
	_peekedTagNumber := peekedTagHeader.GetActualTagNumber()
	peekedTagNumber := uint8(_peekedTagNumber)
	_ = peekedTagNumber

	// Switch Field (Depending on the discriminator values, passes the instantiation to a sub-type)
	type BACnetPropertyStatesChild interface {
		InitializeParent(*BACnetPropertyStates, *BACnetTagHeader)
		GetParent() *BACnetPropertyStates
	}
	var _child BACnetPropertyStatesChild
	var typeSwitchError error
	switch {
	case peekedTagNumber == uint8(0): // BACnetPropertyStatesBoolean
		_child, typeSwitchError = BACnetPropertyStatesBooleanParse(readBuffer, peekedTagNumber)
	case peekedTagNumber == uint8(1): // BACnetPropertyStatesBinaryValue
		_child, typeSwitchError = BACnetPropertyStatesBinaryValueParse(readBuffer, peekedTagNumber)
	case peekedTagNumber == uint8(2): // BACnetPropertyStatesEventType
		_child, typeSwitchError = BACnetPropertyStatesEventTypeParse(readBuffer, peekedTagNumber)
	case peekedTagNumber == uint8(3): // BACnetPropertyStatesPolarity
		_child, typeSwitchError = BACnetPropertyStatesPolarityParse(readBuffer, peekedTagNumber)
	case peekedTagNumber == uint8(4): // BACnetPropertyStatesProgramChange
		_child, typeSwitchError = BACnetPropertyStatesProgramChangeParse(readBuffer, peekedTagNumber)
	case peekedTagNumber == uint8(5): // BACnetPropertyStatesProgramChange
		_child, typeSwitchError = BACnetPropertyStatesProgramChangeParse(readBuffer, peekedTagNumber)
	case peekedTagNumber == uint8(6): // BACnetPropertyStatesReasonForHalt
		_child, typeSwitchError = BACnetPropertyStatesReasonForHaltParse(readBuffer, peekedTagNumber)
	case peekedTagNumber == uint8(7): // BACnetPropertyStatesReliability
		_child, typeSwitchError = BACnetPropertyStatesReliabilityParse(readBuffer, peekedTagNumber)
	case peekedTagNumber == uint8(8): // BACnetPropertyStatesState
		_child, typeSwitchError = BACnetPropertyStatesStateParse(readBuffer, peekedTagNumber)
	case peekedTagNumber == uint8(9): // BACnetPropertyStatesSystemStatus
		_child, typeSwitchError = BACnetPropertyStatesSystemStatusParse(readBuffer, peekedTagNumber)
	case peekedTagNumber == uint8(10): // BACnetPropertyStatesUnits
		_child, typeSwitchError = BACnetPropertyStatesUnitsParse(readBuffer, peekedTagNumber)
	case peekedTagNumber == uint8(11): // BACnetPropertyStatesExtendedValue
		_child, typeSwitchError = BACnetPropertyStatesExtendedValueParse(readBuffer, peekedTagNumber)
	case peekedTagNumber == uint8(12): // BACnetPropertyStatesLifeSafetyMode
		_child, typeSwitchError = BACnetPropertyStatesLifeSafetyModeParse(readBuffer, peekedTagNumber)
	case peekedTagNumber == uint8(13): // BACnetPropertyStatesLifeSafetyState
		_child, typeSwitchError = BACnetPropertyStatesLifeSafetyStateParse(readBuffer, peekedTagNumber)
	case peekedTagNumber == uint8(14): // BACnetPropertyStatesRestartReason
		_child, typeSwitchError = BACnetPropertyStatesRestartReasonParse(readBuffer, peekedTagNumber)
	case peekedTagNumber == uint8(15): // BACnetPropertyStatesDoorAlarmState
		_child, typeSwitchError = BACnetPropertyStatesDoorAlarmStateParse(readBuffer, peekedTagNumber)
	case peekedTagNumber == uint8(16): // BACnetPropertyStatesAction
		_child, typeSwitchError = BACnetPropertyStatesActionParse(readBuffer, peekedTagNumber)
	case peekedTagNumber == uint8(17): // BACnetPropertyStatesDoorSecuredStatus
		_child, typeSwitchError = BACnetPropertyStatesDoorSecuredStatusParse(readBuffer, peekedTagNumber)
	case peekedTagNumber == uint8(18): // BACnetPropertyStatesDoorStatus
		_child, typeSwitchError = BACnetPropertyStatesDoorStatusParse(readBuffer, peekedTagNumber)
	case peekedTagNumber == uint8(19): // BACnetPropertyStatesDoorValue
		_child, typeSwitchError = BACnetPropertyStatesDoorValueParse(readBuffer, peekedTagNumber)
	case peekedTagNumber == uint8(20): // BACnetPropertyStatesFileAccessMethod
		_child, typeSwitchError = BACnetPropertyStatesFileAccessMethodParse(readBuffer, peekedTagNumber)
	case peekedTagNumber == uint8(21): // BACnetPropertyStatesLockStatus
		_child, typeSwitchError = BACnetPropertyStatesLockStatusParse(readBuffer, peekedTagNumber)
	case peekedTagNumber == uint8(22): // BACnetPropertyStatesLifeSafetyOperations
		_child, typeSwitchError = BACnetPropertyStatesLifeSafetyOperationsParse(readBuffer, peekedTagNumber)
	case peekedTagNumber == uint8(23): // BACnetPropertyStatesMaintenance
		_child, typeSwitchError = BACnetPropertyStatesMaintenanceParse(readBuffer, peekedTagNumber)
	case peekedTagNumber == uint8(24): // BACnetPropertyStatesNodeType
		_child, typeSwitchError = BACnetPropertyStatesNodeTypeParse(readBuffer, peekedTagNumber)
	case peekedTagNumber == uint8(25): // BACnetPropertyStatesNotifyType
		_child, typeSwitchError = BACnetPropertyStatesNotifyTypeParse(readBuffer, peekedTagNumber)
	case peekedTagNumber == uint8(26): // BACnetPropertyStatesSecurityLevel
		_child, typeSwitchError = BACnetPropertyStatesSecurityLevelParse(readBuffer, peekedTagNumber)
	case peekedTagNumber == uint8(27): // BACnetPropertyStatesShedState
		_child, typeSwitchError = BACnetPropertyStatesShedStateParse(readBuffer, peekedTagNumber)
	case peekedTagNumber == uint8(28): // BACnetPropertyStatesSilencedState
		_child, typeSwitchError = BACnetPropertyStatesSilencedStateParse(readBuffer, peekedTagNumber)
	case peekedTagNumber == uint8(30): // BACnetPropertyStatesAccessEvent
		_child, typeSwitchError = BACnetPropertyStatesAccessEventParse(readBuffer, peekedTagNumber)
	case peekedTagNumber == uint8(31): // BACnetPropertyStatesZoneOccupanyState
		_child, typeSwitchError = BACnetPropertyStatesZoneOccupanyStateParse(readBuffer, peekedTagNumber)
	case peekedTagNumber == uint8(32): // BACnetPropertyStatesAccessCredentialDisableReason
		_child, typeSwitchError = BACnetPropertyStatesAccessCredentialDisableReasonParse(readBuffer, peekedTagNumber)
	case peekedTagNumber == uint8(33): // BACnetPropertyStatesAccessCredentialDisable
		_child, typeSwitchError = BACnetPropertyStatesAccessCredentialDisableParse(readBuffer, peekedTagNumber)
	case peekedTagNumber == uint8(34): // BACnetPropertyStatesAuthenticationStatus
		_child, typeSwitchError = BACnetPropertyStatesAuthenticationStatusParse(readBuffer, peekedTagNumber)
	case peekedTagNumber == uint8(36): // BACnetPropertyStatesBackupState
		_child, typeSwitchError = BACnetPropertyStatesBackupStateParse(readBuffer, peekedTagNumber)
	case peekedTagNumber == uint8(37): // BACnetPropertyStatesWriteStatus
		_child, typeSwitchError = BACnetPropertyStatesWriteStatusParse(readBuffer, peekedTagNumber)
	case peekedTagNumber == uint8(38): // BACnetPropertyStatesLightningInProgress
		_child, typeSwitchError = BACnetPropertyStatesLightningInProgressParse(readBuffer, peekedTagNumber)
	case peekedTagNumber == uint8(39): // BACnetPropertyStatesLightningOperation
		_child, typeSwitchError = BACnetPropertyStatesLightningOperationParse(readBuffer, peekedTagNumber)
	case peekedTagNumber == uint8(40): // BACnetPropertyStatesLightningTransition
		_child, typeSwitchError = BACnetPropertyStatesLightningTransitionParse(readBuffer, peekedTagNumber)
	case peekedTagNumber == uint8(41): // BACnetPropertyStatesIntegerValue
		_child, typeSwitchError = BACnetPropertyStatesIntegerValueParse(readBuffer, peekedTagNumber)
	case peekedTagNumber == uint8(42): // BACnetPropertyStatesBinaryLightningValue
		_child, typeSwitchError = BACnetPropertyStatesBinaryLightningValueParse(readBuffer, peekedTagNumber)
	case peekedTagNumber == uint8(43): // BACnetPropertyStatesTimerState
		_child, typeSwitchError = BACnetPropertyStatesTimerStateParse(readBuffer, peekedTagNumber)
	case peekedTagNumber == uint8(44): // BACnetPropertyStatesTimerTransition
		_child, typeSwitchError = BACnetPropertyStatesTimerTransitionParse(readBuffer, peekedTagNumber)
	case peekedTagNumber == uint8(45): // BACnetPropertyStatesBacnetIpMode
		_child, typeSwitchError = BACnetPropertyStatesBacnetIpModeParse(readBuffer, peekedTagNumber)
	case peekedTagNumber == uint8(46): // BACnetPropertyStatesNetworkPortCommand
		_child, typeSwitchError = BACnetPropertyStatesNetworkPortCommandParse(readBuffer, peekedTagNumber)
	case peekedTagNumber == uint8(47): // BACnetPropertyStatesNetworkType
		_child, typeSwitchError = BACnetPropertyStatesNetworkTypeParse(readBuffer, peekedTagNumber)
	case peekedTagNumber == uint8(48): // BACnetPropertyStatesNetworkNumberQuality
		_child, typeSwitchError = BACnetPropertyStatesNetworkNumberQualityParse(readBuffer, peekedTagNumber)
	case peekedTagNumber == uint8(49): // BACnetPropertyStatesEscalatorOperationDirection
		_child, typeSwitchError = BACnetPropertyStatesEscalatorOperationDirectionParse(readBuffer, peekedTagNumber)
	case peekedTagNumber == uint8(50): // BACnetPropertyStatesEscalatorFault
		_child, typeSwitchError = BACnetPropertyStatesEscalatorFaultParse(readBuffer, peekedTagNumber)
	case peekedTagNumber == uint8(51): // BACnetPropertyStatesEscalatorMode
		_child, typeSwitchError = BACnetPropertyStatesEscalatorModeParse(readBuffer, peekedTagNumber)
	case peekedTagNumber == uint8(52): // BACnetPropertyStatesLiftCarDirection
		_child, typeSwitchError = BACnetPropertyStatesLiftCarDirectionParse(readBuffer, peekedTagNumber)
	case peekedTagNumber == uint8(53): // BACnetPropertyStatesLiftCarDoorCommand
		_child, typeSwitchError = BACnetPropertyStatesLiftCarDoorCommandParse(readBuffer, peekedTagNumber)
	case peekedTagNumber == uint8(54): // BACnetPropertyStatesLiftCarDriveStatus
		_child, typeSwitchError = BACnetPropertyStatesLiftCarDriveStatusParse(readBuffer, peekedTagNumber)
	case peekedTagNumber == uint8(55): // BACnetPropertyStatesLiftCarMode
		_child, typeSwitchError = BACnetPropertyStatesLiftCarModeParse(readBuffer, peekedTagNumber)
	case peekedTagNumber == uint8(56): // BACnetPropertyStatesLiftGroupMode
		_child, typeSwitchError = BACnetPropertyStatesLiftGroupModeParse(readBuffer, peekedTagNumber)
	case peekedTagNumber == uint8(57): // BACnetPropertyStatesLiftFault
		_child, typeSwitchError = BACnetPropertyStatesLiftFaultParse(readBuffer, peekedTagNumber)
	case peekedTagNumber == uint8(58): // BACnetPropertyStatesProtocolLevel
		_child, typeSwitchError = BACnetPropertyStatesProtocolLevelParse(readBuffer, peekedTagNumber)
	case peekedTagNumber == uint8(63): // BACnetPropertyStatesExtendedValue
		_child, typeSwitchError = BACnetPropertyStatesExtendedValueParse(readBuffer, peekedTagNumber)
	case true: // BACnetPropertyStateActionUnknown
		_child, typeSwitchError = BACnetPropertyStateActionUnknownParse(readBuffer, peekedTagNumber)
	default:
		// TODO: return actual type
		typeSwitchError = errors.New("Unmapped type")
	}
	if typeSwitchError != nil {
		return nil, errors.Wrap(typeSwitchError, "Error parsing sub-type for type-switch.")
	}

	if closeErr := readBuffer.CloseContext("BACnetPropertyStates"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for BACnetPropertyStates")
	}

	// Finish initializing
	_child.InitializeParent(_child.GetParent(), peekedTagHeader)
	return _child.GetParent(), nil
}

func (m *BACnetPropertyStates) Serialize(writeBuffer utils.WriteBuffer) error {
	return m.Child.Serialize(writeBuffer)
}

func (m *BACnetPropertyStates) SerializeParent(writeBuffer utils.WriteBuffer, child IBACnetPropertyStates, serializeChildFunction func() error) error {
	positionAware := writeBuffer
	_ = positionAware
	if pushErr := writeBuffer.PushContext("BACnetPropertyStates"); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for BACnetPropertyStates")
	}
	// Virtual field
	if _peekedTagNumberErr := writeBuffer.WriteVirtual("peekedTagNumber", m.GetPeekedTagNumber()); _peekedTagNumberErr != nil {
		return errors.Wrap(_peekedTagNumberErr, "Error serializing 'peekedTagNumber' field")
	}

	// Switch field (Depending on the discriminator values, passes the serialization to a sub-type)
	if _typeSwitchErr := serializeChildFunction(); _typeSwitchErr != nil {
		return errors.Wrap(_typeSwitchErr, "Error serializing sub-type field")
	}

	if popErr := writeBuffer.PopContext("BACnetPropertyStates"); popErr != nil {
		return errors.Wrap(popErr, "Error popping for BACnetPropertyStates")
	}
	return nil
}

func (m *BACnetPropertyStates) String() string {
	if m == nil {
		return "<nil>"
	}
	buffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := m.Serialize(buffer); err != nil {
		return err.Error()
	}
	return buffer.GetBox().String()
}
