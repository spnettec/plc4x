/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// BACnetAddressBinding is the data-structure of this message
type BACnetAddressBinding struct {
	DeviceIdentifier *BACnetApplicationTagObjectIdentifier
	DeviceAddress    *BACnetAddress
}

// IBACnetAddressBinding is the corresponding interface of BACnetAddressBinding
type IBACnetAddressBinding interface {
	// GetDeviceIdentifier returns DeviceIdentifier (property field)
	GetDeviceIdentifier() *BACnetApplicationTagObjectIdentifier
	// GetDeviceAddress returns DeviceAddress (property field)
	GetDeviceAddress() *BACnetAddress
	// GetLengthInBytes returns the length in bytes
	GetLengthInBytes() uint16
	// GetLengthInBits returns the length in bits
	GetLengthInBits() uint16
	// Serialize serializes this type
	Serialize(writeBuffer utils.WriteBuffer) error
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *BACnetAddressBinding) GetDeviceIdentifier() *BACnetApplicationTagObjectIdentifier {
	return m.DeviceIdentifier
}

func (m *BACnetAddressBinding) GetDeviceAddress() *BACnetAddress {
	return m.DeviceAddress
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewBACnetAddressBinding factory function for BACnetAddressBinding
func NewBACnetAddressBinding(deviceIdentifier *BACnetApplicationTagObjectIdentifier, deviceAddress *BACnetAddress) *BACnetAddressBinding {
	return &BACnetAddressBinding{DeviceIdentifier: deviceIdentifier, DeviceAddress: deviceAddress}
}

func CastBACnetAddressBinding(structType interface{}) *BACnetAddressBinding {
	if casted, ok := structType.(BACnetAddressBinding); ok {
		return &casted
	}
	if casted, ok := structType.(*BACnetAddressBinding); ok {
		return casted
	}
	return nil
}

func (m *BACnetAddressBinding) GetTypeName() string {
	return "BACnetAddressBinding"
}

func (m *BACnetAddressBinding) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *BACnetAddressBinding) GetLengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(0)

	// Simple field (deviceIdentifier)
	lengthInBits += m.DeviceIdentifier.GetLengthInBits()

	// Simple field (deviceAddress)
	lengthInBits += m.DeviceAddress.GetLengthInBits()

	return lengthInBits
}

func (m *BACnetAddressBinding) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func BACnetAddressBindingParse(readBuffer utils.ReadBuffer) (*BACnetAddressBinding, error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("BACnetAddressBinding"); pullErr != nil {
		return nil, pullErr
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	// Simple Field (deviceIdentifier)
	if pullErr := readBuffer.PullContext("deviceIdentifier"); pullErr != nil {
		return nil, pullErr
	}
	_deviceIdentifier, _deviceIdentifierErr := BACnetApplicationTagParse(readBuffer)
	if _deviceIdentifierErr != nil {
		return nil, errors.Wrap(_deviceIdentifierErr, "Error parsing 'deviceIdentifier' field")
	}
	deviceIdentifier := CastBACnetApplicationTagObjectIdentifier(_deviceIdentifier)
	if closeErr := readBuffer.CloseContext("deviceIdentifier"); closeErr != nil {
		return nil, closeErr
	}

	// Simple Field (deviceAddress)
	if pullErr := readBuffer.PullContext("deviceAddress"); pullErr != nil {
		return nil, pullErr
	}
	_deviceAddress, _deviceAddressErr := BACnetAddressParse(readBuffer)
	if _deviceAddressErr != nil {
		return nil, errors.Wrap(_deviceAddressErr, "Error parsing 'deviceAddress' field")
	}
	deviceAddress := CastBACnetAddress(_deviceAddress)
	if closeErr := readBuffer.CloseContext("deviceAddress"); closeErr != nil {
		return nil, closeErr
	}

	if closeErr := readBuffer.CloseContext("BACnetAddressBinding"); closeErr != nil {
		return nil, closeErr
	}

	// Create the instance
	return NewBACnetAddressBinding(deviceIdentifier, deviceAddress), nil
}

func (m *BACnetAddressBinding) Serialize(writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	if pushErr := writeBuffer.PushContext("BACnetAddressBinding"); pushErr != nil {
		return pushErr
	}

	// Simple Field (deviceIdentifier)
	if pushErr := writeBuffer.PushContext("deviceIdentifier"); pushErr != nil {
		return pushErr
	}
	_deviceIdentifierErr := m.DeviceIdentifier.Serialize(writeBuffer)
	if popErr := writeBuffer.PopContext("deviceIdentifier"); popErr != nil {
		return popErr
	}
	if _deviceIdentifierErr != nil {
		return errors.Wrap(_deviceIdentifierErr, "Error serializing 'deviceIdentifier' field")
	}

	// Simple Field (deviceAddress)
	if pushErr := writeBuffer.PushContext("deviceAddress"); pushErr != nil {
		return pushErr
	}
	_deviceAddressErr := m.DeviceAddress.Serialize(writeBuffer)
	if popErr := writeBuffer.PopContext("deviceAddress"); popErr != nil {
		return popErr
	}
	if _deviceAddressErr != nil {
		return errors.Wrap(_deviceAddressErr, "Error serializing 'deviceAddress' field")
	}

	if popErr := writeBuffer.PopContext("BACnetAddressBinding"); popErr != nil {
		return popErr
	}
	return nil
}

func (m *BACnetAddressBinding) String() string {
	if m == nil {
		return "<nil>"
	}
	buffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := m.Serialize(buffer); err != nil {
		return err.Error()
	}
	return buffer.GetBox().String()
}
