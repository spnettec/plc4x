/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// BVLCSecureBVLL is the data-structure of this message
type BVLCSecureBVLL struct {
	*BVLC
	SecurityWrapper []byte

	// Arguments.
	BvlcPayloadLength uint16
}

// IBVLCSecureBVLL is the corresponding interface of BVLCSecureBVLL
type IBVLCSecureBVLL interface {
	IBVLC
	// GetSecurityWrapper returns SecurityWrapper (property field)
	GetSecurityWrapper() []byte
	// GetLengthInBytes returns the length in bytes
	GetLengthInBytes() uint16
	// GetLengthInBits returns the length in bits
	GetLengthInBits() uint16
	// Serialize serializes this type
	Serialize(writeBuffer utils.WriteBuffer) error
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for discriminator values.
///////////////////////

func (m *BVLCSecureBVLL) GetBvlcFunction() uint8 {
	return 0x0C
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

func (m *BVLCSecureBVLL) InitializeParent(parent *BVLC) {}

func (m *BVLCSecureBVLL) GetParent() *BVLC {
	return m.BVLC
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *BVLCSecureBVLL) GetSecurityWrapper() []byte {
	return m.SecurityWrapper
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewBVLCSecureBVLL factory function for BVLCSecureBVLL
func NewBVLCSecureBVLL(securityWrapper []byte, bvlcPayloadLength uint16) *BVLCSecureBVLL {
	_result := &BVLCSecureBVLL{
		SecurityWrapper: securityWrapper,
		BVLC:            NewBVLC(),
	}
	_result.Child = _result
	return _result
}

func CastBVLCSecureBVLL(structType interface{}) *BVLCSecureBVLL {
	if casted, ok := structType.(BVLCSecureBVLL); ok {
		return &casted
	}
	if casted, ok := structType.(*BVLCSecureBVLL); ok {
		return casted
	}
	if casted, ok := structType.(BVLC); ok {
		return CastBVLCSecureBVLL(casted.Child)
	}
	if casted, ok := structType.(*BVLC); ok {
		return CastBVLCSecureBVLL(casted.Child)
	}
	return nil
}

func (m *BVLCSecureBVLL) GetTypeName() string {
	return "BVLCSecureBVLL"
}

func (m *BVLCSecureBVLL) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *BVLCSecureBVLL) GetLengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(m.GetParentLengthInBits())

	// Array field
	if len(m.SecurityWrapper) > 0 {
		lengthInBits += 8 * uint16(len(m.SecurityWrapper))
	}

	return lengthInBits
}

func (m *BVLCSecureBVLL) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func BVLCSecureBVLLParse(readBuffer utils.ReadBuffer, bvlcPayloadLength uint16) (*BVLCSecureBVLL, error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("BVLCSecureBVLL"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for BVLCSecureBVLL")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos
	// Byte Array field (securityWrapper)
	numberOfBytessecurityWrapper := int(bvlcPayloadLength)
	securityWrapper, _readArrayErr := readBuffer.ReadByteArray("securityWrapper", numberOfBytessecurityWrapper)
	if _readArrayErr != nil {
		return nil, errors.Wrap(_readArrayErr, "Error parsing 'securityWrapper' field")
	}

	if closeErr := readBuffer.CloseContext("BVLCSecureBVLL"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for BVLCSecureBVLL")
	}

	// Create a partially initialized instance
	_child := &BVLCSecureBVLL{
		SecurityWrapper: securityWrapper,
		BVLC:            &BVLC{},
	}
	_child.BVLC.Child = _child
	return _child, nil
}

func (m *BVLCSecureBVLL) Serialize(writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	ser := func() error {
		if pushErr := writeBuffer.PushContext("BVLCSecureBVLL"); pushErr != nil {
			return errors.Wrap(pushErr, "Error pushing for BVLCSecureBVLL")
		}

		// Array Field (securityWrapper)
		if m.SecurityWrapper != nil {
			// Byte Array field (securityWrapper)
			_writeArrayErr := writeBuffer.WriteByteArray("securityWrapper", m.SecurityWrapper)
			if _writeArrayErr != nil {
				return errors.Wrap(_writeArrayErr, "Error serializing 'securityWrapper' field")
			}
		}

		if popErr := writeBuffer.PopContext("BVLCSecureBVLL"); popErr != nil {
			return errors.Wrap(popErr, "Error popping for BVLCSecureBVLL")
		}
		return nil
	}
	return m.SerializeParent(writeBuffer, m, ser)
}

func (m *BVLCSecureBVLL) String() string {
	if m == nil {
		return "<nil>"
	}
	writeBuffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := writeBuffer.WriteSerializable(m); err != nil {
		return err.Error()
	}
	return writeBuffer.GetBox().String()
}
