/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/spi/utils"
	"github.com/pkg/errors"
	"io"
)

// Code generated by code-generation. DO NOT EDIT.

// BACnetNameValue is the data-structure of this message
type BACnetNameValue struct {
	Name  *BACnetContextTagCharacterString
	Value *BACnetConstructedData
}

// IBACnetNameValue is the corresponding interface of BACnetNameValue
type IBACnetNameValue interface {
	// GetName returns Name (property field)
	GetName() *BACnetContextTagCharacterString
	// GetValue returns Value (property field)
	GetValue() *BACnetConstructedData
	// GetLengthInBytes returns the length in bytes
	GetLengthInBytes() uint16
	// GetLengthInBits returns the length in bits
	GetLengthInBits() uint16
	// Serialize serializes this type
	Serialize(writeBuffer utils.WriteBuffer) error
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *BACnetNameValue) GetName() *BACnetContextTagCharacterString {
	return m.Name
}

func (m *BACnetNameValue) GetValue() *BACnetConstructedData {
	return m.Value
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewBACnetNameValue factory function for BACnetNameValue
func NewBACnetNameValue(name *BACnetContextTagCharacterString, value *BACnetConstructedData) *BACnetNameValue {
	return &BACnetNameValue{Name: name, Value: value}
}

func CastBACnetNameValue(structType interface{}) *BACnetNameValue {
	if casted, ok := structType.(BACnetNameValue); ok {
		return &casted
	}
	if casted, ok := structType.(*BACnetNameValue); ok {
		return casted
	}
	return nil
}

func (m *BACnetNameValue) GetTypeName() string {
	return "BACnetNameValue"
}

func (m *BACnetNameValue) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *BACnetNameValue) GetLengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(0)

	// Simple field (name)
	lengthInBits += m.Name.GetLengthInBits()

	// Optional Field (value)
	if m.Value != nil {
		lengthInBits += (*m.Value).GetLengthInBits()
	}

	return lengthInBits
}

func (m *BACnetNameValue) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func BACnetNameValueParse(readBuffer utils.ReadBuffer) (*BACnetNameValue, error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("BACnetNameValue"); pullErr != nil {
		return nil, pullErr
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	// Simple Field (name)
	if pullErr := readBuffer.PullContext("name"); pullErr != nil {
		return nil, pullErr
	}
	_name, _nameErr := BACnetContextTagParse(readBuffer, uint8(uint8(0)), BACnetDataType(BACnetDataType_CHARACTER_STRING))
	if _nameErr != nil {
		return nil, errors.Wrap(_nameErr, "Error parsing 'name' field")
	}
	name := CastBACnetContextTagCharacterString(_name)
	if closeErr := readBuffer.CloseContext("name"); closeErr != nil {
		return nil, closeErr
	}

	// Optional Field (value) (Can be skipped, if a given expression evaluates to false)
	var value *BACnetConstructedData = nil
	{
		currentPos = positionAware.GetPos()
		if pullErr := readBuffer.PullContext("value"); pullErr != nil {
			return nil, pullErr
		}
		_val, _err := BACnetConstructedDataParse(readBuffer, uint8(1), BACnetObjectType_VENDOR_PROPRIETARY_VALUE, BACnetPropertyIdentifier_VENDOR_PROPRIETARY_VALUE, nil)
		switch {
		case errors.Is(_err, utils.ParseAssertError{}) || errors.Is(_err, io.EOF):
			readBuffer.Reset(currentPos)
		case _err != nil:
			return nil, errors.Wrap(_err, "Error parsing 'value' field")
		default:
			value = CastBACnetConstructedData(_val)
			if closeErr := readBuffer.CloseContext("value"); closeErr != nil {
				return nil, closeErr
			}
		}
	}

	if closeErr := readBuffer.CloseContext("BACnetNameValue"); closeErr != nil {
		return nil, closeErr
	}

	// Create the instance
	return NewBACnetNameValue(name, value), nil
}

func (m *BACnetNameValue) Serialize(writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	if pushErr := writeBuffer.PushContext("BACnetNameValue"); pushErr != nil {
		return pushErr
	}

	// Simple Field (name)
	if pushErr := writeBuffer.PushContext("name"); pushErr != nil {
		return pushErr
	}
	_nameErr := m.Name.Serialize(writeBuffer)
	if popErr := writeBuffer.PopContext("name"); popErr != nil {
		return popErr
	}
	if _nameErr != nil {
		return errors.Wrap(_nameErr, "Error serializing 'name' field")
	}

	// Optional Field (value) (Can be skipped, if the value is null)
	var value *BACnetConstructedData = nil
	if m.Value != nil {
		if pushErr := writeBuffer.PushContext("value"); pushErr != nil {
			return pushErr
		}
		value = m.Value
		_valueErr := value.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("value"); popErr != nil {
			return popErr
		}
		if _valueErr != nil {
			return errors.Wrap(_valueErr, "Error serializing 'value' field")
		}
	}

	if popErr := writeBuffer.PopContext("BACnetNameValue"); popErr != nil {
		return popErr
	}
	return nil
}

func (m *BACnetNameValue) String() string {
	if m == nil {
		return "<nil>"
	}
	buffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := m.Serialize(buffer); err != nil {
		return err.Error()
	}
	return buffer.GetBox().String()
}
