/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// BACnetCOVMultipleSubscription is the data-structure of this message
type BACnetCOVMultipleSubscription struct {
	Recipient                          *BACnetRecipientProcessEnclosed
	IssueConfirmedNotifications        *BACnetContextTagBoolean
	TimeRemaining                      *BACnetContextTagUnsignedInteger
	MaxNotificationDelay               *BACnetContextTagUnsignedInteger
	ListOfCovSubscriptionSpecification *BACnetCOVMultipleSubscriptionListOfCovSubscriptionSpecification
}

// IBACnetCOVMultipleSubscription is the corresponding interface of BACnetCOVMultipleSubscription
type IBACnetCOVMultipleSubscription interface {
	// GetRecipient returns Recipient (property field)
	GetRecipient() *BACnetRecipientProcessEnclosed
	// GetIssueConfirmedNotifications returns IssueConfirmedNotifications (property field)
	GetIssueConfirmedNotifications() *BACnetContextTagBoolean
	// GetTimeRemaining returns TimeRemaining (property field)
	GetTimeRemaining() *BACnetContextTagUnsignedInteger
	// GetMaxNotificationDelay returns MaxNotificationDelay (property field)
	GetMaxNotificationDelay() *BACnetContextTagUnsignedInteger
	// GetListOfCovSubscriptionSpecification returns ListOfCovSubscriptionSpecification (property field)
	GetListOfCovSubscriptionSpecification() *BACnetCOVMultipleSubscriptionListOfCovSubscriptionSpecification
	// GetLengthInBytes returns the length in bytes
	GetLengthInBytes() uint16
	// GetLengthInBits returns the length in bits
	GetLengthInBits() uint16
	// Serialize serializes this type
	Serialize(writeBuffer utils.WriteBuffer) error
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *BACnetCOVMultipleSubscription) GetRecipient() *BACnetRecipientProcessEnclosed {
	return m.Recipient
}

func (m *BACnetCOVMultipleSubscription) GetIssueConfirmedNotifications() *BACnetContextTagBoolean {
	return m.IssueConfirmedNotifications
}

func (m *BACnetCOVMultipleSubscription) GetTimeRemaining() *BACnetContextTagUnsignedInteger {
	return m.TimeRemaining
}

func (m *BACnetCOVMultipleSubscription) GetMaxNotificationDelay() *BACnetContextTagUnsignedInteger {
	return m.MaxNotificationDelay
}

func (m *BACnetCOVMultipleSubscription) GetListOfCovSubscriptionSpecification() *BACnetCOVMultipleSubscriptionListOfCovSubscriptionSpecification {
	return m.ListOfCovSubscriptionSpecification
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewBACnetCOVMultipleSubscription factory function for BACnetCOVMultipleSubscription
func NewBACnetCOVMultipleSubscription(recipient *BACnetRecipientProcessEnclosed, issueConfirmedNotifications *BACnetContextTagBoolean, timeRemaining *BACnetContextTagUnsignedInteger, maxNotificationDelay *BACnetContextTagUnsignedInteger, listOfCovSubscriptionSpecification *BACnetCOVMultipleSubscriptionListOfCovSubscriptionSpecification) *BACnetCOVMultipleSubscription {
	return &BACnetCOVMultipleSubscription{Recipient: recipient, IssueConfirmedNotifications: issueConfirmedNotifications, TimeRemaining: timeRemaining, MaxNotificationDelay: maxNotificationDelay, ListOfCovSubscriptionSpecification: listOfCovSubscriptionSpecification}
}

func CastBACnetCOVMultipleSubscription(structType interface{}) *BACnetCOVMultipleSubscription {
	if casted, ok := structType.(BACnetCOVMultipleSubscription); ok {
		return &casted
	}
	if casted, ok := structType.(*BACnetCOVMultipleSubscription); ok {
		return casted
	}
	return nil
}

func (m *BACnetCOVMultipleSubscription) GetTypeName() string {
	return "BACnetCOVMultipleSubscription"
}

func (m *BACnetCOVMultipleSubscription) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *BACnetCOVMultipleSubscription) GetLengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(0)

	// Simple field (recipient)
	lengthInBits += m.Recipient.GetLengthInBits()

	// Simple field (issueConfirmedNotifications)
	lengthInBits += m.IssueConfirmedNotifications.GetLengthInBits()

	// Simple field (timeRemaining)
	lengthInBits += m.TimeRemaining.GetLengthInBits()

	// Simple field (maxNotificationDelay)
	lengthInBits += m.MaxNotificationDelay.GetLengthInBits()

	// Simple field (listOfCovSubscriptionSpecification)
	lengthInBits += m.ListOfCovSubscriptionSpecification.GetLengthInBits()

	return lengthInBits
}

func (m *BACnetCOVMultipleSubscription) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func BACnetCOVMultipleSubscriptionParse(readBuffer utils.ReadBuffer) (*BACnetCOVMultipleSubscription, error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("BACnetCOVMultipleSubscription"); pullErr != nil {
		return nil, pullErr
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	// Simple Field (recipient)
	if pullErr := readBuffer.PullContext("recipient"); pullErr != nil {
		return nil, pullErr
	}
	_recipient, _recipientErr := BACnetRecipientProcessEnclosedParse(readBuffer, uint8(uint8(0)))
	if _recipientErr != nil {
		return nil, errors.Wrap(_recipientErr, "Error parsing 'recipient' field")
	}
	recipient := CastBACnetRecipientProcessEnclosed(_recipient)
	if closeErr := readBuffer.CloseContext("recipient"); closeErr != nil {
		return nil, closeErr
	}

	// Simple Field (issueConfirmedNotifications)
	if pullErr := readBuffer.PullContext("issueConfirmedNotifications"); pullErr != nil {
		return nil, pullErr
	}
	_issueConfirmedNotifications, _issueConfirmedNotificationsErr := BACnetContextTagParse(readBuffer, uint8(uint8(1)), BACnetDataType(BACnetDataType_BOOLEAN))
	if _issueConfirmedNotificationsErr != nil {
		return nil, errors.Wrap(_issueConfirmedNotificationsErr, "Error parsing 'issueConfirmedNotifications' field")
	}
	issueConfirmedNotifications := CastBACnetContextTagBoolean(_issueConfirmedNotifications)
	if closeErr := readBuffer.CloseContext("issueConfirmedNotifications"); closeErr != nil {
		return nil, closeErr
	}

	// Simple Field (timeRemaining)
	if pullErr := readBuffer.PullContext("timeRemaining"); pullErr != nil {
		return nil, pullErr
	}
	_timeRemaining, _timeRemainingErr := BACnetContextTagParse(readBuffer, uint8(uint8(2)), BACnetDataType(BACnetDataType_UNSIGNED_INTEGER))
	if _timeRemainingErr != nil {
		return nil, errors.Wrap(_timeRemainingErr, "Error parsing 'timeRemaining' field")
	}
	timeRemaining := CastBACnetContextTagUnsignedInteger(_timeRemaining)
	if closeErr := readBuffer.CloseContext("timeRemaining"); closeErr != nil {
		return nil, closeErr
	}

	// Simple Field (maxNotificationDelay)
	if pullErr := readBuffer.PullContext("maxNotificationDelay"); pullErr != nil {
		return nil, pullErr
	}
	_maxNotificationDelay, _maxNotificationDelayErr := BACnetContextTagParse(readBuffer, uint8(uint8(3)), BACnetDataType(BACnetDataType_UNSIGNED_INTEGER))
	if _maxNotificationDelayErr != nil {
		return nil, errors.Wrap(_maxNotificationDelayErr, "Error parsing 'maxNotificationDelay' field")
	}
	maxNotificationDelay := CastBACnetContextTagUnsignedInteger(_maxNotificationDelay)
	if closeErr := readBuffer.CloseContext("maxNotificationDelay"); closeErr != nil {
		return nil, closeErr
	}

	// Simple Field (listOfCovSubscriptionSpecification)
	if pullErr := readBuffer.PullContext("listOfCovSubscriptionSpecification"); pullErr != nil {
		return nil, pullErr
	}
	_listOfCovSubscriptionSpecification, _listOfCovSubscriptionSpecificationErr := BACnetCOVMultipleSubscriptionListOfCovSubscriptionSpecificationParse(readBuffer, uint8(uint8(4)))
	if _listOfCovSubscriptionSpecificationErr != nil {
		return nil, errors.Wrap(_listOfCovSubscriptionSpecificationErr, "Error parsing 'listOfCovSubscriptionSpecification' field")
	}
	listOfCovSubscriptionSpecification := CastBACnetCOVMultipleSubscriptionListOfCovSubscriptionSpecification(_listOfCovSubscriptionSpecification)
	if closeErr := readBuffer.CloseContext("listOfCovSubscriptionSpecification"); closeErr != nil {
		return nil, closeErr
	}

	if closeErr := readBuffer.CloseContext("BACnetCOVMultipleSubscription"); closeErr != nil {
		return nil, closeErr
	}

	// Create the instance
	return NewBACnetCOVMultipleSubscription(recipient, issueConfirmedNotifications, timeRemaining, maxNotificationDelay, listOfCovSubscriptionSpecification), nil
}

func (m *BACnetCOVMultipleSubscription) Serialize(writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	if pushErr := writeBuffer.PushContext("BACnetCOVMultipleSubscription"); pushErr != nil {
		return pushErr
	}

	// Simple Field (recipient)
	if pushErr := writeBuffer.PushContext("recipient"); pushErr != nil {
		return pushErr
	}
	_recipientErr := m.Recipient.Serialize(writeBuffer)
	if popErr := writeBuffer.PopContext("recipient"); popErr != nil {
		return popErr
	}
	if _recipientErr != nil {
		return errors.Wrap(_recipientErr, "Error serializing 'recipient' field")
	}

	// Simple Field (issueConfirmedNotifications)
	if pushErr := writeBuffer.PushContext("issueConfirmedNotifications"); pushErr != nil {
		return pushErr
	}
	_issueConfirmedNotificationsErr := m.IssueConfirmedNotifications.Serialize(writeBuffer)
	if popErr := writeBuffer.PopContext("issueConfirmedNotifications"); popErr != nil {
		return popErr
	}
	if _issueConfirmedNotificationsErr != nil {
		return errors.Wrap(_issueConfirmedNotificationsErr, "Error serializing 'issueConfirmedNotifications' field")
	}

	// Simple Field (timeRemaining)
	if pushErr := writeBuffer.PushContext("timeRemaining"); pushErr != nil {
		return pushErr
	}
	_timeRemainingErr := m.TimeRemaining.Serialize(writeBuffer)
	if popErr := writeBuffer.PopContext("timeRemaining"); popErr != nil {
		return popErr
	}
	if _timeRemainingErr != nil {
		return errors.Wrap(_timeRemainingErr, "Error serializing 'timeRemaining' field")
	}

	// Simple Field (maxNotificationDelay)
	if pushErr := writeBuffer.PushContext("maxNotificationDelay"); pushErr != nil {
		return pushErr
	}
	_maxNotificationDelayErr := m.MaxNotificationDelay.Serialize(writeBuffer)
	if popErr := writeBuffer.PopContext("maxNotificationDelay"); popErr != nil {
		return popErr
	}
	if _maxNotificationDelayErr != nil {
		return errors.Wrap(_maxNotificationDelayErr, "Error serializing 'maxNotificationDelay' field")
	}

	// Simple Field (listOfCovSubscriptionSpecification)
	if pushErr := writeBuffer.PushContext("listOfCovSubscriptionSpecification"); pushErr != nil {
		return pushErr
	}
	_listOfCovSubscriptionSpecificationErr := m.ListOfCovSubscriptionSpecification.Serialize(writeBuffer)
	if popErr := writeBuffer.PopContext("listOfCovSubscriptionSpecification"); popErr != nil {
		return popErr
	}
	if _listOfCovSubscriptionSpecificationErr != nil {
		return errors.Wrap(_listOfCovSubscriptionSpecificationErr, "Error serializing 'listOfCovSubscriptionSpecification' field")
	}

	if popErr := writeBuffer.PopContext("BACnetCOVMultipleSubscription"); popErr != nil {
		return popErr
	}
	return nil
}

func (m *BACnetCOVMultipleSubscription) String() string {
	if m == nil {
		return "<nil>"
	}
	buffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := m.Serialize(buffer); err != nil {
		return err.Error()
	}
	return buffer.GetBox().String()
}
