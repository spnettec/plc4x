/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// BACnetSecurityLevel is an enum
type BACnetSecurityLevel uint8

type IBACnetSecurityLevel interface {
	Serialize(writeBuffer utils.WriteBuffer) error
}

const (
	BACnetSecurityLevel_INCAPABLE            BACnetSecurityLevel = 0
	BACnetSecurityLevel_PLAIN                BACnetSecurityLevel = 1
	BACnetSecurityLevel_SIGNED               BACnetSecurityLevel = 2
	BACnetSecurityLevel_ENCRYPTED            BACnetSecurityLevel = 3
	BACnetSecurityLevel_SIGNED_END_TO_END    BACnetSecurityLevel = 4
	BACnetSecurityLevel_ENCRYPTED_END_TO_END BACnetSecurityLevel = 5
)

var BACnetSecurityLevelValues []BACnetSecurityLevel

func init() {
	_ = errors.New
	BACnetSecurityLevelValues = []BACnetSecurityLevel{
		BACnetSecurityLevel_INCAPABLE,
		BACnetSecurityLevel_PLAIN,
		BACnetSecurityLevel_SIGNED,
		BACnetSecurityLevel_ENCRYPTED,
		BACnetSecurityLevel_SIGNED_END_TO_END,
		BACnetSecurityLevel_ENCRYPTED_END_TO_END,
	}
}

func BACnetSecurityLevelByValue(value uint8) BACnetSecurityLevel {
	switch value {
	case 0:
		return BACnetSecurityLevel_INCAPABLE
	case 1:
		return BACnetSecurityLevel_PLAIN
	case 2:
		return BACnetSecurityLevel_SIGNED
	case 3:
		return BACnetSecurityLevel_ENCRYPTED
	case 4:
		return BACnetSecurityLevel_SIGNED_END_TO_END
	case 5:
		return BACnetSecurityLevel_ENCRYPTED_END_TO_END
	}
	return 0
}

func BACnetSecurityLevelByName(value string) BACnetSecurityLevel {
	switch value {
	case "INCAPABLE":
		return BACnetSecurityLevel_INCAPABLE
	case "PLAIN":
		return BACnetSecurityLevel_PLAIN
	case "SIGNED":
		return BACnetSecurityLevel_SIGNED
	case "ENCRYPTED":
		return BACnetSecurityLevel_ENCRYPTED
	case "SIGNED_END_TO_END":
		return BACnetSecurityLevel_SIGNED_END_TO_END
	case "ENCRYPTED_END_TO_END":
		return BACnetSecurityLevel_ENCRYPTED_END_TO_END
	}
	return 0
}

func BACnetSecurityLevelKnows(value uint8) bool {
	for _, typeValue := range BACnetSecurityLevelValues {
		if uint8(typeValue) == value {
			return true
		}
	}
	return false
}

func CastBACnetSecurityLevel(structType interface{}) BACnetSecurityLevel {
	castFunc := func(typ interface{}) BACnetSecurityLevel {
		if sBACnetSecurityLevel, ok := typ.(BACnetSecurityLevel); ok {
			return sBACnetSecurityLevel
		}
		return 0
	}
	return castFunc(structType)
}

func (m BACnetSecurityLevel) GetLengthInBits() uint16 {
	return 8
}

func (m BACnetSecurityLevel) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func BACnetSecurityLevelParse(readBuffer utils.ReadBuffer) (BACnetSecurityLevel, error) {
	val, err := readBuffer.ReadUint8("BACnetSecurityLevel", 8)
	if err != nil {
		return 0, nil
	}
	return BACnetSecurityLevelByValue(val), nil
}

func (e BACnetSecurityLevel) Serialize(writeBuffer utils.WriteBuffer) error {
	return writeBuffer.WriteUint8("BACnetSecurityLevel", 8, uint8(e), utils.WithAdditionalStringRepresentation(e.name()))
}

func (e BACnetSecurityLevel) name() string {
	switch e {
	case BACnetSecurityLevel_INCAPABLE:
		return "INCAPABLE"
	case BACnetSecurityLevel_PLAIN:
		return "PLAIN"
	case BACnetSecurityLevel_SIGNED:
		return "SIGNED"
	case BACnetSecurityLevel_ENCRYPTED:
		return "ENCRYPTED"
	case BACnetSecurityLevel_SIGNED_END_TO_END:
		return "SIGNED_END_TO_END"
	case BACnetSecurityLevel_ENCRYPTED_END_TO_END:
		return "ENCRYPTED_END_TO_END"
	}
	return ""
}

func (e BACnetSecurityLevel) String() string {
	return e.name()
}
