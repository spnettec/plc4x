/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// BACnetLightingInProgress is an enum
type BACnetLightingInProgress uint8

type IBACnetLightingInProgress interface {
	Serialize(writeBuffer utils.WriteBuffer) error
}

const (
	BACnetLightingInProgress_IDLE           BACnetLightingInProgress = 0
	BACnetLightingInProgress_FADE_ACTIVE    BACnetLightingInProgress = 1
	BACnetLightingInProgress_RAMP_ACTIVE    BACnetLightingInProgress = 2
	BACnetLightingInProgress_NOT_CONTROLLED BACnetLightingInProgress = 3
	BACnetLightingInProgress_OTHER          BACnetLightingInProgress = 4
)

var BACnetLightingInProgressValues []BACnetLightingInProgress

func init() {
	_ = errors.New
	BACnetLightingInProgressValues = []BACnetLightingInProgress{
		BACnetLightingInProgress_IDLE,
		BACnetLightingInProgress_FADE_ACTIVE,
		BACnetLightingInProgress_RAMP_ACTIVE,
		BACnetLightingInProgress_NOT_CONTROLLED,
		BACnetLightingInProgress_OTHER,
	}
}

func BACnetLightingInProgressByValue(value uint8) BACnetLightingInProgress {
	switch value {
	case 0:
		return BACnetLightingInProgress_IDLE
	case 1:
		return BACnetLightingInProgress_FADE_ACTIVE
	case 2:
		return BACnetLightingInProgress_RAMP_ACTIVE
	case 3:
		return BACnetLightingInProgress_NOT_CONTROLLED
	case 4:
		return BACnetLightingInProgress_OTHER
	}
	return 0
}

func BACnetLightingInProgressByName(value string) (enum BACnetLightingInProgress, ok bool) {
	ok = true
	switch value {
	case "IDLE":
		enum = BACnetLightingInProgress_IDLE
	case "FADE_ACTIVE":
		enum = BACnetLightingInProgress_FADE_ACTIVE
	case "RAMP_ACTIVE":
		enum = BACnetLightingInProgress_RAMP_ACTIVE
	case "NOT_CONTROLLED":
		enum = BACnetLightingInProgress_NOT_CONTROLLED
	case "OTHER":
		enum = BACnetLightingInProgress_OTHER
	default:
		enum = 0
		ok = false
	}
	return
}

func BACnetLightingInProgressKnows(value uint8) bool {
	for _, typeValue := range BACnetLightingInProgressValues {
		if uint8(typeValue) == value {
			return true
		}
	}
	return false
}

func CastBACnetLightingInProgress(structType interface{}) BACnetLightingInProgress {
	castFunc := func(typ interface{}) BACnetLightingInProgress {
		if sBACnetLightingInProgress, ok := typ.(BACnetLightingInProgress); ok {
			return sBACnetLightingInProgress
		}
		return 0
	}
	return castFunc(structType)
}

func (m BACnetLightingInProgress) GetLengthInBits() uint16 {
	return 8
}

func (m BACnetLightingInProgress) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func BACnetLightingInProgressParse(readBuffer utils.ReadBuffer) (BACnetLightingInProgress, error) {
	val, err := readBuffer.ReadUint8("BACnetLightingInProgress", 8)
	if err != nil {
		return 0, nil
	}
	return BACnetLightingInProgressByValue(val), nil
}

func (e BACnetLightingInProgress) Serialize(writeBuffer utils.WriteBuffer) error {
	return writeBuffer.WriteUint8("BACnetLightingInProgress", 8, uint8(e), utils.WithAdditionalStringRepresentation(e.PLC4XEnumName()))
}

// PLC4XEnumName returns the name that is used in code to identify this enum
func (e BACnetLightingInProgress) PLC4XEnumName() string {
	switch e {
	case BACnetLightingInProgress_IDLE:
		return "IDLE"
	case BACnetLightingInProgress_FADE_ACTIVE:
		return "FADE_ACTIVE"
	case BACnetLightingInProgress_RAMP_ACTIVE:
		return "RAMP_ACTIVE"
	case BACnetLightingInProgress_NOT_CONTROLLED:
		return "NOT_CONTROLLED"
	case BACnetLightingInProgress_OTHER:
		return "OTHER"
	}
	return ""
}

func (e BACnetLightingInProgress) String() string {
	return e.PLC4XEnumName()
}
