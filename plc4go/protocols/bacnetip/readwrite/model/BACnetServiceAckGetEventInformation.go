/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// BACnetServiceAckGetEventInformation is the data-structure of this message
type BACnetServiceAckGetEventInformation struct {
	*BACnetServiceAck
	ListOfEventSummaries *BACnetEventSummariesList
	MoreEvents           *BACnetContextTagBoolean

	// Arguments.
	ServiceRequestLength uint16
}

// IBACnetServiceAckGetEventInformation is the corresponding interface of BACnetServiceAckGetEventInformation
type IBACnetServiceAckGetEventInformation interface {
	IBACnetServiceAck
	// GetListOfEventSummaries returns ListOfEventSummaries (property field)
	GetListOfEventSummaries() *BACnetEventSummariesList
	// GetMoreEvents returns MoreEvents (property field)
	GetMoreEvents() *BACnetContextTagBoolean
	// GetLengthInBytes returns the length in bytes
	GetLengthInBytes() uint16
	// GetLengthInBits returns the length in bits
	GetLengthInBits() uint16
	// Serialize serializes this type
	Serialize(writeBuffer utils.WriteBuffer) error
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for discriminator values.
///////////////////////

func (m *BACnetServiceAckGetEventInformation) GetServiceChoice() BACnetConfirmedServiceChoice {
	return BACnetConfirmedServiceChoice_GET_EVENT_INFORMATION
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

func (m *BACnetServiceAckGetEventInformation) InitializeParent(parent *BACnetServiceAck) {}

func (m *BACnetServiceAckGetEventInformation) GetParent() *BACnetServiceAck {
	return m.BACnetServiceAck
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *BACnetServiceAckGetEventInformation) GetListOfEventSummaries() *BACnetEventSummariesList {
	return m.ListOfEventSummaries
}

func (m *BACnetServiceAckGetEventInformation) GetMoreEvents() *BACnetContextTagBoolean {
	return m.MoreEvents
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewBACnetServiceAckGetEventInformation factory function for BACnetServiceAckGetEventInformation
func NewBACnetServiceAckGetEventInformation(listOfEventSummaries *BACnetEventSummariesList, moreEvents *BACnetContextTagBoolean, serviceRequestLength uint16) *BACnetServiceAckGetEventInformation {
	_result := &BACnetServiceAckGetEventInformation{
		ListOfEventSummaries: listOfEventSummaries,
		MoreEvents:           moreEvents,
		BACnetServiceAck:     NewBACnetServiceAck(serviceRequestLength),
	}
	_result.Child = _result
	return _result
}

func CastBACnetServiceAckGetEventInformation(structType interface{}) *BACnetServiceAckGetEventInformation {
	if casted, ok := structType.(BACnetServiceAckGetEventInformation); ok {
		return &casted
	}
	if casted, ok := structType.(*BACnetServiceAckGetEventInformation); ok {
		return casted
	}
	if casted, ok := structType.(BACnetServiceAck); ok {
		return CastBACnetServiceAckGetEventInformation(casted.Child)
	}
	if casted, ok := structType.(*BACnetServiceAck); ok {
		return CastBACnetServiceAckGetEventInformation(casted.Child)
	}
	return nil
}

func (m *BACnetServiceAckGetEventInformation) GetTypeName() string {
	return "BACnetServiceAckGetEventInformation"
}

func (m *BACnetServiceAckGetEventInformation) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *BACnetServiceAckGetEventInformation) GetLengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(m.GetParentLengthInBits())

	// Simple field (listOfEventSummaries)
	lengthInBits += m.ListOfEventSummaries.GetLengthInBits()

	// Simple field (moreEvents)
	lengthInBits += m.MoreEvents.GetLengthInBits()

	return lengthInBits
}

func (m *BACnetServiceAckGetEventInformation) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func BACnetServiceAckGetEventInformationParse(readBuffer utils.ReadBuffer, serviceRequestLength uint16) (*BACnetServiceAckGetEventInformation, error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("BACnetServiceAckGetEventInformation"); pullErr != nil {
		return nil, pullErr
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	// Simple Field (listOfEventSummaries)
	if pullErr := readBuffer.PullContext("listOfEventSummaries"); pullErr != nil {
		return nil, pullErr
	}
	_listOfEventSummaries, _listOfEventSummariesErr := BACnetEventSummariesListParse(readBuffer, uint8(uint8(0)))
	if _listOfEventSummariesErr != nil {
		return nil, errors.Wrap(_listOfEventSummariesErr, "Error parsing 'listOfEventSummaries' field")
	}
	listOfEventSummaries := CastBACnetEventSummariesList(_listOfEventSummaries)
	if closeErr := readBuffer.CloseContext("listOfEventSummaries"); closeErr != nil {
		return nil, closeErr
	}

	// Simple Field (moreEvents)
	if pullErr := readBuffer.PullContext("moreEvents"); pullErr != nil {
		return nil, pullErr
	}
	_moreEvents, _moreEventsErr := BACnetContextTagParse(readBuffer, uint8(uint8(1)), BACnetDataType(BACnetDataType_BOOLEAN))
	if _moreEventsErr != nil {
		return nil, errors.Wrap(_moreEventsErr, "Error parsing 'moreEvents' field")
	}
	moreEvents := CastBACnetContextTagBoolean(_moreEvents)
	if closeErr := readBuffer.CloseContext("moreEvents"); closeErr != nil {
		return nil, closeErr
	}

	if closeErr := readBuffer.CloseContext("BACnetServiceAckGetEventInformation"); closeErr != nil {
		return nil, closeErr
	}

	// Create a partially initialized instance
	_child := &BACnetServiceAckGetEventInformation{
		ListOfEventSummaries: CastBACnetEventSummariesList(listOfEventSummaries),
		MoreEvents:           CastBACnetContextTagBoolean(moreEvents),
		BACnetServiceAck:     &BACnetServiceAck{},
	}
	_child.BACnetServiceAck.Child = _child
	return _child, nil
}

func (m *BACnetServiceAckGetEventInformation) Serialize(writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	ser := func() error {
		if pushErr := writeBuffer.PushContext("BACnetServiceAckGetEventInformation"); pushErr != nil {
			return pushErr
		}

		// Simple Field (listOfEventSummaries)
		if pushErr := writeBuffer.PushContext("listOfEventSummaries"); pushErr != nil {
			return pushErr
		}
		_listOfEventSummariesErr := m.ListOfEventSummaries.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("listOfEventSummaries"); popErr != nil {
			return popErr
		}
		if _listOfEventSummariesErr != nil {
			return errors.Wrap(_listOfEventSummariesErr, "Error serializing 'listOfEventSummaries' field")
		}

		// Simple Field (moreEvents)
		if pushErr := writeBuffer.PushContext("moreEvents"); pushErr != nil {
			return pushErr
		}
		_moreEventsErr := m.MoreEvents.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("moreEvents"); popErr != nil {
			return popErr
		}
		if _moreEventsErr != nil {
			return errors.Wrap(_moreEventsErr, "Error serializing 'moreEvents' field")
		}

		if popErr := writeBuffer.PopContext("BACnetServiceAckGetEventInformation"); popErr != nil {
			return popErr
		}
		return nil
	}
	return m.SerializeParent(writeBuffer, m, ser)
}

func (m *BACnetServiceAckGetEventInformation) String() string {
	if m == nil {
		return "<nil>"
	}
	buffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := m.Serialize(buffer); err != nil {
		return err.Error()
	}
	return buffer.GetBox().String()
}
