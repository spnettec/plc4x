/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// BACnetLiftCarDriveStatus is an enum
type BACnetLiftCarDriveStatus uint16

type IBACnetLiftCarDriveStatus interface {
	Serialize(writeBuffer utils.WriteBuffer) error
}

const (
	BACnetLiftCarDriveStatus_UNKNOWN                  BACnetLiftCarDriveStatus = 0
	BACnetLiftCarDriveStatus_STATIONARY               BACnetLiftCarDriveStatus = 1
	BACnetLiftCarDriveStatus_BRAKING                  BACnetLiftCarDriveStatus = 2
	BACnetLiftCarDriveStatus_ACCELERATE               BACnetLiftCarDriveStatus = 3
	BACnetLiftCarDriveStatus_DECELERATE               BACnetLiftCarDriveStatus = 4
	BACnetLiftCarDriveStatus_RATED_SPEED              BACnetLiftCarDriveStatus = 5
	BACnetLiftCarDriveStatus_SINGLE_FLOOR_JUMP        BACnetLiftCarDriveStatus = 6
	BACnetLiftCarDriveStatus_TWO_FLOOR_JUMP           BACnetLiftCarDriveStatus = 7
	BACnetLiftCarDriveStatus_THREE_FLOOR_JUMP         BACnetLiftCarDriveStatus = 8
	BACnetLiftCarDriveStatus_MULTI_FLOOR_JUMP         BACnetLiftCarDriveStatus = 9
	BACnetLiftCarDriveStatus_VENDOR_PROPRIETARY_VALUE BACnetLiftCarDriveStatus = 0xFFFF
)

var BACnetLiftCarDriveStatusValues []BACnetLiftCarDriveStatus

func init() {
	_ = errors.New
	BACnetLiftCarDriveStatusValues = []BACnetLiftCarDriveStatus{
		BACnetLiftCarDriveStatus_UNKNOWN,
		BACnetLiftCarDriveStatus_STATIONARY,
		BACnetLiftCarDriveStatus_BRAKING,
		BACnetLiftCarDriveStatus_ACCELERATE,
		BACnetLiftCarDriveStatus_DECELERATE,
		BACnetLiftCarDriveStatus_RATED_SPEED,
		BACnetLiftCarDriveStatus_SINGLE_FLOOR_JUMP,
		BACnetLiftCarDriveStatus_TWO_FLOOR_JUMP,
		BACnetLiftCarDriveStatus_THREE_FLOOR_JUMP,
		BACnetLiftCarDriveStatus_MULTI_FLOOR_JUMP,
		BACnetLiftCarDriveStatus_VENDOR_PROPRIETARY_VALUE,
	}
}

func BACnetLiftCarDriveStatusByValue(value uint16) BACnetLiftCarDriveStatus {
	switch value {
	case 0:
		return BACnetLiftCarDriveStatus_UNKNOWN
	case 0xFFFF:
		return BACnetLiftCarDriveStatus_VENDOR_PROPRIETARY_VALUE
	case 1:
		return BACnetLiftCarDriveStatus_STATIONARY
	case 2:
		return BACnetLiftCarDriveStatus_BRAKING
	case 3:
		return BACnetLiftCarDriveStatus_ACCELERATE
	case 4:
		return BACnetLiftCarDriveStatus_DECELERATE
	case 5:
		return BACnetLiftCarDriveStatus_RATED_SPEED
	case 6:
		return BACnetLiftCarDriveStatus_SINGLE_FLOOR_JUMP
	case 7:
		return BACnetLiftCarDriveStatus_TWO_FLOOR_JUMP
	case 8:
		return BACnetLiftCarDriveStatus_THREE_FLOOR_JUMP
	case 9:
		return BACnetLiftCarDriveStatus_MULTI_FLOOR_JUMP
	}
	return 0
}

func BACnetLiftCarDriveStatusByName(value string) BACnetLiftCarDriveStatus {
	switch value {
	case "UNKNOWN":
		return BACnetLiftCarDriveStatus_UNKNOWN
	case "VENDOR_PROPRIETARY_VALUE":
		return BACnetLiftCarDriveStatus_VENDOR_PROPRIETARY_VALUE
	case "STATIONARY":
		return BACnetLiftCarDriveStatus_STATIONARY
	case "BRAKING":
		return BACnetLiftCarDriveStatus_BRAKING
	case "ACCELERATE":
		return BACnetLiftCarDriveStatus_ACCELERATE
	case "DECELERATE":
		return BACnetLiftCarDriveStatus_DECELERATE
	case "RATED_SPEED":
		return BACnetLiftCarDriveStatus_RATED_SPEED
	case "SINGLE_FLOOR_JUMP":
		return BACnetLiftCarDriveStatus_SINGLE_FLOOR_JUMP
	case "TWO_FLOOR_JUMP":
		return BACnetLiftCarDriveStatus_TWO_FLOOR_JUMP
	case "THREE_FLOOR_JUMP":
		return BACnetLiftCarDriveStatus_THREE_FLOOR_JUMP
	case "MULTI_FLOOR_JUMP":
		return BACnetLiftCarDriveStatus_MULTI_FLOOR_JUMP
	}
	return 0
}

func BACnetLiftCarDriveStatusKnows(value uint16) bool {
	for _, typeValue := range BACnetLiftCarDriveStatusValues {
		if uint16(typeValue) == value {
			return true
		}
	}
	return false
}

func CastBACnetLiftCarDriveStatus(structType interface{}) BACnetLiftCarDriveStatus {
	castFunc := func(typ interface{}) BACnetLiftCarDriveStatus {
		if sBACnetLiftCarDriveStatus, ok := typ.(BACnetLiftCarDriveStatus); ok {
			return sBACnetLiftCarDriveStatus
		}
		return 0
	}
	return castFunc(structType)
}

func (m BACnetLiftCarDriveStatus) GetLengthInBits() uint16 {
	return 16
}

func (m BACnetLiftCarDriveStatus) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func BACnetLiftCarDriveStatusParse(readBuffer utils.ReadBuffer) (BACnetLiftCarDriveStatus, error) {
	val, err := readBuffer.ReadUint16("BACnetLiftCarDriveStatus", 16)
	if err != nil {
		return 0, nil
	}
	return BACnetLiftCarDriveStatusByValue(val), nil
}

func (e BACnetLiftCarDriveStatus) Serialize(writeBuffer utils.WriteBuffer) error {
	return writeBuffer.WriteUint16("BACnetLiftCarDriveStatus", 16, uint16(e), utils.WithAdditionalStringRepresentation(e.name()))
}

func (e BACnetLiftCarDriveStatus) name() string {
	switch e {
	case BACnetLiftCarDriveStatus_UNKNOWN:
		return "UNKNOWN"
	case BACnetLiftCarDriveStatus_VENDOR_PROPRIETARY_VALUE:
		return "VENDOR_PROPRIETARY_VALUE"
	case BACnetLiftCarDriveStatus_STATIONARY:
		return "STATIONARY"
	case BACnetLiftCarDriveStatus_BRAKING:
		return "BRAKING"
	case BACnetLiftCarDriveStatus_ACCELERATE:
		return "ACCELERATE"
	case BACnetLiftCarDriveStatus_DECELERATE:
		return "DECELERATE"
	case BACnetLiftCarDriveStatus_RATED_SPEED:
		return "RATED_SPEED"
	case BACnetLiftCarDriveStatus_SINGLE_FLOOR_JUMP:
		return "SINGLE_FLOOR_JUMP"
	case BACnetLiftCarDriveStatus_TWO_FLOOR_JUMP:
		return "TWO_FLOOR_JUMP"
	case BACnetLiftCarDriveStatus_THREE_FLOOR_JUMP:
		return "THREE_FLOOR_JUMP"
	case BACnetLiftCarDriveStatus_MULTI_FLOOR_JUMP:
		return "MULTI_FLOOR_JUMP"
	}
	return ""
}

func (e BACnetLiftCarDriveStatus) String() string {
	return e.name()
}
