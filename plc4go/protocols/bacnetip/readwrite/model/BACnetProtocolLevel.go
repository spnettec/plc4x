/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// BACnetProtocolLevel is an enum
type BACnetProtocolLevel uint8

type IBACnetProtocolLevel interface {
	Serialize(writeBuffer utils.WriteBuffer) error
}

const (
	BACnetProtocolLevel_PHYSICAL               BACnetProtocolLevel = 0
	BACnetProtocolLevel_PROTOCOL               BACnetProtocolLevel = 1
	BACnetProtocolLevel_BACNET_APPLICATION     BACnetProtocolLevel = 2
	BACnetProtocolLevel_NON_BACNET_APPLICATION BACnetProtocolLevel = 3
)

var BACnetProtocolLevelValues []BACnetProtocolLevel

func init() {
	_ = errors.New
	BACnetProtocolLevelValues = []BACnetProtocolLevel{
		BACnetProtocolLevel_PHYSICAL,
		BACnetProtocolLevel_PROTOCOL,
		BACnetProtocolLevel_BACNET_APPLICATION,
		BACnetProtocolLevel_NON_BACNET_APPLICATION,
	}
}

func BACnetProtocolLevelByValue(value uint8) BACnetProtocolLevel {
	switch value {
	case 0:
		return BACnetProtocolLevel_PHYSICAL
	case 1:
		return BACnetProtocolLevel_PROTOCOL
	case 2:
		return BACnetProtocolLevel_BACNET_APPLICATION
	case 3:
		return BACnetProtocolLevel_NON_BACNET_APPLICATION
	}
	return 0
}

func BACnetProtocolLevelByName(value string) BACnetProtocolLevel {
	switch value {
	case "PHYSICAL":
		return BACnetProtocolLevel_PHYSICAL
	case "PROTOCOL":
		return BACnetProtocolLevel_PROTOCOL
	case "BACNET_APPLICATION":
		return BACnetProtocolLevel_BACNET_APPLICATION
	case "NON_BACNET_APPLICATION":
		return BACnetProtocolLevel_NON_BACNET_APPLICATION
	}
	return 0
}

func BACnetProtocolLevelKnows(value uint8) bool {
	for _, typeValue := range BACnetProtocolLevelValues {
		if uint8(typeValue) == value {
			return true
		}
	}
	return false
}

func CastBACnetProtocolLevel(structType interface{}) BACnetProtocolLevel {
	castFunc := func(typ interface{}) BACnetProtocolLevel {
		if sBACnetProtocolLevel, ok := typ.(BACnetProtocolLevel); ok {
			return sBACnetProtocolLevel
		}
		return 0
	}
	return castFunc(structType)
}

func (m BACnetProtocolLevel) GetLengthInBits() uint16 {
	return 8
}

func (m BACnetProtocolLevel) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func BACnetProtocolLevelParse(readBuffer utils.ReadBuffer) (BACnetProtocolLevel, error) {
	val, err := readBuffer.ReadUint8("BACnetProtocolLevel", 8)
	if err != nil {
		return 0, nil
	}
	return BACnetProtocolLevelByValue(val), nil
}

func (e BACnetProtocolLevel) Serialize(writeBuffer utils.WriteBuffer) error {
	return writeBuffer.WriteUint8("BACnetProtocolLevel", 8, uint8(e), utils.WithAdditionalStringRepresentation(e.name()))
}

func (e BACnetProtocolLevel) name() string {
	switch e {
	case BACnetProtocolLevel_PHYSICAL:
		return "PHYSICAL"
	case BACnetProtocolLevel_PROTOCOL:
		return "PROTOCOL"
	case BACnetProtocolLevel_BACNET_APPLICATION:
		return "BACNET_APPLICATION"
	case BACnetProtocolLevel_NON_BACNET_APPLICATION:
		return "NON_BACNET_APPLICATION"
	}
	return ""
}

func (e BACnetProtocolLevel) String() string {
	return e.name()
}
