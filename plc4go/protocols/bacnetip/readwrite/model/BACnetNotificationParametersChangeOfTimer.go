/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/spi/utils"
	"github.com/pkg/errors"
	"github.com/rs/zerolog/log"
	"io"
)

// Code generated by code-generation. DO NOT EDIT.

// BACnetNotificationParametersChangeOfTimer is the data-structure of this message
type BACnetNotificationParametersChangeOfTimer struct {
	*BACnetNotificationParameters
	InnerOpeningTag *BACnetOpeningTag
	NewValue        *BACnetTimerStateTagged
	StatusFlags     *BACnetStatusFlagsTagged
	UpdateTime      *BACnetDateTimeEnclosed
	LastStateChange *BACnetTimerTransitionTagged
	InitialTimeout  *BACnetContextTagUnsignedInteger
	ExpirationTime  *BACnetDateTimeEnclosed
	InnerClosingTag *BACnetClosingTag

	// Arguments.
	TagNumber          uint8
	ObjectTypeArgument BACnetObjectType
}

// IBACnetNotificationParametersChangeOfTimer is the corresponding interface of BACnetNotificationParametersChangeOfTimer
type IBACnetNotificationParametersChangeOfTimer interface {
	IBACnetNotificationParameters
	// GetInnerOpeningTag returns InnerOpeningTag (property field)
	GetInnerOpeningTag() *BACnetOpeningTag
	// GetNewValue returns NewValue (property field)
	GetNewValue() *BACnetTimerStateTagged
	// GetStatusFlags returns StatusFlags (property field)
	GetStatusFlags() *BACnetStatusFlagsTagged
	// GetUpdateTime returns UpdateTime (property field)
	GetUpdateTime() *BACnetDateTimeEnclosed
	// GetLastStateChange returns LastStateChange (property field)
	GetLastStateChange() *BACnetTimerTransitionTagged
	// GetInitialTimeout returns InitialTimeout (property field)
	GetInitialTimeout() *BACnetContextTagUnsignedInteger
	// GetExpirationTime returns ExpirationTime (property field)
	GetExpirationTime() *BACnetDateTimeEnclosed
	// GetInnerClosingTag returns InnerClosingTag (property field)
	GetInnerClosingTag() *BACnetClosingTag
	// GetLengthInBytes returns the length in bytes
	GetLengthInBytes() uint16
	// GetLengthInBits returns the length in bits
	GetLengthInBits() uint16
	// Serialize serializes this type
	Serialize(writeBuffer utils.WriteBuffer) error
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for discriminator values.
///////////////////////

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

func (m *BACnetNotificationParametersChangeOfTimer) InitializeParent(parent *BACnetNotificationParameters, openingTag *BACnetOpeningTag, peekedTagHeader *BACnetTagHeader, closingTag *BACnetClosingTag) {
	m.BACnetNotificationParameters.OpeningTag = openingTag
	m.BACnetNotificationParameters.PeekedTagHeader = peekedTagHeader
	m.BACnetNotificationParameters.ClosingTag = closingTag
}

func (m *BACnetNotificationParametersChangeOfTimer) GetParent() *BACnetNotificationParameters {
	return m.BACnetNotificationParameters
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *BACnetNotificationParametersChangeOfTimer) GetInnerOpeningTag() *BACnetOpeningTag {
	return m.InnerOpeningTag
}

func (m *BACnetNotificationParametersChangeOfTimer) GetNewValue() *BACnetTimerStateTagged {
	return m.NewValue
}

func (m *BACnetNotificationParametersChangeOfTimer) GetStatusFlags() *BACnetStatusFlagsTagged {
	return m.StatusFlags
}

func (m *BACnetNotificationParametersChangeOfTimer) GetUpdateTime() *BACnetDateTimeEnclosed {
	return m.UpdateTime
}

func (m *BACnetNotificationParametersChangeOfTimer) GetLastStateChange() *BACnetTimerTransitionTagged {
	return m.LastStateChange
}

func (m *BACnetNotificationParametersChangeOfTimer) GetInitialTimeout() *BACnetContextTagUnsignedInteger {
	return m.InitialTimeout
}

func (m *BACnetNotificationParametersChangeOfTimer) GetExpirationTime() *BACnetDateTimeEnclosed {
	return m.ExpirationTime
}

func (m *BACnetNotificationParametersChangeOfTimer) GetInnerClosingTag() *BACnetClosingTag {
	return m.InnerClosingTag
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewBACnetNotificationParametersChangeOfTimer factory function for BACnetNotificationParametersChangeOfTimer
func NewBACnetNotificationParametersChangeOfTimer(innerOpeningTag *BACnetOpeningTag, newValue *BACnetTimerStateTagged, statusFlags *BACnetStatusFlagsTagged, updateTime *BACnetDateTimeEnclosed, lastStateChange *BACnetTimerTransitionTagged, initialTimeout *BACnetContextTagUnsignedInteger, expirationTime *BACnetDateTimeEnclosed, innerClosingTag *BACnetClosingTag, openingTag *BACnetOpeningTag, peekedTagHeader *BACnetTagHeader, closingTag *BACnetClosingTag, tagNumber uint8, objectTypeArgument BACnetObjectType) *BACnetNotificationParametersChangeOfTimer {
	_result := &BACnetNotificationParametersChangeOfTimer{
		InnerOpeningTag:              innerOpeningTag,
		NewValue:                     newValue,
		StatusFlags:                  statusFlags,
		UpdateTime:                   updateTime,
		LastStateChange:              lastStateChange,
		InitialTimeout:               initialTimeout,
		ExpirationTime:               expirationTime,
		InnerClosingTag:              innerClosingTag,
		BACnetNotificationParameters: NewBACnetNotificationParameters(openingTag, peekedTagHeader, closingTag, tagNumber, objectTypeArgument),
	}
	_result.Child = _result
	return _result
}

func CastBACnetNotificationParametersChangeOfTimer(structType interface{}) *BACnetNotificationParametersChangeOfTimer {
	if casted, ok := structType.(BACnetNotificationParametersChangeOfTimer); ok {
		return &casted
	}
	if casted, ok := structType.(*BACnetNotificationParametersChangeOfTimer); ok {
		return casted
	}
	if casted, ok := structType.(BACnetNotificationParameters); ok {
		return CastBACnetNotificationParametersChangeOfTimer(casted.Child)
	}
	if casted, ok := structType.(*BACnetNotificationParameters); ok {
		return CastBACnetNotificationParametersChangeOfTimer(casted.Child)
	}
	return nil
}

func (m *BACnetNotificationParametersChangeOfTimer) GetTypeName() string {
	return "BACnetNotificationParametersChangeOfTimer"
}

func (m *BACnetNotificationParametersChangeOfTimer) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *BACnetNotificationParametersChangeOfTimer) GetLengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(m.GetParentLengthInBits())

	// Simple field (innerOpeningTag)
	lengthInBits += m.InnerOpeningTag.GetLengthInBits()

	// Simple field (newValue)
	lengthInBits += m.NewValue.GetLengthInBits()

	// Simple field (statusFlags)
	lengthInBits += m.StatusFlags.GetLengthInBits()

	// Simple field (updateTime)
	lengthInBits += m.UpdateTime.GetLengthInBits()

	// Optional Field (lastStateChange)
	if m.LastStateChange != nil {
		lengthInBits += (*m.LastStateChange).GetLengthInBits()
	}

	// Optional Field (initialTimeout)
	if m.InitialTimeout != nil {
		lengthInBits += (*m.InitialTimeout).GetLengthInBits()
	}

	// Optional Field (expirationTime)
	if m.ExpirationTime != nil {
		lengthInBits += (*m.ExpirationTime).GetLengthInBits()
	}

	// Simple field (innerClosingTag)
	lengthInBits += m.InnerClosingTag.GetLengthInBits()

	return lengthInBits
}

func (m *BACnetNotificationParametersChangeOfTimer) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func BACnetNotificationParametersChangeOfTimerParse(readBuffer utils.ReadBuffer, tagNumber uint8, objectTypeArgument BACnetObjectType, peekedTagNumber uint8) (*BACnetNotificationParametersChangeOfTimer, error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("BACnetNotificationParametersChangeOfTimer"); pullErr != nil {
		return nil, pullErr
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	// Simple Field (innerOpeningTag)
	if pullErr := readBuffer.PullContext("innerOpeningTag"); pullErr != nil {
		return nil, pullErr
	}
	_innerOpeningTag, _innerOpeningTagErr := BACnetOpeningTagParse(readBuffer, uint8(peekedTagNumber))
	if _innerOpeningTagErr != nil {
		return nil, errors.Wrap(_innerOpeningTagErr, "Error parsing 'innerOpeningTag' field")
	}
	innerOpeningTag := CastBACnetOpeningTag(_innerOpeningTag)
	if closeErr := readBuffer.CloseContext("innerOpeningTag"); closeErr != nil {
		return nil, closeErr
	}

	// Simple Field (newValue)
	if pullErr := readBuffer.PullContext("newValue"); pullErr != nil {
		return nil, pullErr
	}
	_newValue, _newValueErr := BACnetTimerStateTaggedParse(readBuffer, uint8(uint8(0)), TagClass(TagClass_CONTEXT_SPECIFIC_TAGS))
	if _newValueErr != nil {
		return nil, errors.Wrap(_newValueErr, "Error parsing 'newValue' field")
	}
	newValue := CastBACnetTimerStateTagged(_newValue)
	if closeErr := readBuffer.CloseContext("newValue"); closeErr != nil {
		return nil, closeErr
	}

	// Simple Field (statusFlags)
	if pullErr := readBuffer.PullContext("statusFlags"); pullErr != nil {
		return nil, pullErr
	}
	_statusFlags, _statusFlagsErr := BACnetStatusFlagsTaggedParse(readBuffer, uint8(uint8(1)), TagClass(TagClass_CONTEXT_SPECIFIC_TAGS))
	if _statusFlagsErr != nil {
		return nil, errors.Wrap(_statusFlagsErr, "Error parsing 'statusFlags' field")
	}
	statusFlags := CastBACnetStatusFlagsTagged(_statusFlags)
	if closeErr := readBuffer.CloseContext("statusFlags"); closeErr != nil {
		return nil, closeErr
	}

	// Simple Field (updateTime)
	if pullErr := readBuffer.PullContext("updateTime"); pullErr != nil {
		return nil, pullErr
	}
	_updateTime, _updateTimeErr := BACnetDateTimeEnclosedParse(readBuffer, uint8(uint8(2)))
	if _updateTimeErr != nil {
		return nil, errors.Wrap(_updateTimeErr, "Error parsing 'updateTime' field")
	}
	updateTime := CastBACnetDateTimeEnclosed(_updateTime)
	if closeErr := readBuffer.CloseContext("updateTime"); closeErr != nil {
		return nil, closeErr
	}

	// Optional Field (lastStateChange) (Can be skipped, if a given expression evaluates to false)
	var lastStateChange *BACnetTimerTransitionTagged = nil
	{
		currentPos = positionAware.GetPos()
		if pullErr := readBuffer.PullContext("lastStateChange"); pullErr != nil {
			return nil, pullErr
		}
		_val, _err := BACnetTimerTransitionTaggedParse(readBuffer, uint8(3), TagClass_CONTEXT_SPECIFIC_TAGS)
		switch {
		case errors.Is(_err, utils.ParseAssertError{}) || errors.Is(_err, io.EOF):
			log.Debug().Err(_err).Msg("Resetting position because optional threw an error")
			readBuffer.Reset(currentPos)
		case _err != nil:
			return nil, errors.Wrap(_err, "Error parsing 'lastStateChange' field")
		default:
			lastStateChange = CastBACnetTimerTransitionTagged(_val)
			if closeErr := readBuffer.CloseContext("lastStateChange"); closeErr != nil {
				return nil, closeErr
			}
		}
	}

	// Optional Field (initialTimeout) (Can be skipped, if a given expression evaluates to false)
	var initialTimeout *BACnetContextTagUnsignedInteger = nil
	{
		currentPos = positionAware.GetPos()
		if pullErr := readBuffer.PullContext("initialTimeout"); pullErr != nil {
			return nil, pullErr
		}
		_val, _err := BACnetContextTagParse(readBuffer, uint8(4), BACnetDataType_UNSIGNED_INTEGER)
		switch {
		case errors.Is(_err, utils.ParseAssertError{}) || errors.Is(_err, io.EOF):
			log.Debug().Err(_err).Msg("Resetting position because optional threw an error")
			readBuffer.Reset(currentPos)
		case _err != nil:
			return nil, errors.Wrap(_err, "Error parsing 'initialTimeout' field")
		default:
			initialTimeout = CastBACnetContextTagUnsignedInteger(_val)
			if closeErr := readBuffer.CloseContext("initialTimeout"); closeErr != nil {
				return nil, closeErr
			}
		}
	}

	// Optional Field (expirationTime) (Can be skipped, if a given expression evaluates to false)
	var expirationTime *BACnetDateTimeEnclosed = nil
	{
		currentPos = positionAware.GetPos()
		if pullErr := readBuffer.PullContext("expirationTime"); pullErr != nil {
			return nil, pullErr
		}
		_val, _err := BACnetDateTimeEnclosedParse(readBuffer, uint8(5))
		switch {
		case errors.Is(_err, utils.ParseAssertError{}) || errors.Is(_err, io.EOF):
			log.Debug().Err(_err).Msg("Resetting position because optional threw an error")
			readBuffer.Reset(currentPos)
		case _err != nil:
			return nil, errors.Wrap(_err, "Error parsing 'expirationTime' field")
		default:
			expirationTime = CastBACnetDateTimeEnclosed(_val)
			if closeErr := readBuffer.CloseContext("expirationTime"); closeErr != nil {
				return nil, closeErr
			}
		}
	}

	// Simple Field (innerClosingTag)
	if pullErr := readBuffer.PullContext("innerClosingTag"); pullErr != nil {
		return nil, pullErr
	}
	_innerClosingTag, _innerClosingTagErr := BACnetClosingTagParse(readBuffer, uint8(peekedTagNumber))
	if _innerClosingTagErr != nil {
		return nil, errors.Wrap(_innerClosingTagErr, "Error parsing 'innerClosingTag' field")
	}
	innerClosingTag := CastBACnetClosingTag(_innerClosingTag)
	if closeErr := readBuffer.CloseContext("innerClosingTag"); closeErr != nil {
		return nil, closeErr
	}

	if closeErr := readBuffer.CloseContext("BACnetNotificationParametersChangeOfTimer"); closeErr != nil {
		return nil, closeErr
	}

	// Create a partially initialized instance
	_child := &BACnetNotificationParametersChangeOfTimer{
		InnerOpeningTag:              CastBACnetOpeningTag(innerOpeningTag),
		NewValue:                     CastBACnetTimerStateTagged(newValue),
		StatusFlags:                  CastBACnetStatusFlagsTagged(statusFlags),
		UpdateTime:                   CastBACnetDateTimeEnclosed(updateTime),
		LastStateChange:              CastBACnetTimerTransitionTagged(lastStateChange),
		InitialTimeout:               CastBACnetContextTagUnsignedInteger(initialTimeout),
		ExpirationTime:               CastBACnetDateTimeEnclosed(expirationTime),
		InnerClosingTag:              CastBACnetClosingTag(innerClosingTag),
		BACnetNotificationParameters: &BACnetNotificationParameters{},
	}
	_child.BACnetNotificationParameters.Child = _child
	return _child, nil
}

func (m *BACnetNotificationParametersChangeOfTimer) Serialize(writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	ser := func() error {
		if pushErr := writeBuffer.PushContext("BACnetNotificationParametersChangeOfTimer"); pushErr != nil {
			return pushErr
		}

		// Simple Field (innerOpeningTag)
		if pushErr := writeBuffer.PushContext("innerOpeningTag"); pushErr != nil {
			return pushErr
		}
		_innerOpeningTagErr := m.InnerOpeningTag.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("innerOpeningTag"); popErr != nil {
			return popErr
		}
		if _innerOpeningTagErr != nil {
			return errors.Wrap(_innerOpeningTagErr, "Error serializing 'innerOpeningTag' field")
		}

		// Simple Field (newValue)
		if pushErr := writeBuffer.PushContext("newValue"); pushErr != nil {
			return pushErr
		}
		_newValueErr := m.NewValue.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("newValue"); popErr != nil {
			return popErr
		}
		if _newValueErr != nil {
			return errors.Wrap(_newValueErr, "Error serializing 'newValue' field")
		}

		// Simple Field (statusFlags)
		if pushErr := writeBuffer.PushContext("statusFlags"); pushErr != nil {
			return pushErr
		}
		_statusFlagsErr := m.StatusFlags.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("statusFlags"); popErr != nil {
			return popErr
		}
		if _statusFlagsErr != nil {
			return errors.Wrap(_statusFlagsErr, "Error serializing 'statusFlags' field")
		}

		// Simple Field (updateTime)
		if pushErr := writeBuffer.PushContext("updateTime"); pushErr != nil {
			return pushErr
		}
		_updateTimeErr := m.UpdateTime.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("updateTime"); popErr != nil {
			return popErr
		}
		if _updateTimeErr != nil {
			return errors.Wrap(_updateTimeErr, "Error serializing 'updateTime' field")
		}

		// Optional Field (lastStateChange) (Can be skipped, if the value is null)
		var lastStateChange *BACnetTimerTransitionTagged = nil
		if m.LastStateChange != nil {
			if pushErr := writeBuffer.PushContext("lastStateChange"); pushErr != nil {
				return pushErr
			}
			lastStateChange = m.LastStateChange
			_lastStateChangeErr := lastStateChange.Serialize(writeBuffer)
			if popErr := writeBuffer.PopContext("lastStateChange"); popErr != nil {
				return popErr
			}
			if _lastStateChangeErr != nil {
				return errors.Wrap(_lastStateChangeErr, "Error serializing 'lastStateChange' field")
			}
		}

		// Optional Field (initialTimeout) (Can be skipped, if the value is null)
		var initialTimeout *BACnetContextTagUnsignedInteger = nil
		if m.InitialTimeout != nil {
			if pushErr := writeBuffer.PushContext("initialTimeout"); pushErr != nil {
				return pushErr
			}
			initialTimeout = m.InitialTimeout
			_initialTimeoutErr := initialTimeout.Serialize(writeBuffer)
			if popErr := writeBuffer.PopContext("initialTimeout"); popErr != nil {
				return popErr
			}
			if _initialTimeoutErr != nil {
				return errors.Wrap(_initialTimeoutErr, "Error serializing 'initialTimeout' field")
			}
		}

		// Optional Field (expirationTime) (Can be skipped, if the value is null)
		var expirationTime *BACnetDateTimeEnclosed = nil
		if m.ExpirationTime != nil {
			if pushErr := writeBuffer.PushContext("expirationTime"); pushErr != nil {
				return pushErr
			}
			expirationTime = m.ExpirationTime
			_expirationTimeErr := expirationTime.Serialize(writeBuffer)
			if popErr := writeBuffer.PopContext("expirationTime"); popErr != nil {
				return popErr
			}
			if _expirationTimeErr != nil {
				return errors.Wrap(_expirationTimeErr, "Error serializing 'expirationTime' field")
			}
		}

		// Simple Field (innerClosingTag)
		if pushErr := writeBuffer.PushContext("innerClosingTag"); pushErr != nil {
			return pushErr
		}
		_innerClosingTagErr := m.InnerClosingTag.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("innerClosingTag"); popErr != nil {
			return popErr
		}
		if _innerClosingTagErr != nil {
			return errors.Wrap(_innerClosingTagErr, "Error serializing 'innerClosingTag' field")
		}

		if popErr := writeBuffer.PopContext("BACnetNotificationParametersChangeOfTimer"); popErr != nil {
			return popErr
		}
		return nil
	}
	return m.SerializeParent(writeBuffer, m, ser)
}

func (m *BACnetNotificationParametersChangeOfTimer) String() string {
	if m == nil {
		return "<nil>"
	}
	buffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := m.Serialize(buffer); err != nil {
		return err.Error()
	}
	return buffer.GetBox().String()
}
