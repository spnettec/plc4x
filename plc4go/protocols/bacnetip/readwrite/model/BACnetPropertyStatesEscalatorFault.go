/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// BACnetPropertyStatesEscalatorFault is the data-structure of this message
type BACnetPropertyStatesEscalatorFault struct {
	*BACnetPropertyStates
	EscalatorFault *BACnetEscalatorFaultTagged
}

// IBACnetPropertyStatesEscalatorFault is the corresponding interface of BACnetPropertyStatesEscalatorFault
type IBACnetPropertyStatesEscalatorFault interface {
	IBACnetPropertyStates
	// GetEscalatorFault returns EscalatorFault (property field)
	GetEscalatorFault() *BACnetEscalatorFaultTagged
	// GetLengthInBytes returns the length in bytes
	GetLengthInBytes() uint16
	// GetLengthInBits returns the length in bits
	GetLengthInBits() uint16
	// Serialize serializes this type
	Serialize(writeBuffer utils.WriteBuffer) error
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for discriminator values.
///////////////////////

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

func (m *BACnetPropertyStatesEscalatorFault) InitializeParent(parent *BACnetPropertyStates, peekedTagHeader *BACnetTagHeader) {
	m.BACnetPropertyStates.PeekedTagHeader = peekedTagHeader
}

func (m *BACnetPropertyStatesEscalatorFault) GetParent() *BACnetPropertyStates {
	return m.BACnetPropertyStates
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *BACnetPropertyStatesEscalatorFault) GetEscalatorFault() *BACnetEscalatorFaultTagged {
	return m.EscalatorFault
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewBACnetPropertyStatesEscalatorFault factory function for BACnetPropertyStatesEscalatorFault
func NewBACnetPropertyStatesEscalatorFault(escalatorFault *BACnetEscalatorFaultTagged, peekedTagHeader *BACnetTagHeader) *BACnetPropertyStatesEscalatorFault {
	_result := &BACnetPropertyStatesEscalatorFault{
		EscalatorFault:       escalatorFault,
		BACnetPropertyStates: NewBACnetPropertyStates(peekedTagHeader),
	}
	_result.Child = _result
	return _result
}

func CastBACnetPropertyStatesEscalatorFault(structType interface{}) *BACnetPropertyStatesEscalatorFault {
	if casted, ok := structType.(BACnetPropertyStatesEscalatorFault); ok {
		return &casted
	}
	if casted, ok := structType.(*BACnetPropertyStatesEscalatorFault); ok {
		return casted
	}
	if casted, ok := structType.(BACnetPropertyStates); ok {
		return CastBACnetPropertyStatesEscalatorFault(casted.Child)
	}
	if casted, ok := structType.(*BACnetPropertyStates); ok {
		return CastBACnetPropertyStatesEscalatorFault(casted.Child)
	}
	return nil
}

func (m *BACnetPropertyStatesEscalatorFault) GetTypeName() string {
	return "BACnetPropertyStatesEscalatorFault"
}

func (m *BACnetPropertyStatesEscalatorFault) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *BACnetPropertyStatesEscalatorFault) GetLengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(m.GetParentLengthInBits())

	// Simple field (escalatorFault)
	lengthInBits += m.EscalatorFault.GetLengthInBits()

	return lengthInBits
}

func (m *BACnetPropertyStatesEscalatorFault) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func BACnetPropertyStatesEscalatorFaultParse(readBuffer utils.ReadBuffer, peekedTagNumber uint8) (*BACnetPropertyStatesEscalatorFault, error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("BACnetPropertyStatesEscalatorFault"); pullErr != nil {
		return nil, pullErr
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	// Simple Field (escalatorFault)
	if pullErr := readBuffer.PullContext("escalatorFault"); pullErr != nil {
		return nil, pullErr
	}
	_escalatorFault, _escalatorFaultErr := BACnetEscalatorFaultTaggedParse(readBuffer, uint8(peekedTagNumber), TagClass(TagClass_CONTEXT_SPECIFIC_TAGS))
	if _escalatorFaultErr != nil {
		return nil, errors.Wrap(_escalatorFaultErr, "Error parsing 'escalatorFault' field")
	}
	escalatorFault := CastBACnetEscalatorFaultTagged(_escalatorFault)
	if closeErr := readBuffer.CloseContext("escalatorFault"); closeErr != nil {
		return nil, closeErr
	}

	if closeErr := readBuffer.CloseContext("BACnetPropertyStatesEscalatorFault"); closeErr != nil {
		return nil, closeErr
	}

	// Create a partially initialized instance
	_child := &BACnetPropertyStatesEscalatorFault{
		EscalatorFault:       CastBACnetEscalatorFaultTagged(escalatorFault),
		BACnetPropertyStates: &BACnetPropertyStates{},
	}
	_child.BACnetPropertyStates.Child = _child
	return _child, nil
}

func (m *BACnetPropertyStatesEscalatorFault) Serialize(writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	ser := func() error {
		if pushErr := writeBuffer.PushContext("BACnetPropertyStatesEscalatorFault"); pushErr != nil {
			return pushErr
		}

		// Simple Field (escalatorFault)
		if pushErr := writeBuffer.PushContext("escalatorFault"); pushErr != nil {
			return pushErr
		}
		_escalatorFaultErr := m.EscalatorFault.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("escalatorFault"); popErr != nil {
			return popErr
		}
		if _escalatorFaultErr != nil {
			return errors.Wrap(_escalatorFaultErr, "Error serializing 'escalatorFault' field")
		}

		if popErr := writeBuffer.PopContext("BACnetPropertyStatesEscalatorFault"); popErr != nil {
			return popErr
		}
		return nil
	}
	return m.SerializeParent(writeBuffer, m, ser)
}

func (m *BACnetPropertyStatesEscalatorFault) String() string {
	if m == nil {
		return "<nil>"
	}
	buffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := m.Serialize(buffer); err != nil {
		return err.Error()
	}
	return buffer.GetBox().String()
}
