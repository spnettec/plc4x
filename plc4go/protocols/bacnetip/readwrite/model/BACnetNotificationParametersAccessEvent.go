/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/spi/utils"
	"github.com/pkg/errors"
	"io"
)

// Code generated by code-generation. DO NOT EDIT.

// BACnetNotificationParametersAccessEvent is the data-structure of this message
type BACnetNotificationParametersAccessEvent struct {
	*BACnetNotificationParameters
	InnerOpeningTag      *BACnetOpeningTag
	AccessEvent          *BACnetAccessEventTagged
	StatusFlags          *BACnetStatusFlagsTagged
	AccessEventTag       *BACnetContextTagUnsignedInteger
	AccessEventTime      *BACnetTimeStampEnclosed
	AccessCredential     *BACnetDeviceObjectReferenceEnclosed
	AuthenticationFactor *BACnetAuthenticationFactorTypeTagged
	InnerClosingTag      *BACnetClosingTag

	// Arguments.
	TagNumber          uint8
	ObjectTypeArgument BACnetObjectType
}

// IBACnetNotificationParametersAccessEvent is the corresponding interface of BACnetNotificationParametersAccessEvent
type IBACnetNotificationParametersAccessEvent interface {
	IBACnetNotificationParameters
	// GetInnerOpeningTag returns InnerOpeningTag (property field)
	GetInnerOpeningTag() *BACnetOpeningTag
	// GetAccessEvent returns AccessEvent (property field)
	GetAccessEvent() *BACnetAccessEventTagged
	// GetStatusFlags returns StatusFlags (property field)
	GetStatusFlags() *BACnetStatusFlagsTagged
	// GetAccessEventTag returns AccessEventTag (property field)
	GetAccessEventTag() *BACnetContextTagUnsignedInteger
	// GetAccessEventTime returns AccessEventTime (property field)
	GetAccessEventTime() *BACnetTimeStampEnclosed
	// GetAccessCredential returns AccessCredential (property field)
	GetAccessCredential() *BACnetDeviceObjectReferenceEnclosed
	// GetAuthenticationFactor returns AuthenticationFactor (property field)
	GetAuthenticationFactor() *BACnetAuthenticationFactorTypeTagged
	// GetInnerClosingTag returns InnerClosingTag (property field)
	GetInnerClosingTag() *BACnetClosingTag
	// GetLengthInBytes returns the length in bytes
	GetLengthInBytes() uint16
	// GetLengthInBits returns the length in bits
	GetLengthInBits() uint16
	// Serialize serializes this type
	Serialize(writeBuffer utils.WriteBuffer) error
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for discriminator values.
///////////////////////

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

func (m *BACnetNotificationParametersAccessEvent) InitializeParent(parent *BACnetNotificationParameters, openingTag *BACnetOpeningTag, peekedTagHeader *BACnetTagHeader, closingTag *BACnetClosingTag) {
	m.BACnetNotificationParameters.OpeningTag = openingTag
	m.BACnetNotificationParameters.PeekedTagHeader = peekedTagHeader
	m.BACnetNotificationParameters.ClosingTag = closingTag
}

func (m *BACnetNotificationParametersAccessEvent) GetParent() *BACnetNotificationParameters {
	return m.BACnetNotificationParameters
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *BACnetNotificationParametersAccessEvent) GetInnerOpeningTag() *BACnetOpeningTag {
	return m.InnerOpeningTag
}

func (m *BACnetNotificationParametersAccessEvent) GetAccessEvent() *BACnetAccessEventTagged {
	return m.AccessEvent
}

func (m *BACnetNotificationParametersAccessEvent) GetStatusFlags() *BACnetStatusFlagsTagged {
	return m.StatusFlags
}

func (m *BACnetNotificationParametersAccessEvent) GetAccessEventTag() *BACnetContextTagUnsignedInteger {
	return m.AccessEventTag
}

func (m *BACnetNotificationParametersAccessEvent) GetAccessEventTime() *BACnetTimeStampEnclosed {
	return m.AccessEventTime
}

func (m *BACnetNotificationParametersAccessEvent) GetAccessCredential() *BACnetDeviceObjectReferenceEnclosed {
	return m.AccessCredential
}

func (m *BACnetNotificationParametersAccessEvent) GetAuthenticationFactor() *BACnetAuthenticationFactorTypeTagged {
	return m.AuthenticationFactor
}

func (m *BACnetNotificationParametersAccessEvent) GetInnerClosingTag() *BACnetClosingTag {
	return m.InnerClosingTag
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewBACnetNotificationParametersAccessEvent factory function for BACnetNotificationParametersAccessEvent
func NewBACnetNotificationParametersAccessEvent(innerOpeningTag *BACnetOpeningTag, accessEvent *BACnetAccessEventTagged, statusFlags *BACnetStatusFlagsTagged, accessEventTag *BACnetContextTagUnsignedInteger, accessEventTime *BACnetTimeStampEnclosed, accessCredential *BACnetDeviceObjectReferenceEnclosed, authenticationFactor *BACnetAuthenticationFactorTypeTagged, innerClosingTag *BACnetClosingTag, openingTag *BACnetOpeningTag, peekedTagHeader *BACnetTagHeader, closingTag *BACnetClosingTag, tagNumber uint8, objectTypeArgument BACnetObjectType) *BACnetNotificationParametersAccessEvent {
	_result := &BACnetNotificationParametersAccessEvent{
		InnerOpeningTag:              innerOpeningTag,
		AccessEvent:                  accessEvent,
		StatusFlags:                  statusFlags,
		AccessEventTag:               accessEventTag,
		AccessEventTime:              accessEventTime,
		AccessCredential:             accessCredential,
		AuthenticationFactor:         authenticationFactor,
		InnerClosingTag:              innerClosingTag,
		BACnetNotificationParameters: NewBACnetNotificationParameters(openingTag, peekedTagHeader, closingTag, tagNumber, objectTypeArgument),
	}
	_result.Child = _result
	return _result
}

func CastBACnetNotificationParametersAccessEvent(structType interface{}) *BACnetNotificationParametersAccessEvent {
	if casted, ok := structType.(BACnetNotificationParametersAccessEvent); ok {
		return &casted
	}
	if casted, ok := structType.(*BACnetNotificationParametersAccessEvent); ok {
		return casted
	}
	if casted, ok := structType.(BACnetNotificationParameters); ok {
		return CastBACnetNotificationParametersAccessEvent(casted.Child)
	}
	if casted, ok := structType.(*BACnetNotificationParameters); ok {
		return CastBACnetNotificationParametersAccessEvent(casted.Child)
	}
	return nil
}

func (m *BACnetNotificationParametersAccessEvent) GetTypeName() string {
	return "BACnetNotificationParametersAccessEvent"
}

func (m *BACnetNotificationParametersAccessEvent) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *BACnetNotificationParametersAccessEvent) GetLengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(m.GetParentLengthInBits())

	// Simple field (innerOpeningTag)
	lengthInBits += m.InnerOpeningTag.GetLengthInBits()

	// Simple field (accessEvent)
	lengthInBits += m.AccessEvent.GetLengthInBits()

	// Simple field (statusFlags)
	lengthInBits += m.StatusFlags.GetLengthInBits()

	// Simple field (accessEventTag)
	lengthInBits += m.AccessEventTag.GetLengthInBits()

	// Simple field (accessEventTime)
	lengthInBits += m.AccessEventTime.GetLengthInBits()

	// Simple field (accessCredential)
	lengthInBits += m.AccessCredential.GetLengthInBits()

	// Optional Field (authenticationFactor)
	if m.AuthenticationFactor != nil {
		lengthInBits += (*m.AuthenticationFactor).GetLengthInBits()
	}

	// Simple field (innerClosingTag)
	lengthInBits += m.InnerClosingTag.GetLengthInBits()

	return lengthInBits
}

func (m *BACnetNotificationParametersAccessEvent) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func BACnetNotificationParametersAccessEventParse(readBuffer utils.ReadBuffer, tagNumber uint8, objectTypeArgument BACnetObjectType, peekedTagNumber uint8) (*BACnetNotificationParametersAccessEvent, error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("BACnetNotificationParametersAccessEvent"); pullErr != nil {
		return nil, pullErr
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	// Simple Field (innerOpeningTag)
	if pullErr := readBuffer.PullContext("innerOpeningTag"); pullErr != nil {
		return nil, pullErr
	}
	_innerOpeningTag, _innerOpeningTagErr := BACnetOpeningTagParse(readBuffer, uint8(peekedTagNumber))
	if _innerOpeningTagErr != nil {
		return nil, errors.Wrap(_innerOpeningTagErr, "Error parsing 'innerOpeningTag' field")
	}
	innerOpeningTag := CastBACnetOpeningTag(_innerOpeningTag)
	if closeErr := readBuffer.CloseContext("innerOpeningTag"); closeErr != nil {
		return nil, closeErr
	}

	// Simple Field (accessEvent)
	if pullErr := readBuffer.PullContext("accessEvent"); pullErr != nil {
		return nil, pullErr
	}
	_accessEvent, _accessEventErr := BACnetAccessEventTaggedParse(readBuffer, uint8(uint8(0)), TagClass(TagClass_CONTEXT_SPECIFIC_TAGS))
	if _accessEventErr != nil {
		return nil, errors.Wrap(_accessEventErr, "Error parsing 'accessEvent' field")
	}
	accessEvent := CastBACnetAccessEventTagged(_accessEvent)
	if closeErr := readBuffer.CloseContext("accessEvent"); closeErr != nil {
		return nil, closeErr
	}

	// Simple Field (statusFlags)
	if pullErr := readBuffer.PullContext("statusFlags"); pullErr != nil {
		return nil, pullErr
	}
	_statusFlags, _statusFlagsErr := BACnetStatusFlagsTaggedParse(readBuffer, uint8(uint8(1)), TagClass(TagClass_CONTEXT_SPECIFIC_TAGS))
	if _statusFlagsErr != nil {
		return nil, errors.Wrap(_statusFlagsErr, "Error parsing 'statusFlags' field")
	}
	statusFlags := CastBACnetStatusFlagsTagged(_statusFlags)
	if closeErr := readBuffer.CloseContext("statusFlags"); closeErr != nil {
		return nil, closeErr
	}

	// Simple Field (accessEventTag)
	if pullErr := readBuffer.PullContext("accessEventTag"); pullErr != nil {
		return nil, pullErr
	}
	_accessEventTag, _accessEventTagErr := BACnetContextTagParse(readBuffer, uint8(uint8(2)), BACnetDataType(BACnetDataType_UNSIGNED_INTEGER))
	if _accessEventTagErr != nil {
		return nil, errors.Wrap(_accessEventTagErr, "Error parsing 'accessEventTag' field")
	}
	accessEventTag := CastBACnetContextTagUnsignedInteger(_accessEventTag)
	if closeErr := readBuffer.CloseContext("accessEventTag"); closeErr != nil {
		return nil, closeErr
	}

	// Simple Field (accessEventTime)
	if pullErr := readBuffer.PullContext("accessEventTime"); pullErr != nil {
		return nil, pullErr
	}
	_accessEventTime, _accessEventTimeErr := BACnetTimeStampEnclosedParse(readBuffer, uint8(uint8(3)))
	if _accessEventTimeErr != nil {
		return nil, errors.Wrap(_accessEventTimeErr, "Error parsing 'accessEventTime' field")
	}
	accessEventTime := CastBACnetTimeStampEnclosed(_accessEventTime)
	if closeErr := readBuffer.CloseContext("accessEventTime"); closeErr != nil {
		return nil, closeErr
	}

	// Simple Field (accessCredential)
	if pullErr := readBuffer.PullContext("accessCredential"); pullErr != nil {
		return nil, pullErr
	}
	_accessCredential, _accessCredentialErr := BACnetDeviceObjectReferenceEnclosedParse(readBuffer, uint8(uint8(4)))
	if _accessCredentialErr != nil {
		return nil, errors.Wrap(_accessCredentialErr, "Error parsing 'accessCredential' field")
	}
	accessCredential := CastBACnetDeviceObjectReferenceEnclosed(_accessCredential)
	if closeErr := readBuffer.CloseContext("accessCredential"); closeErr != nil {
		return nil, closeErr
	}

	// Optional Field (authenticationFactor) (Can be skipped, if a given expression evaluates to false)
	var authenticationFactor *BACnetAuthenticationFactorTypeTagged = nil
	{
		currentPos = positionAware.GetPos()
		if pullErr := readBuffer.PullContext("authenticationFactor"); pullErr != nil {
			return nil, pullErr
		}
		_val, _err := BACnetAuthenticationFactorTypeTaggedParse(readBuffer, uint8(5), TagClass_CONTEXT_SPECIFIC_TAGS)
		switch {
		case errors.Is(_err, utils.ParseAssertError{}) || errors.Is(_err, io.EOF):
			readBuffer.Reset(currentPos)
		case _err != nil:
			return nil, errors.Wrap(_err, "Error parsing 'authenticationFactor' field")
		default:
			authenticationFactor = CastBACnetAuthenticationFactorTypeTagged(_val)
			if closeErr := readBuffer.CloseContext("authenticationFactor"); closeErr != nil {
				return nil, closeErr
			}
		}
	}

	// Simple Field (innerClosingTag)
	if pullErr := readBuffer.PullContext("innerClosingTag"); pullErr != nil {
		return nil, pullErr
	}
	_innerClosingTag, _innerClosingTagErr := BACnetClosingTagParse(readBuffer, uint8(peekedTagNumber))
	if _innerClosingTagErr != nil {
		return nil, errors.Wrap(_innerClosingTagErr, "Error parsing 'innerClosingTag' field")
	}
	innerClosingTag := CastBACnetClosingTag(_innerClosingTag)
	if closeErr := readBuffer.CloseContext("innerClosingTag"); closeErr != nil {
		return nil, closeErr
	}

	if closeErr := readBuffer.CloseContext("BACnetNotificationParametersAccessEvent"); closeErr != nil {
		return nil, closeErr
	}

	// Create a partially initialized instance
	_child := &BACnetNotificationParametersAccessEvent{
		InnerOpeningTag:              CastBACnetOpeningTag(innerOpeningTag),
		AccessEvent:                  CastBACnetAccessEventTagged(accessEvent),
		StatusFlags:                  CastBACnetStatusFlagsTagged(statusFlags),
		AccessEventTag:               CastBACnetContextTagUnsignedInteger(accessEventTag),
		AccessEventTime:              CastBACnetTimeStampEnclosed(accessEventTime),
		AccessCredential:             CastBACnetDeviceObjectReferenceEnclosed(accessCredential),
		AuthenticationFactor:         CastBACnetAuthenticationFactorTypeTagged(authenticationFactor),
		InnerClosingTag:              CastBACnetClosingTag(innerClosingTag),
		BACnetNotificationParameters: &BACnetNotificationParameters{},
	}
	_child.BACnetNotificationParameters.Child = _child
	return _child, nil
}

func (m *BACnetNotificationParametersAccessEvent) Serialize(writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	ser := func() error {
		if pushErr := writeBuffer.PushContext("BACnetNotificationParametersAccessEvent"); pushErr != nil {
			return pushErr
		}

		// Simple Field (innerOpeningTag)
		if pushErr := writeBuffer.PushContext("innerOpeningTag"); pushErr != nil {
			return pushErr
		}
		_innerOpeningTagErr := m.InnerOpeningTag.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("innerOpeningTag"); popErr != nil {
			return popErr
		}
		if _innerOpeningTagErr != nil {
			return errors.Wrap(_innerOpeningTagErr, "Error serializing 'innerOpeningTag' field")
		}

		// Simple Field (accessEvent)
		if pushErr := writeBuffer.PushContext("accessEvent"); pushErr != nil {
			return pushErr
		}
		_accessEventErr := m.AccessEvent.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("accessEvent"); popErr != nil {
			return popErr
		}
		if _accessEventErr != nil {
			return errors.Wrap(_accessEventErr, "Error serializing 'accessEvent' field")
		}

		// Simple Field (statusFlags)
		if pushErr := writeBuffer.PushContext("statusFlags"); pushErr != nil {
			return pushErr
		}
		_statusFlagsErr := m.StatusFlags.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("statusFlags"); popErr != nil {
			return popErr
		}
		if _statusFlagsErr != nil {
			return errors.Wrap(_statusFlagsErr, "Error serializing 'statusFlags' field")
		}

		// Simple Field (accessEventTag)
		if pushErr := writeBuffer.PushContext("accessEventTag"); pushErr != nil {
			return pushErr
		}
		_accessEventTagErr := m.AccessEventTag.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("accessEventTag"); popErr != nil {
			return popErr
		}
		if _accessEventTagErr != nil {
			return errors.Wrap(_accessEventTagErr, "Error serializing 'accessEventTag' field")
		}

		// Simple Field (accessEventTime)
		if pushErr := writeBuffer.PushContext("accessEventTime"); pushErr != nil {
			return pushErr
		}
		_accessEventTimeErr := m.AccessEventTime.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("accessEventTime"); popErr != nil {
			return popErr
		}
		if _accessEventTimeErr != nil {
			return errors.Wrap(_accessEventTimeErr, "Error serializing 'accessEventTime' field")
		}

		// Simple Field (accessCredential)
		if pushErr := writeBuffer.PushContext("accessCredential"); pushErr != nil {
			return pushErr
		}
		_accessCredentialErr := m.AccessCredential.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("accessCredential"); popErr != nil {
			return popErr
		}
		if _accessCredentialErr != nil {
			return errors.Wrap(_accessCredentialErr, "Error serializing 'accessCredential' field")
		}

		// Optional Field (authenticationFactor) (Can be skipped, if the value is null)
		var authenticationFactor *BACnetAuthenticationFactorTypeTagged = nil
		if m.AuthenticationFactor != nil {
			if pushErr := writeBuffer.PushContext("authenticationFactor"); pushErr != nil {
				return pushErr
			}
			authenticationFactor = m.AuthenticationFactor
			_authenticationFactorErr := authenticationFactor.Serialize(writeBuffer)
			if popErr := writeBuffer.PopContext("authenticationFactor"); popErr != nil {
				return popErr
			}
			if _authenticationFactorErr != nil {
				return errors.Wrap(_authenticationFactorErr, "Error serializing 'authenticationFactor' field")
			}
		}

		// Simple Field (innerClosingTag)
		if pushErr := writeBuffer.PushContext("innerClosingTag"); pushErr != nil {
			return pushErr
		}
		_innerClosingTagErr := m.InnerClosingTag.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("innerClosingTag"); popErr != nil {
			return popErr
		}
		if _innerClosingTagErr != nil {
			return errors.Wrap(_innerClosingTagErr, "Error serializing 'innerClosingTag' field")
		}

		if popErr := writeBuffer.PopContext("BACnetNotificationParametersAccessEvent"); popErr != nil {
			return popErr
		}
		return nil
	}
	return m.SerializeParent(writeBuffer, m, ser)
}

func (m *BACnetNotificationParametersAccessEvent) String() string {
	if m == nil {
		return "<nil>"
	}
	buffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := m.Serialize(buffer); err != nil {
		return err.Error()
	}
	return buffer.GetBox().String()
}
