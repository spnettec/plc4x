/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// BACnetSpecialEvent is the data-structure of this message
type BACnetSpecialEvent struct {
	Period           *BACnetSpecialEventPeriod
	ListOfTimeValues *BACnetSpecialEventListOfTimeValues
	EventPriority    *BACnetContextTagUnsignedInteger
}

// IBACnetSpecialEvent is the corresponding interface of BACnetSpecialEvent
type IBACnetSpecialEvent interface {
	// GetPeriod returns Period (property field)
	GetPeriod() *BACnetSpecialEventPeriod
	// GetListOfTimeValues returns ListOfTimeValues (property field)
	GetListOfTimeValues() *BACnetSpecialEventListOfTimeValues
	// GetEventPriority returns EventPriority (property field)
	GetEventPriority() *BACnetContextTagUnsignedInteger
	// GetLengthInBytes returns the length in bytes
	GetLengthInBytes() uint16
	// GetLengthInBits returns the length in bits
	GetLengthInBits() uint16
	// Serialize serializes this type
	Serialize(writeBuffer utils.WriteBuffer) error
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *BACnetSpecialEvent) GetPeriod() *BACnetSpecialEventPeriod {
	return m.Period
}

func (m *BACnetSpecialEvent) GetListOfTimeValues() *BACnetSpecialEventListOfTimeValues {
	return m.ListOfTimeValues
}

func (m *BACnetSpecialEvent) GetEventPriority() *BACnetContextTagUnsignedInteger {
	return m.EventPriority
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewBACnetSpecialEvent factory function for BACnetSpecialEvent
func NewBACnetSpecialEvent(period *BACnetSpecialEventPeriod, listOfTimeValues *BACnetSpecialEventListOfTimeValues, eventPriority *BACnetContextTagUnsignedInteger) *BACnetSpecialEvent {
	return &BACnetSpecialEvent{Period: period, ListOfTimeValues: listOfTimeValues, EventPriority: eventPriority}
}

func CastBACnetSpecialEvent(structType interface{}) *BACnetSpecialEvent {
	if casted, ok := structType.(BACnetSpecialEvent); ok {
		return &casted
	}
	if casted, ok := structType.(*BACnetSpecialEvent); ok {
		return casted
	}
	return nil
}

func (m *BACnetSpecialEvent) GetTypeName() string {
	return "BACnetSpecialEvent"
}

func (m *BACnetSpecialEvent) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *BACnetSpecialEvent) GetLengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(0)

	// Simple field (period)
	lengthInBits += m.Period.GetLengthInBits()

	// Simple field (listOfTimeValues)
	lengthInBits += m.ListOfTimeValues.GetLengthInBits()

	// Simple field (eventPriority)
	lengthInBits += m.EventPriority.GetLengthInBits()

	return lengthInBits
}

func (m *BACnetSpecialEvent) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func BACnetSpecialEventParse(readBuffer utils.ReadBuffer) (*BACnetSpecialEvent, error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("BACnetSpecialEvent"); pullErr != nil {
		return nil, pullErr
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	// Simple Field (period)
	if pullErr := readBuffer.PullContext("period"); pullErr != nil {
		return nil, pullErr
	}
	_period, _periodErr := BACnetSpecialEventPeriodParse(readBuffer)
	if _periodErr != nil {
		return nil, errors.Wrap(_periodErr, "Error parsing 'period' field")
	}
	period := CastBACnetSpecialEventPeriod(_period)
	if closeErr := readBuffer.CloseContext("period"); closeErr != nil {
		return nil, closeErr
	}

	// Simple Field (listOfTimeValues)
	if pullErr := readBuffer.PullContext("listOfTimeValues"); pullErr != nil {
		return nil, pullErr
	}
	_listOfTimeValues, _listOfTimeValuesErr := BACnetSpecialEventListOfTimeValuesParse(readBuffer, uint8(uint8(2)))
	if _listOfTimeValuesErr != nil {
		return nil, errors.Wrap(_listOfTimeValuesErr, "Error parsing 'listOfTimeValues' field")
	}
	listOfTimeValues := CastBACnetSpecialEventListOfTimeValues(_listOfTimeValues)
	if closeErr := readBuffer.CloseContext("listOfTimeValues"); closeErr != nil {
		return nil, closeErr
	}

	// Simple Field (eventPriority)
	if pullErr := readBuffer.PullContext("eventPriority"); pullErr != nil {
		return nil, pullErr
	}
	_eventPriority, _eventPriorityErr := BACnetContextTagParse(readBuffer, uint8(uint8(3)), BACnetDataType(BACnetDataType_UNSIGNED_INTEGER))
	if _eventPriorityErr != nil {
		return nil, errors.Wrap(_eventPriorityErr, "Error parsing 'eventPriority' field")
	}
	eventPriority := CastBACnetContextTagUnsignedInteger(_eventPriority)
	if closeErr := readBuffer.CloseContext("eventPriority"); closeErr != nil {
		return nil, closeErr
	}

	if closeErr := readBuffer.CloseContext("BACnetSpecialEvent"); closeErr != nil {
		return nil, closeErr
	}

	// Create the instance
	return NewBACnetSpecialEvent(period, listOfTimeValues, eventPriority), nil
}

func (m *BACnetSpecialEvent) Serialize(writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	if pushErr := writeBuffer.PushContext("BACnetSpecialEvent"); pushErr != nil {
		return pushErr
	}

	// Simple Field (period)
	if pushErr := writeBuffer.PushContext("period"); pushErr != nil {
		return pushErr
	}
	_periodErr := m.Period.Serialize(writeBuffer)
	if popErr := writeBuffer.PopContext("period"); popErr != nil {
		return popErr
	}
	if _periodErr != nil {
		return errors.Wrap(_periodErr, "Error serializing 'period' field")
	}

	// Simple Field (listOfTimeValues)
	if pushErr := writeBuffer.PushContext("listOfTimeValues"); pushErr != nil {
		return pushErr
	}
	_listOfTimeValuesErr := m.ListOfTimeValues.Serialize(writeBuffer)
	if popErr := writeBuffer.PopContext("listOfTimeValues"); popErr != nil {
		return popErr
	}
	if _listOfTimeValuesErr != nil {
		return errors.Wrap(_listOfTimeValuesErr, "Error serializing 'listOfTimeValues' field")
	}

	// Simple Field (eventPriority)
	if pushErr := writeBuffer.PushContext("eventPriority"); pushErr != nil {
		return pushErr
	}
	_eventPriorityErr := m.EventPriority.Serialize(writeBuffer)
	if popErr := writeBuffer.PopContext("eventPriority"); popErr != nil {
		return popErr
	}
	if _eventPriorityErr != nil {
		return errors.Wrap(_eventPriorityErr, "Error serializing 'eventPriority' field")
	}

	if popErr := writeBuffer.PopContext("BACnetSpecialEvent"); popErr != nil {
		return popErr
	}
	return nil
}

func (m *BACnetSpecialEvent) String() string {
	if m == nil {
		return "<nil>"
	}
	buffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := m.Serialize(buffer); err != nil {
		return err.Error()
	}
	return buffer.GetBox().String()
}
