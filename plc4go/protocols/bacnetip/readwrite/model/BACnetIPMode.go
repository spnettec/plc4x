/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// BACnetIPMode is an enum
type BACnetIPMode uint8

type IBACnetIPMode interface {
	Serialize(writeBuffer utils.WriteBuffer) error
}

const (
	BACnetIPMode_NORMAL  BACnetIPMode = 0
	BACnetIPMode_FOREIGN BACnetIPMode = 1
	BACnetIPMode_BBMD    BACnetIPMode = 2
)

var BACnetIPModeValues []BACnetIPMode

func init() {
	_ = errors.New
	BACnetIPModeValues = []BACnetIPMode{
		BACnetIPMode_NORMAL,
		BACnetIPMode_FOREIGN,
		BACnetIPMode_BBMD,
	}
}

func BACnetIPModeByValue(value uint8) BACnetIPMode {
	switch value {
	case 0:
		return BACnetIPMode_NORMAL
	case 1:
		return BACnetIPMode_FOREIGN
	case 2:
		return BACnetIPMode_BBMD
	}
	return 0
}

func BACnetIPModeByName(value string) (enum BACnetIPMode, ok bool) {
	ok = true
	switch value {
	case "NORMAL":
		enum = BACnetIPMode_NORMAL
	case "FOREIGN":
		enum = BACnetIPMode_FOREIGN
	case "BBMD":
		enum = BACnetIPMode_BBMD
	default:
		enum = 0
		ok = false
	}
	return
}

func BACnetIPModeKnows(value uint8) bool {
	for _, typeValue := range BACnetIPModeValues {
		if uint8(typeValue) == value {
			return true
		}
	}
	return false
}

func CastBACnetIPMode(structType interface{}) BACnetIPMode {
	castFunc := func(typ interface{}) BACnetIPMode {
		if sBACnetIPMode, ok := typ.(BACnetIPMode); ok {
			return sBACnetIPMode
		}
		return 0
	}
	return castFunc(structType)
}

func (m BACnetIPMode) GetLengthInBits() uint16 {
	return 8
}

func (m BACnetIPMode) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func BACnetIPModeParse(readBuffer utils.ReadBuffer) (BACnetIPMode, error) {
	val, err := readBuffer.ReadUint8("BACnetIPMode", 8)
	if err != nil {
		return 0, nil
	}
	return BACnetIPModeByValue(val), nil
}

func (e BACnetIPMode) Serialize(writeBuffer utils.WriteBuffer) error {
	return writeBuffer.WriteUint8("BACnetIPMode", 8, uint8(e), utils.WithAdditionalStringRepresentation(e.PLC4XEnumName()))
}

// PLC4XEnumName returns the name that is used in code to identify this enum
func (e BACnetIPMode) PLC4XEnumName() string {
	switch e {
	case BACnetIPMode_NORMAL:
		return "NORMAL"
	case BACnetIPMode_FOREIGN:
		return "FOREIGN"
	case BACnetIPMode_BBMD:
		return "BBMD"
	}
	return ""
}

func (e BACnetIPMode) String() string {
	return e.PLC4XEnumName()
}
