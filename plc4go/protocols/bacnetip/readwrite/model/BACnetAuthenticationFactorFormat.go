/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/spi/utils"
	"github.com/pkg/errors"
	"io"
)

// Code generated by code-generation. DO NOT EDIT.

// BACnetAuthenticationFactorFormat is the data-structure of this message
type BACnetAuthenticationFactorFormat struct {
	FormatType   *BACnetAuthenticationFactorTypeTagged
	VendorId     *BACnetVendorIdTagged
	VendorFormat *BACnetContextTagUnsignedInteger
}

// IBACnetAuthenticationFactorFormat is the corresponding interface of BACnetAuthenticationFactorFormat
type IBACnetAuthenticationFactorFormat interface {
	// GetFormatType returns FormatType (property field)
	GetFormatType() *BACnetAuthenticationFactorTypeTagged
	// GetVendorId returns VendorId (property field)
	GetVendorId() *BACnetVendorIdTagged
	// GetVendorFormat returns VendorFormat (property field)
	GetVendorFormat() *BACnetContextTagUnsignedInteger
	// GetLengthInBytes returns the length in bytes
	GetLengthInBytes() uint16
	// GetLengthInBits returns the length in bits
	GetLengthInBits() uint16
	// Serialize serializes this type
	Serialize(writeBuffer utils.WriteBuffer) error
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *BACnetAuthenticationFactorFormat) GetFormatType() *BACnetAuthenticationFactorTypeTagged {
	return m.FormatType
}

func (m *BACnetAuthenticationFactorFormat) GetVendorId() *BACnetVendorIdTagged {
	return m.VendorId
}

func (m *BACnetAuthenticationFactorFormat) GetVendorFormat() *BACnetContextTagUnsignedInteger {
	return m.VendorFormat
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewBACnetAuthenticationFactorFormat factory function for BACnetAuthenticationFactorFormat
func NewBACnetAuthenticationFactorFormat(formatType *BACnetAuthenticationFactorTypeTagged, vendorId *BACnetVendorIdTagged, vendorFormat *BACnetContextTagUnsignedInteger) *BACnetAuthenticationFactorFormat {
	return &BACnetAuthenticationFactorFormat{FormatType: formatType, VendorId: vendorId, VendorFormat: vendorFormat}
}

func CastBACnetAuthenticationFactorFormat(structType interface{}) *BACnetAuthenticationFactorFormat {
	if casted, ok := structType.(BACnetAuthenticationFactorFormat); ok {
		return &casted
	}
	if casted, ok := structType.(*BACnetAuthenticationFactorFormat); ok {
		return casted
	}
	return nil
}

func (m *BACnetAuthenticationFactorFormat) GetTypeName() string {
	return "BACnetAuthenticationFactorFormat"
}

func (m *BACnetAuthenticationFactorFormat) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *BACnetAuthenticationFactorFormat) GetLengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(0)

	// Simple field (formatType)
	lengthInBits += m.FormatType.GetLengthInBits()

	// Optional Field (vendorId)
	if m.VendorId != nil {
		lengthInBits += (*m.VendorId).GetLengthInBits()
	}

	// Optional Field (vendorFormat)
	if m.VendorFormat != nil {
		lengthInBits += (*m.VendorFormat).GetLengthInBits()
	}

	return lengthInBits
}

func (m *BACnetAuthenticationFactorFormat) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func BACnetAuthenticationFactorFormatParse(readBuffer utils.ReadBuffer) (*BACnetAuthenticationFactorFormat, error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("BACnetAuthenticationFactorFormat"); pullErr != nil {
		return nil, pullErr
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	// Simple Field (formatType)
	if pullErr := readBuffer.PullContext("formatType"); pullErr != nil {
		return nil, pullErr
	}
	_formatType, _formatTypeErr := BACnetAuthenticationFactorTypeTaggedParse(readBuffer, uint8(uint8(0)), TagClass(TagClass_CONTEXT_SPECIFIC_TAGS))
	if _formatTypeErr != nil {
		return nil, errors.Wrap(_formatTypeErr, "Error parsing 'formatType' field")
	}
	formatType := CastBACnetAuthenticationFactorTypeTagged(_formatType)
	if closeErr := readBuffer.CloseContext("formatType"); closeErr != nil {
		return nil, closeErr
	}

	// Optional Field (vendorId) (Can be skipped, if a given expression evaluates to false)
	var vendorId *BACnetVendorIdTagged = nil
	{
		currentPos = positionAware.GetPos()
		if pullErr := readBuffer.PullContext("vendorId"); pullErr != nil {
			return nil, pullErr
		}
		_val, _err := BACnetVendorIdTaggedParse(readBuffer, uint8(1), TagClass_CONTEXT_SPECIFIC_TAGS)
		switch {
		case errors.Is(_err, utils.ParseAssertError{}) || errors.Is(_err, io.EOF):
			readBuffer.Reset(currentPos)
		case _err != nil:
			return nil, errors.Wrap(_err, "Error parsing 'vendorId' field")
		default:
			vendorId = CastBACnetVendorIdTagged(_val)
			if closeErr := readBuffer.CloseContext("vendorId"); closeErr != nil {
				return nil, closeErr
			}
		}
	}

	// Optional Field (vendorFormat) (Can be skipped, if a given expression evaluates to false)
	var vendorFormat *BACnetContextTagUnsignedInteger = nil
	{
		currentPos = positionAware.GetPos()
		if pullErr := readBuffer.PullContext("vendorFormat"); pullErr != nil {
			return nil, pullErr
		}
		_val, _err := BACnetContextTagParse(readBuffer, uint8(2), BACnetDataType_UNSIGNED_INTEGER)
		switch {
		case errors.Is(_err, utils.ParseAssertError{}) || errors.Is(_err, io.EOF):
			readBuffer.Reset(currentPos)
		case _err != nil:
			return nil, errors.Wrap(_err, "Error parsing 'vendorFormat' field")
		default:
			vendorFormat = CastBACnetContextTagUnsignedInteger(_val)
			if closeErr := readBuffer.CloseContext("vendorFormat"); closeErr != nil {
				return nil, closeErr
			}
		}
	}

	if closeErr := readBuffer.CloseContext("BACnetAuthenticationFactorFormat"); closeErr != nil {
		return nil, closeErr
	}

	// Create the instance
	return NewBACnetAuthenticationFactorFormat(formatType, vendorId, vendorFormat), nil
}

func (m *BACnetAuthenticationFactorFormat) Serialize(writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	if pushErr := writeBuffer.PushContext("BACnetAuthenticationFactorFormat"); pushErr != nil {
		return pushErr
	}

	// Simple Field (formatType)
	if pushErr := writeBuffer.PushContext("formatType"); pushErr != nil {
		return pushErr
	}
	_formatTypeErr := m.FormatType.Serialize(writeBuffer)
	if popErr := writeBuffer.PopContext("formatType"); popErr != nil {
		return popErr
	}
	if _formatTypeErr != nil {
		return errors.Wrap(_formatTypeErr, "Error serializing 'formatType' field")
	}

	// Optional Field (vendorId) (Can be skipped, if the value is null)
	var vendorId *BACnetVendorIdTagged = nil
	if m.VendorId != nil {
		if pushErr := writeBuffer.PushContext("vendorId"); pushErr != nil {
			return pushErr
		}
		vendorId = m.VendorId
		_vendorIdErr := vendorId.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("vendorId"); popErr != nil {
			return popErr
		}
		if _vendorIdErr != nil {
			return errors.Wrap(_vendorIdErr, "Error serializing 'vendorId' field")
		}
	}

	// Optional Field (vendorFormat) (Can be skipped, if the value is null)
	var vendorFormat *BACnetContextTagUnsignedInteger = nil
	if m.VendorFormat != nil {
		if pushErr := writeBuffer.PushContext("vendorFormat"); pushErr != nil {
			return pushErr
		}
		vendorFormat = m.VendorFormat
		_vendorFormatErr := vendorFormat.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("vendorFormat"); popErr != nil {
			return popErr
		}
		if _vendorFormatErr != nil {
			return errors.Wrap(_vendorFormatErr, "Error serializing 'vendorFormat' field")
		}
	}

	if popErr := writeBuffer.PopContext("BACnetAuthenticationFactorFormat"); popErr != nil {
		return popErr
	}
	return nil
}

func (m *BACnetAuthenticationFactorFormat) String() string {
	if m == nil {
		return "<nil>"
	}
	buffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := m.Serialize(buffer); err != nil {
		return err.Error()
	}
	return buffer.GetBox().String()
}
