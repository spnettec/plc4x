/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// BACnetEventMessageTextsConfig is the data-structure of this message
type BACnetEventMessageTextsConfig struct {
	ToOffnormalTextConfig *BACnetApplicationTagCharacterString
	ToFaultTextConfig     *BACnetApplicationTagCharacterString
	ToNormalTextConfig    *BACnetApplicationTagCharacterString
}

// IBACnetEventMessageTextsConfig is the corresponding interface of BACnetEventMessageTextsConfig
type IBACnetEventMessageTextsConfig interface {
	// GetToOffnormalTextConfig returns ToOffnormalTextConfig (property field)
	GetToOffnormalTextConfig() *BACnetApplicationTagCharacterString
	// GetToFaultTextConfig returns ToFaultTextConfig (property field)
	GetToFaultTextConfig() *BACnetApplicationTagCharacterString
	// GetToNormalTextConfig returns ToNormalTextConfig (property field)
	GetToNormalTextConfig() *BACnetApplicationTagCharacterString
	// GetLengthInBytes returns the length in bytes
	GetLengthInBytes() uint16
	// GetLengthInBits returns the length in bits
	GetLengthInBits() uint16
	// Serialize serializes this type
	Serialize(writeBuffer utils.WriteBuffer) error
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *BACnetEventMessageTextsConfig) GetToOffnormalTextConfig() *BACnetApplicationTagCharacterString {
	return m.ToOffnormalTextConfig
}

func (m *BACnetEventMessageTextsConfig) GetToFaultTextConfig() *BACnetApplicationTagCharacterString {
	return m.ToFaultTextConfig
}

func (m *BACnetEventMessageTextsConfig) GetToNormalTextConfig() *BACnetApplicationTagCharacterString {
	return m.ToNormalTextConfig
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewBACnetEventMessageTextsConfig factory function for BACnetEventMessageTextsConfig
func NewBACnetEventMessageTextsConfig(toOffnormalTextConfig *BACnetApplicationTagCharacterString, toFaultTextConfig *BACnetApplicationTagCharacterString, toNormalTextConfig *BACnetApplicationTagCharacterString) *BACnetEventMessageTextsConfig {
	return &BACnetEventMessageTextsConfig{ToOffnormalTextConfig: toOffnormalTextConfig, ToFaultTextConfig: toFaultTextConfig, ToNormalTextConfig: toNormalTextConfig}
}

func CastBACnetEventMessageTextsConfig(structType interface{}) *BACnetEventMessageTextsConfig {
	if casted, ok := structType.(BACnetEventMessageTextsConfig); ok {
		return &casted
	}
	if casted, ok := structType.(*BACnetEventMessageTextsConfig); ok {
		return casted
	}
	return nil
}

func (m *BACnetEventMessageTextsConfig) GetTypeName() string {
	return "BACnetEventMessageTextsConfig"
}

func (m *BACnetEventMessageTextsConfig) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *BACnetEventMessageTextsConfig) GetLengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(0)

	// Simple field (toOffnormalTextConfig)
	lengthInBits += m.ToOffnormalTextConfig.GetLengthInBits()

	// Simple field (toFaultTextConfig)
	lengthInBits += m.ToFaultTextConfig.GetLengthInBits()

	// Simple field (toNormalTextConfig)
	lengthInBits += m.ToNormalTextConfig.GetLengthInBits()

	return lengthInBits
}

func (m *BACnetEventMessageTextsConfig) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func BACnetEventMessageTextsConfigParse(readBuffer utils.ReadBuffer) (*BACnetEventMessageTextsConfig, error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("BACnetEventMessageTextsConfig"); pullErr != nil {
		return nil, pullErr
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	// Simple Field (toOffnormalTextConfig)
	if pullErr := readBuffer.PullContext("toOffnormalTextConfig"); pullErr != nil {
		return nil, pullErr
	}
	_toOffnormalTextConfig, _toOffnormalTextConfigErr := BACnetApplicationTagParse(readBuffer)
	if _toOffnormalTextConfigErr != nil {
		return nil, errors.Wrap(_toOffnormalTextConfigErr, "Error parsing 'toOffnormalTextConfig' field")
	}
	toOffnormalTextConfig := CastBACnetApplicationTagCharacterString(_toOffnormalTextConfig)
	if closeErr := readBuffer.CloseContext("toOffnormalTextConfig"); closeErr != nil {
		return nil, closeErr
	}

	// Simple Field (toFaultTextConfig)
	if pullErr := readBuffer.PullContext("toFaultTextConfig"); pullErr != nil {
		return nil, pullErr
	}
	_toFaultTextConfig, _toFaultTextConfigErr := BACnetApplicationTagParse(readBuffer)
	if _toFaultTextConfigErr != nil {
		return nil, errors.Wrap(_toFaultTextConfigErr, "Error parsing 'toFaultTextConfig' field")
	}
	toFaultTextConfig := CastBACnetApplicationTagCharacterString(_toFaultTextConfig)
	if closeErr := readBuffer.CloseContext("toFaultTextConfig"); closeErr != nil {
		return nil, closeErr
	}

	// Simple Field (toNormalTextConfig)
	if pullErr := readBuffer.PullContext("toNormalTextConfig"); pullErr != nil {
		return nil, pullErr
	}
	_toNormalTextConfig, _toNormalTextConfigErr := BACnetApplicationTagParse(readBuffer)
	if _toNormalTextConfigErr != nil {
		return nil, errors.Wrap(_toNormalTextConfigErr, "Error parsing 'toNormalTextConfig' field")
	}
	toNormalTextConfig := CastBACnetApplicationTagCharacterString(_toNormalTextConfig)
	if closeErr := readBuffer.CloseContext("toNormalTextConfig"); closeErr != nil {
		return nil, closeErr
	}

	if closeErr := readBuffer.CloseContext("BACnetEventMessageTextsConfig"); closeErr != nil {
		return nil, closeErr
	}

	// Create the instance
	return NewBACnetEventMessageTextsConfig(toOffnormalTextConfig, toFaultTextConfig, toNormalTextConfig), nil
}

func (m *BACnetEventMessageTextsConfig) Serialize(writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	if pushErr := writeBuffer.PushContext("BACnetEventMessageTextsConfig"); pushErr != nil {
		return pushErr
	}

	// Simple Field (toOffnormalTextConfig)
	if pushErr := writeBuffer.PushContext("toOffnormalTextConfig"); pushErr != nil {
		return pushErr
	}
	_toOffnormalTextConfigErr := m.ToOffnormalTextConfig.Serialize(writeBuffer)
	if popErr := writeBuffer.PopContext("toOffnormalTextConfig"); popErr != nil {
		return popErr
	}
	if _toOffnormalTextConfigErr != nil {
		return errors.Wrap(_toOffnormalTextConfigErr, "Error serializing 'toOffnormalTextConfig' field")
	}

	// Simple Field (toFaultTextConfig)
	if pushErr := writeBuffer.PushContext("toFaultTextConfig"); pushErr != nil {
		return pushErr
	}
	_toFaultTextConfigErr := m.ToFaultTextConfig.Serialize(writeBuffer)
	if popErr := writeBuffer.PopContext("toFaultTextConfig"); popErr != nil {
		return popErr
	}
	if _toFaultTextConfigErr != nil {
		return errors.Wrap(_toFaultTextConfigErr, "Error serializing 'toFaultTextConfig' field")
	}

	// Simple Field (toNormalTextConfig)
	if pushErr := writeBuffer.PushContext("toNormalTextConfig"); pushErr != nil {
		return pushErr
	}
	_toNormalTextConfigErr := m.ToNormalTextConfig.Serialize(writeBuffer)
	if popErr := writeBuffer.PopContext("toNormalTextConfig"); popErr != nil {
		return popErr
	}
	if _toNormalTextConfigErr != nil {
		return errors.Wrap(_toNormalTextConfigErr, "Error serializing 'toNormalTextConfig' field")
	}

	if popErr := writeBuffer.PopContext("BACnetEventMessageTextsConfig"); popErr != nil {
		return popErr
	}
	return nil
}

func (m *BACnetEventMessageTextsConfig) String() string {
	if m == nil {
		return "<nil>"
	}
	buffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := m.Serialize(buffer); err != nil {
		return err.Error()
	}
	return buffer.GetBox().String()
}
