/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// BACnetCalendarEntryDate is the data-structure of this message
type BACnetCalendarEntryDate struct {
	*BACnetCalendarEntry
	DateValue *BACnetContextTagDate
}

// IBACnetCalendarEntryDate is the corresponding interface of BACnetCalendarEntryDate
type IBACnetCalendarEntryDate interface {
	IBACnetCalendarEntry
	// GetDateValue returns DateValue (property field)
	GetDateValue() *BACnetContextTagDate
	// GetLengthInBytes returns the length in bytes
	GetLengthInBytes() uint16
	// GetLengthInBits returns the length in bits
	GetLengthInBits() uint16
	// Serialize serializes this type
	Serialize(writeBuffer utils.WriteBuffer) error
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for discriminator values.
///////////////////////

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

func (m *BACnetCalendarEntryDate) InitializeParent(parent *BACnetCalendarEntry, peekedTagHeader *BACnetTagHeader) {
	m.BACnetCalendarEntry.PeekedTagHeader = peekedTagHeader
}

func (m *BACnetCalendarEntryDate) GetParent() *BACnetCalendarEntry {
	return m.BACnetCalendarEntry
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *BACnetCalendarEntryDate) GetDateValue() *BACnetContextTagDate {
	return m.DateValue
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewBACnetCalendarEntryDate factory function for BACnetCalendarEntryDate
func NewBACnetCalendarEntryDate(dateValue *BACnetContextTagDate, peekedTagHeader *BACnetTagHeader) *BACnetCalendarEntryDate {
	_result := &BACnetCalendarEntryDate{
		DateValue:           dateValue,
		BACnetCalendarEntry: NewBACnetCalendarEntry(peekedTagHeader),
	}
	_result.Child = _result
	return _result
}

func CastBACnetCalendarEntryDate(structType interface{}) *BACnetCalendarEntryDate {
	if casted, ok := structType.(BACnetCalendarEntryDate); ok {
		return &casted
	}
	if casted, ok := structType.(*BACnetCalendarEntryDate); ok {
		return casted
	}
	if casted, ok := structType.(BACnetCalendarEntry); ok {
		return CastBACnetCalendarEntryDate(casted.Child)
	}
	if casted, ok := structType.(*BACnetCalendarEntry); ok {
		return CastBACnetCalendarEntryDate(casted.Child)
	}
	return nil
}

func (m *BACnetCalendarEntryDate) GetTypeName() string {
	return "BACnetCalendarEntryDate"
}

func (m *BACnetCalendarEntryDate) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *BACnetCalendarEntryDate) GetLengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(m.GetParentLengthInBits())

	// Simple field (dateValue)
	lengthInBits += m.DateValue.GetLengthInBits()

	return lengthInBits
}

func (m *BACnetCalendarEntryDate) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func BACnetCalendarEntryDateParse(readBuffer utils.ReadBuffer) (*BACnetCalendarEntryDate, error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("BACnetCalendarEntryDate"); pullErr != nil {
		return nil, pullErr
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	// Simple Field (dateValue)
	if pullErr := readBuffer.PullContext("dateValue"); pullErr != nil {
		return nil, pullErr
	}
	_dateValue, _dateValueErr := BACnetContextTagParse(readBuffer, uint8(uint8(0)), BACnetDataType(BACnetDataType_DATE))
	if _dateValueErr != nil {
		return nil, errors.Wrap(_dateValueErr, "Error parsing 'dateValue' field")
	}
	dateValue := CastBACnetContextTagDate(_dateValue)
	if closeErr := readBuffer.CloseContext("dateValue"); closeErr != nil {
		return nil, closeErr
	}

	if closeErr := readBuffer.CloseContext("BACnetCalendarEntryDate"); closeErr != nil {
		return nil, closeErr
	}

	// Create a partially initialized instance
	_child := &BACnetCalendarEntryDate{
		DateValue:           CastBACnetContextTagDate(dateValue),
		BACnetCalendarEntry: &BACnetCalendarEntry{},
	}
	_child.BACnetCalendarEntry.Child = _child
	return _child, nil
}

func (m *BACnetCalendarEntryDate) Serialize(writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	ser := func() error {
		if pushErr := writeBuffer.PushContext("BACnetCalendarEntryDate"); pushErr != nil {
			return pushErr
		}

		// Simple Field (dateValue)
		if pushErr := writeBuffer.PushContext("dateValue"); pushErr != nil {
			return pushErr
		}
		_dateValueErr := m.DateValue.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("dateValue"); popErr != nil {
			return popErr
		}
		if _dateValueErr != nil {
			return errors.Wrap(_dateValueErr, "Error serializing 'dateValue' field")
		}

		if popErr := writeBuffer.PopContext("BACnetCalendarEntryDate"); popErr != nil {
			return popErr
		}
		return nil
	}
	return m.SerializeParent(writeBuffer, m, ser)
}

func (m *BACnetCalendarEntryDate) String() string {
	if m == nil {
		return "<nil>"
	}
	buffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := m.Serialize(buffer); err != nil {
		return err.Error()
	}
	return buffer.GetBox().String()
}
