/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/spi/utils"
	"github.com/pkg/errors"
	"github.com/rs/zerolog/log"
)

// Code generated by code-generation. DO NOT EDIT.

// SALCommandTypeContainer is an enum
type SALCommandTypeContainer uint8

type ISALCommandTypeContainer interface {
	CommandType() SALCommandType
	Serialize(writeBuffer utils.WriteBuffer) error
}

const (
	SALCommandTypeContainer_SALCommandOff                       SALCommandTypeContainer = 0x01
	SALCommandTypeContainer_SALCommandOn                        SALCommandTypeContainer = 0x79
	SALCommandTypeContainer_SALCommandRampToLevel_Instantaneous SALCommandTypeContainer = 0x02
	SALCommandTypeContainer_SALCommandRampToLevel_4Second       SALCommandTypeContainer = 0x0A
	SALCommandTypeContainer_SALCommandRampToLevel_8Second       SALCommandTypeContainer = 0x12
	SALCommandTypeContainer_SALCommandRampToLevel_12Second      SALCommandTypeContainer = 0x1A
	SALCommandTypeContainer_SALCommandRampToLevel_20Second      SALCommandTypeContainer = 0x22
	SALCommandTypeContainer_SALCommandRampToLevel_30Second      SALCommandTypeContainer = 0x2A
	SALCommandTypeContainer_SALCommandRampToLevel_40Second      SALCommandTypeContainer = 0x32
	SALCommandTypeContainer_SALCommandRampToLevel_60Second      SALCommandTypeContainer = 0x3A
	SALCommandTypeContainer_SALCommandRampToLevel_90Second      SALCommandTypeContainer = 0x42
	SALCommandTypeContainer_SALCommandRampToLevel_120Second     SALCommandTypeContainer = 0x4A
	SALCommandTypeContainer_SALCommandRampToLevel_180Second     SALCommandTypeContainer = 0x52
	SALCommandTypeContainer_SALCommandRampToLevel_300Second     SALCommandTypeContainer = 0x5A
	SALCommandTypeContainer_SALCommandRampToLevel_420Second     SALCommandTypeContainer = 0x62
	SALCommandTypeContainer_SALCommandRampToLevel_600Second     SALCommandTypeContainer = 0x6A
	SALCommandTypeContainer_SALCommandRampToLevel_900Second     SALCommandTypeContainer = 0x72
	SALCommandTypeContainer_SALCommandRampToLevel_1020Second    SALCommandTypeContainer = 0x7A
	SALCommandTypeContainer_SALCommandTerminateRamp             SALCommandTypeContainer = 0x09
)

var SALCommandTypeContainerValues []SALCommandTypeContainer

func init() {
	_ = errors.New
	SALCommandTypeContainerValues = []SALCommandTypeContainer{
		SALCommandTypeContainer_SALCommandOff,
		SALCommandTypeContainer_SALCommandOn,
		SALCommandTypeContainer_SALCommandRampToLevel_Instantaneous,
		SALCommandTypeContainer_SALCommandRampToLevel_4Second,
		SALCommandTypeContainer_SALCommandRampToLevel_8Second,
		SALCommandTypeContainer_SALCommandRampToLevel_12Second,
		SALCommandTypeContainer_SALCommandRampToLevel_20Second,
		SALCommandTypeContainer_SALCommandRampToLevel_30Second,
		SALCommandTypeContainer_SALCommandRampToLevel_40Second,
		SALCommandTypeContainer_SALCommandRampToLevel_60Second,
		SALCommandTypeContainer_SALCommandRampToLevel_90Second,
		SALCommandTypeContainer_SALCommandRampToLevel_120Second,
		SALCommandTypeContainer_SALCommandRampToLevel_180Second,
		SALCommandTypeContainer_SALCommandRampToLevel_300Second,
		SALCommandTypeContainer_SALCommandRampToLevel_420Second,
		SALCommandTypeContainer_SALCommandRampToLevel_600Second,
		SALCommandTypeContainer_SALCommandRampToLevel_900Second,
		SALCommandTypeContainer_SALCommandRampToLevel_1020Second,
		SALCommandTypeContainer_SALCommandTerminateRamp,
	}
}

func (e SALCommandTypeContainer) CommandType() SALCommandType {
	switch e {
	case 0x01:
		{ /* '0x01' */
			return SALCommandType_OFF
		}
	case 0x02:
		{ /* '0x02' */
			return SALCommandType_RAMP_TO_LEVEL
		}
	case 0x09:
		{ /* '0x09' */
			return SALCommandType_TERMINATE_RAMP
		}
	case 0x0A:
		{ /* '0x0A' */
			return SALCommandType_RAMP_TO_LEVEL
		}
	case 0x12:
		{ /* '0x12' */
			return SALCommandType_RAMP_TO_LEVEL
		}
	case 0x1A:
		{ /* '0x1A' */
			return SALCommandType_RAMP_TO_LEVEL
		}
	case 0x22:
		{ /* '0x22' */
			return SALCommandType_RAMP_TO_LEVEL
		}
	case 0x2A:
		{ /* '0x2A' */
			return SALCommandType_RAMP_TO_LEVEL
		}
	case 0x32:
		{ /* '0x32' */
			return SALCommandType_RAMP_TO_LEVEL
		}
	case 0x3A:
		{ /* '0x3A' */
			return SALCommandType_RAMP_TO_LEVEL
		}
	case 0x42:
		{ /* '0x42' */
			return SALCommandType_RAMP_TO_LEVEL
		}
	case 0x4A:
		{ /* '0x4A' */
			return SALCommandType_RAMP_TO_LEVEL
		}
	case 0x52:
		{ /* '0x52' */
			return SALCommandType_RAMP_TO_LEVEL
		}
	case 0x5A:
		{ /* '0x5A' */
			return SALCommandType_RAMP_TO_LEVEL
		}
	case 0x62:
		{ /* '0x62' */
			return SALCommandType_RAMP_TO_LEVEL
		}
	case 0x6A:
		{ /* '0x6A' */
			return SALCommandType_RAMP_TO_LEVEL
		}
	case 0x72:
		{ /* '0x72' */
			return SALCommandType_RAMP_TO_LEVEL
		}
	case 0x79:
		{ /* '0x79' */
			return SALCommandType_ON
		}
	case 0x7A:
		{ /* '0x7A' */
			return SALCommandType_RAMP_TO_LEVEL
		}
	default:
		{
			return 0
		}
	}
}

func SALCommandTypeContainerFirstEnumForFieldCommandType(value SALCommandType) (SALCommandTypeContainer, error) {
	for _, sizeValue := range SALCommandTypeContainerValues {
		if sizeValue.CommandType() == value {
			return sizeValue, nil
		}
	}
	return 0, errors.Errorf("enum for %v describing CommandType not found", value)
}
func SALCommandTypeContainerByValue(value uint8) (enum SALCommandTypeContainer, ok bool) {
	switch value {
	case 0x01:
		return SALCommandTypeContainer_SALCommandOff, true
	case 0x02:
		return SALCommandTypeContainer_SALCommandRampToLevel_Instantaneous, true
	case 0x09:
		return SALCommandTypeContainer_SALCommandTerminateRamp, true
	case 0x0A:
		return SALCommandTypeContainer_SALCommandRampToLevel_4Second, true
	case 0x12:
		return SALCommandTypeContainer_SALCommandRampToLevel_8Second, true
	case 0x1A:
		return SALCommandTypeContainer_SALCommandRampToLevel_12Second, true
	case 0x22:
		return SALCommandTypeContainer_SALCommandRampToLevel_20Second, true
	case 0x2A:
		return SALCommandTypeContainer_SALCommandRampToLevel_30Second, true
	case 0x32:
		return SALCommandTypeContainer_SALCommandRampToLevel_40Second, true
	case 0x3A:
		return SALCommandTypeContainer_SALCommandRampToLevel_60Second, true
	case 0x42:
		return SALCommandTypeContainer_SALCommandRampToLevel_90Second, true
	case 0x4A:
		return SALCommandTypeContainer_SALCommandRampToLevel_120Second, true
	case 0x52:
		return SALCommandTypeContainer_SALCommandRampToLevel_180Second, true
	case 0x5A:
		return SALCommandTypeContainer_SALCommandRampToLevel_300Second, true
	case 0x62:
		return SALCommandTypeContainer_SALCommandRampToLevel_420Second, true
	case 0x6A:
		return SALCommandTypeContainer_SALCommandRampToLevel_600Second, true
	case 0x72:
		return SALCommandTypeContainer_SALCommandRampToLevel_900Second, true
	case 0x79:
		return SALCommandTypeContainer_SALCommandOn, true
	case 0x7A:
		return SALCommandTypeContainer_SALCommandRampToLevel_1020Second, true
	}
	return 0, false
}

func SALCommandTypeContainerByName(value string) (enum SALCommandTypeContainer, ok bool) {
	switch value {
	case "SALCommandOff":
		return SALCommandTypeContainer_SALCommandOff, true
	case "SALCommandRampToLevel_Instantaneous":
		return SALCommandTypeContainer_SALCommandRampToLevel_Instantaneous, true
	case "SALCommandTerminateRamp":
		return SALCommandTypeContainer_SALCommandTerminateRamp, true
	case "SALCommandRampToLevel_4Second":
		return SALCommandTypeContainer_SALCommandRampToLevel_4Second, true
	case "SALCommandRampToLevel_8Second":
		return SALCommandTypeContainer_SALCommandRampToLevel_8Second, true
	case "SALCommandRampToLevel_12Second":
		return SALCommandTypeContainer_SALCommandRampToLevel_12Second, true
	case "SALCommandRampToLevel_20Second":
		return SALCommandTypeContainer_SALCommandRampToLevel_20Second, true
	case "SALCommandRampToLevel_30Second":
		return SALCommandTypeContainer_SALCommandRampToLevel_30Second, true
	case "SALCommandRampToLevel_40Second":
		return SALCommandTypeContainer_SALCommandRampToLevel_40Second, true
	case "SALCommandRampToLevel_60Second":
		return SALCommandTypeContainer_SALCommandRampToLevel_60Second, true
	case "SALCommandRampToLevel_90Second":
		return SALCommandTypeContainer_SALCommandRampToLevel_90Second, true
	case "SALCommandRampToLevel_120Second":
		return SALCommandTypeContainer_SALCommandRampToLevel_120Second, true
	case "SALCommandRampToLevel_180Second":
		return SALCommandTypeContainer_SALCommandRampToLevel_180Second, true
	case "SALCommandRampToLevel_300Second":
		return SALCommandTypeContainer_SALCommandRampToLevel_300Second, true
	case "SALCommandRampToLevel_420Second":
		return SALCommandTypeContainer_SALCommandRampToLevel_420Second, true
	case "SALCommandRampToLevel_600Second":
		return SALCommandTypeContainer_SALCommandRampToLevel_600Second, true
	case "SALCommandRampToLevel_900Second":
		return SALCommandTypeContainer_SALCommandRampToLevel_900Second, true
	case "SALCommandOn":
		return SALCommandTypeContainer_SALCommandOn, true
	case "SALCommandRampToLevel_1020Second":
		return SALCommandTypeContainer_SALCommandRampToLevel_1020Second, true
	}
	return 0, false
}

func SALCommandTypeContainerKnows(value uint8) bool {
	for _, typeValue := range SALCommandTypeContainerValues {
		if uint8(typeValue) == value {
			return true
		}
	}
	return false
}

func CastSALCommandTypeContainer(structType interface{}) SALCommandTypeContainer {
	castFunc := func(typ interface{}) SALCommandTypeContainer {
		if sSALCommandTypeContainer, ok := typ.(SALCommandTypeContainer); ok {
			return sSALCommandTypeContainer
		}
		return 0
	}
	return castFunc(structType)
}

func (m SALCommandTypeContainer) GetLengthInBits() uint16 {
	return 8
}

func (m SALCommandTypeContainer) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func SALCommandTypeContainerParse(readBuffer utils.ReadBuffer) (SALCommandTypeContainer, error) {
	val, err := readBuffer.ReadUint8("SALCommandTypeContainer", 8)
	if err != nil {
		return 0, errors.Wrap(err, "error reading SALCommandTypeContainer")
	}
	if enum, ok := SALCommandTypeContainerByValue(val); !ok {
		log.Debug().Msgf("no value %x found for RequestType", val)
		return SALCommandTypeContainer(val), nil
	} else {
		return enum, nil
	}
}

func (e SALCommandTypeContainer) Serialize(writeBuffer utils.WriteBuffer) error {
	return writeBuffer.WriteUint8("SALCommandTypeContainer", 8, uint8(e), utils.WithAdditionalStringRepresentation(e.PLC4XEnumName()))
}

// PLC4XEnumName returns the name that is used in code to identify this enum
func (e SALCommandTypeContainer) PLC4XEnumName() string {
	switch e {
	case SALCommandTypeContainer_SALCommandOff:
		return "SALCommandOff"
	case SALCommandTypeContainer_SALCommandRampToLevel_Instantaneous:
		return "SALCommandRampToLevel_Instantaneous"
	case SALCommandTypeContainer_SALCommandTerminateRamp:
		return "SALCommandTerminateRamp"
	case SALCommandTypeContainer_SALCommandRampToLevel_4Second:
		return "SALCommandRampToLevel_4Second"
	case SALCommandTypeContainer_SALCommandRampToLevel_8Second:
		return "SALCommandRampToLevel_8Second"
	case SALCommandTypeContainer_SALCommandRampToLevel_12Second:
		return "SALCommandRampToLevel_12Second"
	case SALCommandTypeContainer_SALCommandRampToLevel_20Second:
		return "SALCommandRampToLevel_20Second"
	case SALCommandTypeContainer_SALCommandRampToLevel_30Second:
		return "SALCommandRampToLevel_30Second"
	case SALCommandTypeContainer_SALCommandRampToLevel_40Second:
		return "SALCommandRampToLevel_40Second"
	case SALCommandTypeContainer_SALCommandRampToLevel_60Second:
		return "SALCommandRampToLevel_60Second"
	case SALCommandTypeContainer_SALCommandRampToLevel_90Second:
		return "SALCommandRampToLevel_90Second"
	case SALCommandTypeContainer_SALCommandRampToLevel_120Second:
		return "SALCommandRampToLevel_120Second"
	case SALCommandTypeContainer_SALCommandRampToLevel_180Second:
		return "SALCommandRampToLevel_180Second"
	case SALCommandTypeContainer_SALCommandRampToLevel_300Second:
		return "SALCommandRampToLevel_300Second"
	case SALCommandTypeContainer_SALCommandRampToLevel_420Second:
		return "SALCommandRampToLevel_420Second"
	case SALCommandTypeContainer_SALCommandRampToLevel_600Second:
		return "SALCommandRampToLevel_600Second"
	case SALCommandTypeContainer_SALCommandRampToLevel_900Second:
		return "SALCommandRampToLevel_900Second"
	case SALCommandTypeContainer_SALCommandOn:
		return "SALCommandOn"
	case SALCommandTypeContainer_SALCommandRampToLevel_1020Second:
		return "SALCommandRampToLevel_1020Second"
	}
	return ""
}

func (e SALCommandTypeContainer) String() string {
	return e.PLC4XEnumName()
}
