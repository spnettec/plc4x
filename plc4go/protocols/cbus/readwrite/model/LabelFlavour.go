/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/spi/utils"
	"github.com/pkg/errors"
	"github.com/rs/zerolog/log"
)

// Code generated by code-generation. DO NOT EDIT.

// LabelFlavour is an enum
type LabelFlavour uint8

type ILabelFlavour interface {
	Serialize(writeBuffer utils.WriteBuffer) error
}

const (
	LabelFlavour_FLAVOUR_1 LabelFlavour = 0
	LabelFlavour_FLAVOUR_2 LabelFlavour = 1
	LabelFlavour_FLAVOUR_3 LabelFlavour = 2
	LabelFlavour_FLAVOUR_4 LabelFlavour = 3
)

var LabelFlavourValues []LabelFlavour

func init() {
	_ = errors.New
	LabelFlavourValues = []LabelFlavour{
		LabelFlavour_FLAVOUR_1,
		LabelFlavour_FLAVOUR_2,
		LabelFlavour_FLAVOUR_3,
		LabelFlavour_FLAVOUR_4,
	}
}

func LabelFlavourByValue(value uint8) (enum LabelFlavour, ok bool) {
	switch value {
	case 0:
		return LabelFlavour_FLAVOUR_1, true
	case 1:
		return LabelFlavour_FLAVOUR_2, true
	case 2:
		return LabelFlavour_FLAVOUR_3, true
	case 3:
		return LabelFlavour_FLAVOUR_4, true
	}
	return 0, false
}

func LabelFlavourByName(value string) (enum LabelFlavour, ok bool) {
	switch value {
	case "FLAVOUR_1":
		return LabelFlavour_FLAVOUR_1, true
	case "FLAVOUR_2":
		return LabelFlavour_FLAVOUR_2, true
	case "FLAVOUR_3":
		return LabelFlavour_FLAVOUR_3, true
	case "FLAVOUR_4":
		return LabelFlavour_FLAVOUR_4, true
	}
	return 0, false
}

func LabelFlavourKnows(value uint8) bool {
	for _, typeValue := range LabelFlavourValues {
		if uint8(typeValue) == value {
			return true
		}
	}
	return false
}

func CastLabelFlavour(structType interface{}) LabelFlavour {
	castFunc := func(typ interface{}) LabelFlavour {
		if sLabelFlavour, ok := typ.(LabelFlavour); ok {
			return sLabelFlavour
		}
		return 0
	}
	return castFunc(structType)
}

func (m LabelFlavour) GetLengthInBits() uint16 {
	return 2
}

func (m LabelFlavour) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func LabelFlavourParse(readBuffer utils.ReadBuffer) (LabelFlavour, error) {
	val, err := readBuffer.ReadUint8("LabelFlavour", 2)
	if err != nil {
		return 0, errors.Wrap(err, "error reading LabelFlavour")
	}
	if enum, ok := LabelFlavourByValue(val); !ok {
		log.Debug().Msgf("no value %x found for RequestType", val)
		return LabelFlavour(val), nil
	} else {
		return enum, nil
	}
}

func (e LabelFlavour) Serialize(writeBuffer utils.WriteBuffer) error {
	return writeBuffer.WriteUint8("LabelFlavour", 2, uint8(e), utils.WithAdditionalStringRepresentation(e.PLC4XEnumName()))
}

// PLC4XEnumName returns the name that is used in code to identify this enum
func (e LabelFlavour) PLC4XEnumName() string {
	switch e {
	case LabelFlavour_FLAVOUR_1:
		return "FLAVOUR_1"
	case LabelFlavour_FLAVOUR_2:
		return "FLAVOUR_2"
	case LabelFlavour_FLAVOUR_3:
		return "FLAVOUR_3"
	case LabelFlavour_FLAVOUR_4:
		return "FLAVOUR_4"
	}
	return ""
}

func (e LabelFlavour) String() string {
	return e.PLC4XEnumName()
}
