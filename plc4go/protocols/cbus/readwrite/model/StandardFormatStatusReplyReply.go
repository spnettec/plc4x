/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// StandardFormatStatusReplyReply is the corresponding interface of StandardFormatStatusReplyReply
type StandardFormatStatusReplyReply interface {
	utils.LengthAware
	utils.Serializable
	NormalReply
	// GetReply returns Reply (property field)
	GetReply() StandardFormatStatusReply
	// GetPayloadLength returns PayloadLength (virtual field)
	GetPayloadLength() uint16
}

// StandardFormatStatusReplyReplyExactly can be used when we want exactly this type and not a type which fulfills StandardFormatStatusReplyReply.
// This is useful for switch cases.
type StandardFormatStatusReplyReplyExactly interface {
	StandardFormatStatusReplyReply
	isStandardFormatStatusReplyReply() bool
}

// _StandardFormatStatusReplyReply is the data-structure of this message
type _StandardFormatStatusReplyReply struct {
	*_NormalReply
	Reply StandardFormatStatusReply
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for discriminator values.
///////////////////////

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

func (m *_StandardFormatStatusReplyReply) InitializeParent(parent NormalReply, peekedByte byte) {
	m.PeekedByte = peekedByte
}

func (m *_StandardFormatStatusReplyReply) GetParent() NormalReply {
	return m._NormalReply
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_StandardFormatStatusReplyReply) GetReply() StandardFormatStatusReply {
	return m.Reply
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for virtual fields.
///////////////////////

func (m *_StandardFormatStatusReplyReply) GetPayloadLength() uint16 {
	return uint16(m.ReplyLength)
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewStandardFormatStatusReplyReply factory function for _StandardFormatStatusReplyReply
func NewStandardFormatStatusReplyReply(reply StandardFormatStatusReply, peekedByte byte, cBusOptions CBusOptions, replyLength uint16, requestContext RequestContext) *_StandardFormatStatusReplyReply {
	_result := &_StandardFormatStatusReplyReply{
		Reply:        reply,
		_NormalReply: NewNormalReply(peekedByte, cBusOptions, replyLength, requestContext),
	}
	_result._NormalReply._NormalReplyChildRequirements = _result
	return _result
}

// Deprecated: use the interface for direct cast
func CastStandardFormatStatusReplyReply(structType interface{}) StandardFormatStatusReplyReply {
	if casted, ok := structType.(StandardFormatStatusReplyReply); ok {
		return casted
	}
	if casted, ok := structType.(*StandardFormatStatusReplyReply); ok {
		return *casted
	}
	return nil
}

func (m *_StandardFormatStatusReplyReply) GetTypeName() string {
	return "StandardFormatStatusReplyReply"
}

func (m *_StandardFormatStatusReplyReply) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *_StandardFormatStatusReplyReply) GetLengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(m.GetParentLengthInBits())

	// A virtual field doesn't have any in- or output.

	// Manual Field (reply)
	lengthInBits += uint16(int32(m.GetLengthInBytes()) * int32(int32(2)))

	return lengthInBits
}

func (m *_StandardFormatStatusReplyReply) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func StandardFormatStatusReplyReplyParse(readBuffer utils.ReadBuffer, cBusOptions CBusOptions, replyLength uint16, requestContext RequestContext) (StandardFormatStatusReplyReply, error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("StandardFormatStatusReplyReply"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for StandardFormatStatusReplyReply")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	// Virtual field
	_payloadLength := replyLength
	payloadLength := uint16(_payloadLength)
	_ = payloadLength

	// Manual Field (reply)
	_reply, _replyErr := ReadStandardFormatStatusReply(readBuffer, payloadLength)
	if _replyErr != nil {
		return nil, errors.Wrap(_replyErr, "Error parsing 'reply' field of StandardFormatStatusReplyReply")
	}
	reply := _reply.(StandardFormatStatusReply)

	if closeErr := readBuffer.CloseContext("StandardFormatStatusReplyReply"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for StandardFormatStatusReplyReply")
	}

	// Create a partially initialized instance
	_child := &_StandardFormatStatusReplyReply{
		Reply: reply,
		_NormalReply: &_NormalReply{
			CBusOptions:    cBusOptions,
			ReplyLength:    replyLength,
			RequestContext: requestContext,
		},
	}
	_child._NormalReply._NormalReplyChildRequirements = _child
	return _child, nil
}

func (m *_StandardFormatStatusReplyReply) Serialize(writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	ser := func() error {
		if pushErr := writeBuffer.PushContext("StandardFormatStatusReplyReply"); pushErr != nil {
			return errors.Wrap(pushErr, "Error pushing for StandardFormatStatusReplyReply")
		}
		// Virtual field
		if _payloadLengthErr := writeBuffer.WriteVirtual("payloadLength", m.GetPayloadLength()); _payloadLengthErr != nil {
			return errors.Wrap(_payloadLengthErr, "Error serializing 'payloadLength' field")
		}

		// Manual Field (reply)
		_replyErr := WriteStandardFormatStatusReply(writeBuffer, m.GetReply())
		if _replyErr != nil {
			return errors.Wrap(_replyErr, "Error serializing 'reply' field")
		}

		if popErr := writeBuffer.PopContext("StandardFormatStatusReplyReply"); popErr != nil {
			return errors.Wrap(popErr, "Error popping for StandardFormatStatusReplyReply")
		}
		return nil
	}
	return m.SerializeParent(writeBuffer, m, ser)
}

func (m *_StandardFormatStatusReplyReply) isStandardFormatStatusReplyReply() bool {
	return true
}

func (m *_StandardFormatStatusReplyReply) String() string {
	if m == nil {
		return "<nil>"
	}
	writeBuffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := writeBuffer.WriteSerializable(m); err != nil {
		return err.Error()
	}
	return writeBuffer.GetBox().String()
}
