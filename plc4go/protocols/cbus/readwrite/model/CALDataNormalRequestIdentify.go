/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// CALDataNormalRequestIdentify is the corresponding interface of CALDataNormalRequestIdentify
type CALDataNormalRequestIdentify interface {
	utils.LengthAware
	utils.Serializable
	CALDataNormal
	// GetAttribute returns Attribute (property field)
	GetAttribute() Attribute
}

// CALDataNormalRequestIdentifyExactly can be used when we want exactly this type and not a type which fulfills CALDataNormalRequestIdentify.
// This is useful for switch cases.
type CALDataNormalRequestIdentifyExactly interface {
	CALDataNormalRequestIdentify
	isCALDataNormalRequestIdentify() bool
}

// _CALDataNormalRequestIdentify is the data-structure of this message
type _CALDataNormalRequestIdentify struct {
	*_CALDataNormal
	Attribute Attribute
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for discriminator values.
///////////////////////

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

func (m *_CALDataNormalRequestIdentify) InitializeParent(parent CALDataNormal, commandTypeContainer CALCommandTypeContainer) {
	m.CommandTypeContainer = commandTypeContainer
}

func (m *_CALDataNormalRequestIdentify) GetParent() CALDataNormal {
	return m._CALDataNormal
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_CALDataNormalRequestIdentify) GetAttribute() Attribute {
	return m.Attribute
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewCALDataNormalRequestIdentify factory function for _CALDataNormalRequestIdentify
func NewCALDataNormalRequestIdentify(attribute Attribute, commandTypeContainer CALCommandTypeContainer) *_CALDataNormalRequestIdentify {
	_result := &_CALDataNormalRequestIdentify{
		Attribute:      attribute,
		_CALDataNormal: NewCALDataNormal(commandTypeContainer),
	}
	_result._CALDataNormal._CALDataNormalChildRequirements = _result
	return _result
}

// Deprecated: use the interface for direct cast
func CastCALDataNormalRequestIdentify(structType interface{}) CALDataNormalRequestIdentify {
	if casted, ok := structType.(CALDataNormalRequestIdentify); ok {
		return casted
	}
	if casted, ok := structType.(*CALDataNormalRequestIdentify); ok {
		return *casted
	}
	return nil
}

func (m *_CALDataNormalRequestIdentify) GetTypeName() string {
	return "CALDataNormalRequestIdentify"
}

func (m *_CALDataNormalRequestIdentify) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *_CALDataNormalRequestIdentify) GetLengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(m.GetParentLengthInBits())

	// Simple field (attribute)
	lengthInBits += 8

	return lengthInBits
}

func (m *_CALDataNormalRequestIdentify) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func CALDataNormalRequestIdentifyParse(readBuffer utils.ReadBuffer) (CALDataNormalRequestIdentify, error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("CALDataNormalRequestIdentify"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for CALDataNormalRequestIdentify")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	// Simple Field (attribute)
	if pullErr := readBuffer.PullContext("attribute"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for attribute")
	}
	_attribute, _attributeErr := AttributeParse(readBuffer)
	if _attributeErr != nil {
		return nil, errors.Wrap(_attributeErr, "Error parsing 'attribute' field of CALDataNormalRequestIdentify")
	}
	attribute := _attribute
	if closeErr := readBuffer.CloseContext("attribute"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for attribute")
	}

	if closeErr := readBuffer.CloseContext("CALDataNormalRequestIdentify"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for CALDataNormalRequestIdentify")
	}

	// Create a partially initialized instance
	_child := &_CALDataNormalRequestIdentify{
		Attribute:      attribute,
		_CALDataNormal: &_CALDataNormal{},
	}
	_child._CALDataNormal._CALDataNormalChildRequirements = _child
	return _child, nil
}

func (m *_CALDataNormalRequestIdentify) Serialize(writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	ser := func() error {
		if pushErr := writeBuffer.PushContext("CALDataNormalRequestIdentify"); pushErr != nil {
			return errors.Wrap(pushErr, "Error pushing for CALDataNormalRequestIdentify")
		}

		// Simple Field (attribute)
		if pushErr := writeBuffer.PushContext("attribute"); pushErr != nil {
			return errors.Wrap(pushErr, "Error pushing for attribute")
		}
		_attributeErr := writeBuffer.WriteSerializable(m.GetAttribute())
		if popErr := writeBuffer.PopContext("attribute"); popErr != nil {
			return errors.Wrap(popErr, "Error popping for attribute")
		}
		if _attributeErr != nil {
			return errors.Wrap(_attributeErr, "Error serializing 'attribute' field")
		}

		if popErr := writeBuffer.PopContext("CALDataNormalRequestIdentify"); popErr != nil {
			return errors.Wrap(popErr, "Error popping for CALDataNormalRequestIdentify")
		}
		return nil
	}
	return m.SerializeParent(writeBuffer, m, ser)
}

func (m *_CALDataNormalRequestIdentify) isCALDataNormalRequestIdentify() bool {
	return true
}

func (m *_CALDataNormalRequestIdentify) String() string {
	if m == nil {
		return "<nil>"
	}
	writeBuffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := writeBuffer.WriteSerializable(m); err != nil {
		return err.Error()
	}
	return writeBuffer.GetBox().String()
}
