/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"fmt"
	"github.com/apache/plc4x/plc4go/internal/spi/utils"
	"github.com/pkg/errors"
	"github.com/rs/zerolog/log"
)

// Code generated by code-generation. DO NOT EDIT.

// Constant values.
const CALDataOrSetParameterSetParameter_MAGICID uint8 = 0xA3

// CALDataOrSetParameterSetParameter is the corresponding interface of CALDataOrSetParameterSetParameter
type CALDataOrSetParameterSetParameter interface {
	utils.LengthAware
	utils.Serializable
	CALDataOrSetParameter
	// GetParamNo returns ParamNo (property field)
	GetParamNo() Parameter
	// GetParameterValue returns ParameterValue (property field)
	GetParameterValue() byte
}

// CALDataOrSetParameterSetParameterExactly can be used when we want exactly this type and not a type which fulfills CALDataOrSetParameterSetParameter.
// This is useful for switch cases.
type CALDataOrSetParameterSetParameterExactly interface {
	CALDataOrSetParameterSetParameter
	isCALDataOrSetParameterSetParameter() bool
}

// _CALDataOrSetParameterSetParameter is the data-structure of this message
type _CALDataOrSetParameterSetParameter struct {
	*_CALDataOrSetParameter
	ParamNo        Parameter
	ParameterValue byte
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for discriminator values.
///////////////////////

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

func (m *_CALDataOrSetParameterSetParameter) InitializeParent(parent CALDataOrSetParameter, firstByte byte) {
	m.FirstByte = firstByte
}

func (m *_CALDataOrSetParameterSetParameter) GetParent() CALDataOrSetParameter {
	return m._CALDataOrSetParameter
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_CALDataOrSetParameterSetParameter) GetParamNo() Parameter {
	return m.ParamNo
}

func (m *_CALDataOrSetParameterSetParameter) GetParameterValue() byte {
	return m.ParameterValue
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for const fields.
///////////////////////

func (m *_CALDataOrSetParameterSetParameter) GetMagicId() uint8 {
	return CALDataOrSetParameterSetParameter_MAGICID
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewCALDataOrSetParameterSetParameter factory function for _CALDataOrSetParameterSetParameter
func NewCALDataOrSetParameterSetParameter(paramNo Parameter, parameterValue byte, firstByte byte) *_CALDataOrSetParameterSetParameter {
	_result := &_CALDataOrSetParameterSetParameter{
		ParamNo:                paramNo,
		ParameterValue:         parameterValue,
		_CALDataOrSetParameter: NewCALDataOrSetParameter(firstByte),
	}
	_result._CALDataOrSetParameter._CALDataOrSetParameterChildRequirements = _result
	return _result
}

// Deprecated: use the interface for direct cast
func CastCALDataOrSetParameterSetParameter(structType interface{}) CALDataOrSetParameterSetParameter {
	if casted, ok := structType.(CALDataOrSetParameterSetParameter); ok {
		return casted
	}
	if casted, ok := structType.(*CALDataOrSetParameterSetParameter); ok {
		return *casted
	}
	return nil
}

func (m *_CALDataOrSetParameterSetParameter) GetTypeName() string {
	return "CALDataOrSetParameterSetParameter"
}

func (m *_CALDataOrSetParameterSetParameter) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *_CALDataOrSetParameterSetParameter) GetLengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(m.GetParentLengthInBits())

	// Const Field (magicId)
	lengthInBits += 8

	// Simple field (paramNo)
	lengthInBits += 8

	// Reserved Field (reserved)
	lengthInBits += 8

	// Simple field (parameterValue)
	lengthInBits += 8

	return lengthInBits
}

func (m *_CALDataOrSetParameterSetParameter) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func CALDataOrSetParameterSetParameterParse(readBuffer utils.ReadBuffer) (CALDataOrSetParameterSetParameter, error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("CALDataOrSetParameterSetParameter"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for CALDataOrSetParameterSetParameter")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	// Const Field (magicId)
	magicId, _magicIdErr := readBuffer.ReadUint8("magicId", 8)
	if _magicIdErr != nil {
		return nil, errors.Wrap(_magicIdErr, "Error parsing 'magicId' field of CALDataOrSetParameterSetParameter")
	}
	if magicId != CALDataOrSetParameterSetParameter_MAGICID {
		return nil, errors.New("Expected constant value " + fmt.Sprintf("%d", CALDataOrSetParameterSetParameter_MAGICID) + " but got " + fmt.Sprintf("%d", magicId))
	}

	// Simple Field (paramNo)
	if pullErr := readBuffer.PullContext("paramNo"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for paramNo")
	}
	_paramNo, _paramNoErr := ParameterParse(readBuffer)
	if _paramNoErr != nil {
		return nil, errors.Wrap(_paramNoErr, "Error parsing 'paramNo' field of CALDataOrSetParameterSetParameter")
	}
	paramNo := _paramNo
	if closeErr := readBuffer.CloseContext("paramNo"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for paramNo")
	}

	// Reserved Field (Compartmentalized so the "reserved" variable can't leak)
	{
		reserved, _err := readBuffer.ReadByte("reserved")
		if _err != nil {
			return nil, errors.Wrap(_err, "Error parsing 'reserved' field of CALDataOrSetParameterSetParameter")
		}
		if reserved != byte(0x0) {
			log.Info().Fields(map[string]interface{}{
				"expected value": byte(0x0),
				"got value":      reserved,
			}).Msg("Got unexpected response for reserved field.")
		}
	}

	// Simple Field (parameterValue)
	_parameterValue, _parameterValueErr := readBuffer.ReadByte("parameterValue")
	if _parameterValueErr != nil {
		return nil, errors.Wrap(_parameterValueErr, "Error parsing 'parameterValue' field of CALDataOrSetParameterSetParameter")
	}
	parameterValue := _parameterValue

	if closeErr := readBuffer.CloseContext("CALDataOrSetParameterSetParameter"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for CALDataOrSetParameterSetParameter")
	}

	// Create a partially initialized instance
	_child := &_CALDataOrSetParameterSetParameter{
		ParamNo:                paramNo,
		ParameterValue:         parameterValue,
		_CALDataOrSetParameter: &_CALDataOrSetParameter{},
	}
	_child._CALDataOrSetParameter._CALDataOrSetParameterChildRequirements = _child
	return _child, nil
}

func (m *_CALDataOrSetParameterSetParameter) Serialize(writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	ser := func() error {
		if pushErr := writeBuffer.PushContext("CALDataOrSetParameterSetParameter"); pushErr != nil {
			return errors.Wrap(pushErr, "Error pushing for CALDataOrSetParameterSetParameter")
		}

		// Const Field (magicId)
		_magicIdErr := writeBuffer.WriteUint8("magicId", 8, 0xA3)
		if _magicIdErr != nil {
			return errors.Wrap(_magicIdErr, "Error serializing 'magicId' field")
		}

		// Simple Field (paramNo)
		if pushErr := writeBuffer.PushContext("paramNo"); pushErr != nil {
			return errors.Wrap(pushErr, "Error pushing for paramNo")
		}
		_paramNoErr := writeBuffer.WriteSerializable(m.GetParamNo())
		if popErr := writeBuffer.PopContext("paramNo"); popErr != nil {
			return errors.Wrap(popErr, "Error popping for paramNo")
		}
		if _paramNoErr != nil {
			return errors.Wrap(_paramNoErr, "Error serializing 'paramNo' field")
		}

		// Reserved Field (reserved)
		{
			_err := writeBuffer.WriteByte("reserved", byte(0x0))
			if _err != nil {
				return errors.Wrap(_err, "Error serializing 'reserved' field")
			}
		}

		// Simple Field (parameterValue)
		parameterValue := byte(m.GetParameterValue())
		_parameterValueErr := writeBuffer.WriteByte("parameterValue", (parameterValue))
		if _parameterValueErr != nil {
			return errors.Wrap(_parameterValueErr, "Error serializing 'parameterValue' field")
		}

		if popErr := writeBuffer.PopContext("CALDataOrSetParameterSetParameter"); popErr != nil {
			return errors.Wrap(popErr, "Error popping for CALDataOrSetParameterSetParameter")
		}
		return nil
	}
	return m.SerializeParent(writeBuffer, m, ser)
}

func (m *_CALDataOrSetParameterSetParameter) isCALDataOrSetParameterSetParameter() bool {
	return true
}

func (m *_CALDataOrSetParameterSetParameter) String() string {
	if m == nil {
		return "<nil>"
	}
	writeBuffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := writeBuffer.WriteSerializable(m); err != nil {
		return err.Error()
	}
	return writeBuffer.GetBox().String()
}
