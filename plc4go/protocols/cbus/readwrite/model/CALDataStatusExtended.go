/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// CALDataStatusExtended is the corresponding interface of CALDataStatusExtended
type CALDataStatusExtended interface {
	utils.LengthAware
	utils.Serializable
	CALData
	// GetCoding returns Coding (property field)
	GetCoding() uint8
	// GetApplication returns Application (property field)
	GetApplication() ApplicationIdContainer
	// GetBlockStart returns BlockStart (property field)
	GetBlockStart() uint8
	// GetData returns Data (property field)
	GetData() []byte
	// GetIsBinaryBySerialInterface returns IsBinaryBySerialInterface (virtual field)
	GetIsBinaryBySerialInterface() bool
	// GetIsBinaryByElsewhere returns IsBinaryByElsewhere (virtual field)
	GetIsBinaryByElsewhere() bool
	// GetIsLevelBySerialInterface returns IsLevelBySerialInterface (virtual field)
	GetIsLevelBySerialInterface() bool
	// GetIsLevelByElsewhere returns IsLevelByElsewhere (virtual field)
	GetIsLevelByElsewhere() bool
	// GetIsReserved returns IsReserved (virtual field)
	GetIsReserved() bool
}

// CALDataStatusExtendedExactly can be used when we want exactly this type and not a type which fulfills CALDataStatusExtended.
// This is useful for switch cases.
type CALDataStatusExtendedExactly interface {
	CALDataStatusExtended
	isCALDataStatusExtended() bool
}

// _CALDataStatusExtended is the data-structure of this message
type _CALDataStatusExtended struct {
	*_CALData
	Coding      uint8
	Application ApplicationIdContainer
	BlockStart  uint8
	Data        []byte
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for discriminator values.
///////////////////////

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

func (m *_CALDataStatusExtended) InitializeParent(parent CALData, commandTypeContainer CALCommandTypeContainer, additionalData CALData) {
	m.CommandTypeContainer = commandTypeContainer
	m.AdditionalData = additionalData
}

func (m *_CALDataStatusExtended) GetParent() CALData {
	return m._CALData
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_CALDataStatusExtended) GetCoding() uint8 {
	return m.Coding
}

func (m *_CALDataStatusExtended) GetApplication() ApplicationIdContainer {
	return m.Application
}

func (m *_CALDataStatusExtended) GetBlockStart() uint8 {
	return m.BlockStart
}

func (m *_CALDataStatusExtended) GetData() []byte {
	return m.Data
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for virtual fields.
///////////////////////

func (m *_CALDataStatusExtended) GetIsBinaryBySerialInterface() bool {
	return bool(bool((m.GetCoding()) == (0x00)))
}

func (m *_CALDataStatusExtended) GetIsBinaryByElsewhere() bool {
	return bool(bool((m.GetCoding()) == (0x40)))
}

func (m *_CALDataStatusExtended) GetIsLevelBySerialInterface() bool {
	return bool(bool((m.GetCoding()) == (0x07)))
}

func (m *_CALDataStatusExtended) GetIsLevelByElsewhere() bool {
	return bool(bool((m.GetCoding()) == (0x47)))
}

func (m *_CALDataStatusExtended) GetIsReserved() bool {
	return bool(bool(bool(bool(!(m.GetIsBinaryBySerialInterface())) && bool(!(m.GetIsBinaryByElsewhere()))) && bool(!(m.GetIsLevelBySerialInterface()))) && bool(!(m.GetIsLevelByElsewhere())))
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewCALDataStatusExtended factory function for _CALDataStatusExtended
func NewCALDataStatusExtended(coding uint8, application ApplicationIdContainer, blockStart uint8, data []byte, commandTypeContainer CALCommandTypeContainer, additionalData CALData, requestContext RequestContext) *_CALDataStatusExtended {
	_result := &_CALDataStatusExtended{
		Coding:      coding,
		Application: application,
		BlockStart:  blockStart,
		Data:        data,
		_CALData:    NewCALData(commandTypeContainer, additionalData, requestContext),
	}
	_result._CALData._CALDataChildRequirements = _result
	return _result
}

// Deprecated: use the interface for direct cast
func CastCALDataStatusExtended(structType interface{}) CALDataStatusExtended {
	if casted, ok := structType.(CALDataStatusExtended); ok {
		return casted
	}
	if casted, ok := structType.(*CALDataStatusExtended); ok {
		return *casted
	}
	return nil
}

func (m *_CALDataStatusExtended) GetTypeName() string {
	return "CALDataStatusExtended"
}

func (m *_CALDataStatusExtended) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *_CALDataStatusExtended) GetLengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(m.GetParentLengthInBits())

	// Simple field (coding)
	lengthInBits += 8

	// A virtual field doesn't have any in- or output.

	// A virtual field doesn't have any in- or output.

	// A virtual field doesn't have any in- or output.

	// A virtual field doesn't have any in- or output.

	// A virtual field doesn't have any in- or output.

	// Simple field (application)
	lengthInBits += 8

	// Simple field (blockStart)
	lengthInBits += 8

	// Array field
	if len(m.Data) > 0 {
		lengthInBits += 8 * uint16(len(m.Data))
	}

	return lengthInBits
}

func (m *_CALDataStatusExtended) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func CALDataStatusExtendedParse(readBuffer utils.ReadBuffer, requestContext RequestContext, commandTypeContainer CALCommandTypeContainer) (CALDataStatusExtended, error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("CALDataStatusExtended"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for CALDataStatusExtended")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	// Simple Field (coding)
	_coding, _codingErr := readBuffer.ReadUint8("coding", 8)
	if _codingErr != nil {
		return nil, errors.Wrap(_codingErr, "Error parsing 'coding' field of CALDataStatusExtended")
	}
	coding := _coding

	// Virtual field
	_isBinaryBySerialInterface := bool((coding) == (0x00))
	isBinaryBySerialInterface := bool(_isBinaryBySerialInterface)
	_ = isBinaryBySerialInterface

	// Virtual field
	_isBinaryByElsewhere := bool((coding) == (0x40))
	isBinaryByElsewhere := bool(_isBinaryByElsewhere)
	_ = isBinaryByElsewhere

	// Virtual field
	_isLevelBySerialInterface := bool((coding) == (0x07))
	isLevelBySerialInterface := bool(_isLevelBySerialInterface)
	_ = isLevelBySerialInterface

	// Virtual field
	_isLevelByElsewhere := bool((coding) == (0x47))
	isLevelByElsewhere := bool(_isLevelByElsewhere)
	_ = isLevelByElsewhere

	// Virtual field
	_isReserved := bool(bool(bool(!(isBinaryBySerialInterface)) && bool(!(isBinaryByElsewhere))) && bool(!(isLevelBySerialInterface))) && bool(!(isLevelByElsewhere))
	isReserved := bool(_isReserved)
	_ = isReserved

	// Simple Field (application)
	if pullErr := readBuffer.PullContext("application"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for application")
	}
	_application, _applicationErr := ApplicationIdContainerParse(readBuffer)
	if _applicationErr != nil {
		return nil, errors.Wrap(_applicationErr, "Error parsing 'application' field of CALDataStatusExtended")
	}
	application := _application
	if closeErr := readBuffer.CloseContext("application"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for application")
	}

	// Simple Field (blockStart)
	_blockStart, _blockStartErr := readBuffer.ReadUint8("blockStart", 8)
	if _blockStartErr != nil {
		return nil, errors.Wrap(_blockStartErr, "Error parsing 'blockStart' field of CALDataStatusExtended")
	}
	blockStart := _blockStart
	// Byte Array field (data)
	numberOfBytesdata := int(uint16(commandTypeContainer.NumBytes()) - uint16(uint16(2)))
	data, _readArrayErr := readBuffer.ReadByteArray("data", numberOfBytesdata)
	if _readArrayErr != nil {
		return nil, errors.Wrap(_readArrayErr, "Error parsing 'data' field of CALDataStatusExtended")
	}

	if closeErr := readBuffer.CloseContext("CALDataStatusExtended"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for CALDataStatusExtended")
	}

	// Create a partially initialized instance
	_child := &_CALDataStatusExtended{
		Coding:      coding,
		Application: application,
		BlockStart:  blockStart,
		Data:        data,
		_CALData: &_CALData{
			RequestContext: requestContext,
		},
	}
	_child._CALData._CALDataChildRequirements = _child
	return _child, nil
}

func (m *_CALDataStatusExtended) Serialize(writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	ser := func() error {
		if pushErr := writeBuffer.PushContext("CALDataStatusExtended"); pushErr != nil {
			return errors.Wrap(pushErr, "Error pushing for CALDataStatusExtended")
		}

		// Simple Field (coding)
		coding := uint8(m.GetCoding())
		_codingErr := writeBuffer.WriteUint8("coding", 8, (coding))
		if _codingErr != nil {
			return errors.Wrap(_codingErr, "Error serializing 'coding' field")
		}
		// Virtual field
		if _isBinaryBySerialInterfaceErr := writeBuffer.WriteVirtual("isBinaryBySerialInterface", m.GetIsBinaryBySerialInterface()); _isBinaryBySerialInterfaceErr != nil {
			return errors.Wrap(_isBinaryBySerialInterfaceErr, "Error serializing 'isBinaryBySerialInterface' field")
		}
		// Virtual field
		if _isBinaryByElsewhereErr := writeBuffer.WriteVirtual("isBinaryByElsewhere", m.GetIsBinaryByElsewhere()); _isBinaryByElsewhereErr != nil {
			return errors.Wrap(_isBinaryByElsewhereErr, "Error serializing 'isBinaryByElsewhere' field")
		}
		// Virtual field
		if _isLevelBySerialInterfaceErr := writeBuffer.WriteVirtual("isLevelBySerialInterface", m.GetIsLevelBySerialInterface()); _isLevelBySerialInterfaceErr != nil {
			return errors.Wrap(_isLevelBySerialInterfaceErr, "Error serializing 'isLevelBySerialInterface' field")
		}
		// Virtual field
		if _isLevelByElsewhereErr := writeBuffer.WriteVirtual("isLevelByElsewhere", m.GetIsLevelByElsewhere()); _isLevelByElsewhereErr != nil {
			return errors.Wrap(_isLevelByElsewhereErr, "Error serializing 'isLevelByElsewhere' field")
		}
		// Virtual field
		if _isReservedErr := writeBuffer.WriteVirtual("isReserved", m.GetIsReserved()); _isReservedErr != nil {
			return errors.Wrap(_isReservedErr, "Error serializing 'isReserved' field")
		}

		// Simple Field (application)
		if pushErr := writeBuffer.PushContext("application"); pushErr != nil {
			return errors.Wrap(pushErr, "Error pushing for application")
		}
		_applicationErr := writeBuffer.WriteSerializable(m.GetApplication())
		if popErr := writeBuffer.PopContext("application"); popErr != nil {
			return errors.Wrap(popErr, "Error popping for application")
		}
		if _applicationErr != nil {
			return errors.Wrap(_applicationErr, "Error serializing 'application' field")
		}

		// Simple Field (blockStart)
		blockStart := uint8(m.GetBlockStart())
		_blockStartErr := writeBuffer.WriteUint8("blockStart", 8, (blockStart))
		if _blockStartErr != nil {
			return errors.Wrap(_blockStartErr, "Error serializing 'blockStart' field")
		}

		// Array Field (data)
		// Byte Array field (data)
		if err := writeBuffer.WriteByteArray("data", m.GetData()); err != nil {
			return errors.Wrap(err, "Error serializing 'data' field")
		}

		if popErr := writeBuffer.PopContext("CALDataStatusExtended"); popErr != nil {
			return errors.Wrap(popErr, "Error popping for CALDataStatusExtended")
		}
		return nil
	}
	return m.SerializeParent(writeBuffer, m, ser)
}

func (m *_CALDataStatusExtended) isCALDataStatusExtended() bool {
	return true
}

func (m *_CALDataStatusExtended) String() string {
	if m == nil {
		return "<nil>"
	}
	writeBuffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := writeBuffer.WriteSerializable(m); err != nil {
		return err.Error()
	}
	return writeBuffer.GetBox().String()
}
