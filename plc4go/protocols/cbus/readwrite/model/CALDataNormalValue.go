/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// CALDataNormalValue is the corresponding interface of CALDataNormalValue
type CALDataNormalValue interface {
	utils.LengthAware
	utils.Serializable
	CALData
	// GetCalData returns CalData (property field)
	GetCalData() CALDataNormal
}

// CALDataNormalValueExactly can be used when we want exactly this type and not a type which fulfills CALDataNormalValue.
// This is useful for switch cases.
type CALDataNormalValueExactly interface {
	CALDataNormalValue
	isCALDataNormalValue() bool
}

// _CALDataNormalValue is the data-structure of this message
type _CALDataNormalValue struct {
	*_CALData
	CalData CALDataNormal
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for discriminator values.
///////////////////////

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

func (m *_CALDataNormalValue) InitializeParent(parent CALData, firstByte byte) {
	m.FirstByte = firstByte
}

func (m *_CALDataNormalValue) GetParent() CALData {
	return m._CALData
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_CALDataNormalValue) GetCalData() CALDataNormal {
	return m.CalData
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewCALDataNormalValue factory function for _CALDataNormalValue
func NewCALDataNormalValue(calData CALDataNormal, firstByte byte) *_CALDataNormalValue {
	_result := &_CALDataNormalValue{
		CalData:  calData,
		_CALData: NewCALData(firstByte),
	}
	_result._CALData._CALDataChildRequirements = _result
	return _result
}

// Deprecated: use the interface for direct cast
func CastCALDataNormalValue(structType interface{}) CALDataNormalValue {
	if casted, ok := structType.(CALDataNormalValue); ok {
		return casted
	}
	if casted, ok := structType.(*CALDataNormalValue); ok {
		return *casted
	}
	return nil
}

func (m *_CALDataNormalValue) GetTypeName() string {
	return "CALDataNormalValue"
}

func (m *_CALDataNormalValue) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *_CALDataNormalValue) GetLengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(m.GetParentLengthInBits())

	// Simple field (calData)
	lengthInBits += m.CalData.GetLengthInBits()

	return lengthInBits
}

func (m *_CALDataNormalValue) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func CALDataNormalValueParse(readBuffer utils.ReadBuffer) (CALDataNormalValue, error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("CALDataNormalValue"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for CALDataNormalValue")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	// Simple Field (calData)
	if pullErr := readBuffer.PullContext("calData"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for calData")
	}
	_calData, _calDataErr := CALDataNormalParse(readBuffer)
	if _calDataErr != nil {
		return nil, errors.Wrap(_calDataErr, "Error parsing 'calData' field of CALDataNormalValue")
	}
	calData := _calData.(CALDataNormal)
	if closeErr := readBuffer.CloseContext("calData"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for calData")
	}

	if closeErr := readBuffer.CloseContext("CALDataNormalValue"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for CALDataNormalValue")
	}

	// Create a partially initialized instance
	_child := &_CALDataNormalValue{
		CalData:  calData,
		_CALData: &_CALData{},
	}
	_child._CALData._CALDataChildRequirements = _child
	return _child, nil
}

func (m *_CALDataNormalValue) Serialize(writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	ser := func() error {
		if pushErr := writeBuffer.PushContext("CALDataNormalValue"); pushErr != nil {
			return errors.Wrap(pushErr, "Error pushing for CALDataNormalValue")
		}

		// Simple Field (calData)
		if pushErr := writeBuffer.PushContext("calData"); pushErr != nil {
			return errors.Wrap(pushErr, "Error pushing for calData")
		}
		_calDataErr := writeBuffer.WriteSerializable(m.GetCalData())
		if popErr := writeBuffer.PopContext("calData"); popErr != nil {
			return errors.Wrap(popErr, "Error popping for calData")
		}
		if _calDataErr != nil {
			return errors.Wrap(_calDataErr, "Error serializing 'calData' field")
		}

		if popErr := writeBuffer.PopContext("CALDataNormalValue"); popErr != nil {
			return errors.Wrap(popErr, "Error popping for CALDataNormalValue")
		}
		return nil
	}
	return m.SerializeParent(writeBuffer, m, ser)
}

func (m *_CALDataNormalValue) isCALDataNormalValue() bool {
	return true
}

func (m *_CALDataNormalValue) String() string {
	if m == nil {
		return "<nil>"
	}
	writeBuffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := writeBuffer.WriteSerializable(m); err != nil {
		return err.Error()
	}
	return writeBuffer.GetBox().String()
}
