/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// CALDataOrSetParameter is the corresponding interface of CALDataOrSetParameter
type CALDataOrSetParameter interface {
	utils.LengthAware
	utils.Serializable
	// GetFirstByte returns FirstByte (property field)
	GetFirstByte() byte
}

// CALDataOrSetParameterExactly can be used when we want exactly this type and not a type which fulfills CALDataOrSetParameter.
// This is useful for switch cases.
type CALDataOrSetParameterExactly interface {
	CALDataOrSetParameter
	isCALDataOrSetParameter() bool
}

// _CALDataOrSetParameter is the data-structure of this message
type _CALDataOrSetParameter struct {
	_CALDataOrSetParameterChildRequirements
	FirstByte byte
}

type _CALDataOrSetParameterChildRequirements interface {
	utils.Serializable
	GetLengthInBits() uint16
	GetLengthInBitsConditional(lastItem bool) uint16
}

type CALDataOrSetParameterParent interface {
	SerializeParent(writeBuffer utils.WriteBuffer, child CALDataOrSetParameter, serializeChildFunction func() error) error
	GetTypeName() string
}

type CALDataOrSetParameterChild interface {
	utils.Serializable
	InitializeParent(parent CALDataOrSetParameter, firstByte byte)
	GetParent() *CALDataOrSetParameter

	GetTypeName() string
	CALDataOrSetParameter
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_CALDataOrSetParameter) GetFirstByte() byte {
	return m.FirstByte
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewCALDataOrSetParameter factory function for _CALDataOrSetParameter
func NewCALDataOrSetParameter(firstByte byte) *_CALDataOrSetParameter {
	return &_CALDataOrSetParameter{FirstByte: firstByte}
}

// Deprecated: use the interface for direct cast
func CastCALDataOrSetParameter(structType interface{}) CALDataOrSetParameter {
	if casted, ok := structType.(CALDataOrSetParameter); ok {
		return casted
	}
	if casted, ok := structType.(*CALDataOrSetParameter); ok {
		return *casted
	}
	return nil
}

func (m *_CALDataOrSetParameter) GetTypeName() string {
	return "CALDataOrSetParameter"
}

func (m *_CALDataOrSetParameter) GetParentLengthInBits() uint16 {
	lengthInBits := uint16(0)

	return lengthInBits
}

func (m *_CALDataOrSetParameter) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func CALDataOrSetParameterParse(readBuffer utils.ReadBuffer) (CALDataOrSetParameter, error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("CALDataOrSetParameter"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for CALDataOrSetParameter")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	// Peek Field (firstByte)
	currentPos = positionAware.GetPos()
	firstByte, _err := readBuffer.ReadByte("firstByte")
	if _err != nil {
		return nil, errors.Wrap(_err, "Error parsing 'firstByte' field of CALDataOrSetParameter")
	}

	readBuffer.Reset(currentPos)

	// Switch Field (Depending on the discriminator values, passes the instantiation to a sub-type)
	type CALDataOrSetParameterChildSerializeRequirement interface {
		CALDataOrSetParameter
		InitializeParent(CALDataOrSetParameter, byte)
		GetParent() CALDataOrSetParameter
	}
	var _childTemp interface{}
	var _child CALDataOrSetParameterChildSerializeRequirement
	var typeSwitchError error
	switch {
	case firstByte == 0xA3: // CALDataOrSetParameterSetParameter
		_childTemp, typeSwitchError = CALDataOrSetParameterSetParameterParse(readBuffer)
	case 0 == 0: // CALDataOrSetParameterValue
		_childTemp, typeSwitchError = CALDataOrSetParameterValueParse(readBuffer)
	default:
		typeSwitchError = errors.Errorf("Unmapped type for parameters [firstByte=%v]", firstByte)
	}
	if typeSwitchError != nil {
		return nil, errors.Wrap(typeSwitchError, "Error parsing sub-type for type-switch of CALDataOrSetParameter")
	}
	_child = _childTemp.(CALDataOrSetParameterChildSerializeRequirement)

	if closeErr := readBuffer.CloseContext("CALDataOrSetParameter"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for CALDataOrSetParameter")
	}

	// Finish initializing
	_child.InitializeParent(_child, firstByte)
	return _child, nil
}

func (pm *_CALDataOrSetParameter) SerializeParent(writeBuffer utils.WriteBuffer, child CALDataOrSetParameter, serializeChildFunction func() error) error {
	// We redirect all calls through client as some methods are only implemented there
	m := child
	_ = m
	positionAware := writeBuffer
	_ = positionAware
	if pushErr := writeBuffer.PushContext("CALDataOrSetParameter"); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for CALDataOrSetParameter")
	}

	// Switch field (Depending on the discriminator values, passes the serialization to a sub-type)
	if _typeSwitchErr := serializeChildFunction(); _typeSwitchErr != nil {
		return errors.Wrap(_typeSwitchErr, "Error serializing sub-type field")
	}

	if popErr := writeBuffer.PopContext("CALDataOrSetParameter"); popErr != nil {
		return errors.Wrap(popErr, "Error popping for CALDataOrSetParameter")
	}
	return nil
}

func (m *_CALDataOrSetParameter) isCALDataOrSetParameter() bool {
	return true
}

func (m *_CALDataOrSetParameter) String() string {
	if m == nil {
		return "<nil>"
	}
	writeBuffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := writeBuffer.WriteSerializable(m); err != nil {
		return err.Error()
	}
	return writeBuffer.GetBox().String()
}
