/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"fmt"
	"github.com/apache/plc4x/plc4go/internal/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// Constant values.
const CALDataSetParameter_MAGICID uint8 = 0xA3
const CALDataSetParameter_DELIMITER byte = 0x0

// CALDataSetParameter is the corresponding interface of CALDataSetParameter
type CALDataSetParameter interface {
	utils.LengthAware
	utils.Serializable
	CALData
	// GetParameterNumber returns ParameterNumber (property field)
	GetParameterNumber() uint8
	// GetParameterValue returns ParameterValue (property field)
	GetParameterValue() byte
}

// CALDataSetParameterExactly can be used when we want exactly this type and not a type which fulfills CALDataSetParameter.
// This is useful for switch cases.
type CALDataSetParameterExactly interface {
	CALDataSetParameter
	isCALDataSetParameter() bool
}

// _CALDataSetParameter is the data-structure of this message
type _CALDataSetParameter struct {
	*_CALData
	ParameterNumber uint8
	ParameterValue  byte
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for discriminator values.
///////////////////////

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

func (m *_CALDataSetParameter) InitializeParent(parent CALData, firstByte byte) {
	m.FirstByte = firstByte
}

func (m *_CALDataSetParameter) GetParent() CALData {
	return m._CALData
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_CALDataSetParameter) GetParameterNumber() uint8 {
	return m.ParameterNumber
}

func (m *_CALDataSetParameter) GetParameterValue() byte {
	return m.ParameterValue
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for const fields.
///////////////////////

func (m *_CALDataSetParameter) GetMagicId() uint8 {
	return CALDataSetParameter_MAGICID
}

func (m *_CALDataSetParameter) GetDelimiter() byte {
	return CALDataSetParameter_DELIMITER
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewCALDataSetParameter factory function for _CALDataSetParameter
func NewCALDataSetParameter(parameterNumber uint8, parameterValue byte, firstByte byte) *_CALDataSetParameter {
	_result := &_CALDataSetParameter{
		ParameterNumber: parameterNumber,
		ParameterValue:  parameterValue,
		_CALData:        NewCALData(firstByte),
	}
	_result._CALData._CALDataChildRequirements = _result
	return _result
}

// Deprecated: use the interface for direct cast
func CastCALDataSetParameter(structType interface{}) CALDataSetParameter {
	if casted, ok := structType.(CALDataSetParameter); ok {
		return casted
	}
	if casted, ok := structType.(*CALDataSetParameter); ok {
		return *casted
	}
	return nil
}

func (m *_CALDataSetParameter) GetTypeName() string {
	return "CALDataSetParameter"
}

func (m *_CALDataSetParameter) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *_CALDataSetParameter) GetLengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(m.GetParentLengthInBits())

	// Const Field (magicId)
	lengthInBits += 8

	// Simple field (parameterNumber)
	lengthInBits += 8

	// Const Field (delimiter)
	lengthInBits += 8

	// Simple field (parameterValue)
	lengthInBits += 8

	return lengthInBits
}

func (m *_CALDataSetParameter) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func CALDataSetParameterParse(readBuffer utils.ReadBuffer) (CALDataSetParameter, error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("CALDataSetParameter"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for CALDataSetParameter")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	// Const Field (magicId)
	magicId, _magicIdErr := readBuffer.ReadUint8("magicId", 8)
	if _magicIdErr != nil {
		return nil, errors.Wrap(_magicIdErr, "Error parsing 'magicId' field of CALDataSetParameter")
	}
	if magicId != CALDataSetParameter_MAGICID {
		return nil, errors.New("Expected constant value " + fmt.Sprintf("%d", CALDataSetParameter_MAGICID) + " but got " + fmt.Sprintf("%d", magicId))
	}

	// Simple Field (parameterNumber)
	_parameterNumber, _parameterNumberErr := readBuffer.ReadUint8("parameterNumber", 8)
	if _parameterNumberErr != nil {
		return nil, errors.Wrap(_parameterNumberErr, "Error parsing 'parameterNumber' field of CALDataSetParameter")
	}
	parameterNumber := _parameterNumber

	// Const Field (delimiter)
	delimiter, _delimiterErr := readBuffer.ReadByte("delimiter")
	if _delimiterErr != nil {
		return nil, errors.Wrap(_delimiterErr, "Error parsing 'delimiter' field of CALDataSetParameter")
	}
	if delimiter != CALDataSetParameter_DELIMITER {
		return nil, errors.New("Expected constant value " + fmt.Sprintf("%d", CALDataSetParameter_DELIMITER) + " but got " + fmt.Sprintf("%d", delimiter))
	}

	// Simple Field (parameterValue)
	_parameterValue, _parameterValueErr := readBuffer.ReadByte("parameterValue")
	if _parameterValueErr != nil {
		return nil, errors.Wrap(_parameterValueErr, "Error parsing 'parameterValue' field of CALDataSetParameter")
	}
	parameterValue := _parameterValue

	if closeErr := readBuffer.CloseContext("CALDataSetParameter"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for CALDataSetParameter")
	}

	// Create a partially initialized instance
	_child := &_CALDataSetParameter{
		ParameterNumber: parameterNumber,
		ParameterValue:  parameterValue,
		_CALData:        &_CALData{},
	}
	_child._CALData._CALDataChildRequirements = _child
	return _child, nil
}

func (m *_CALDataSetParameter) Serialize(writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	ser := func() error {
		if pushErr := writeBuffer.PushContext("CALDataSetParameter"); pushErr != nil {
			return errors.Wrap(pushErr, "Error pushing for CALDataSetParameter")
		}

		// Const Field (magicId)
		_magicIdErr := writeBuffer.WriteUint8("magicId", 8, 0xA3)
		if _magicIdErr != nil {
			return errors.Wrap(_magicIdErr, "Error serializing 'magicId' field")
		}

		// Simple Field (parameterNumber)
		parameterNumber := uint8(m.GetParameterNumber())
		_parameterNumberErr := writeBuffer.WriteUint8("parameterNumber", 8, (parameterNumber))
		if _parameterNumberErr != nil {
			return errors.Wrap(_parameterNumberErr, "Error serializing 'parameterNumber' field")
		}

		// Const Field (delimiter)
		_delimiterErr := writeBuffer.WriteByte("delimiter", 0x0)
		if _delimiterErr != nil {
			return errors.Wrap(_delimiterErr, "Error serializing 'delimiter' field")
		}

		// Simple Field (parameterValue)
		parameterValue := byte(m.GetParameterValue())
		_parameterValueErr := writeBuffer.WriteByte("parameterValue", (parameterValue))
		if _parameterValueErr != nil {
			return errors.Wrap(_parameterValueErr, "Error serializing 'parameterValue' field")
		}

		if popErr := writeBuffer.PopContext("CALDataSetParameter"); popErr != nil {
			return errors.Wrap(popErr, "Error popping for CALDataSetParameter")
		}
		return nil
	}
	return m.SerializeParent(writeBuffer, m, ser)
}

func (m *_CALDataSetParameter) isCALDataSetParameter() bool {
	return true
}

func (m *_CALDataSetParameter) String() string {
	if m == nil {
		return "<nil>"
	}
	writeBuffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := writeBuffer.WriteSerializable(m); err != nil {
		return err.Error()
	}
	return writeBuffer.GetBox().String()
}
