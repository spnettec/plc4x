/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// ApduControlContainer is the data-structure of this message
type ApduControlContainer struct {
	*Apdu
	ControlApdu *ApduControl

	// Arguments.
	DataLength uint8
}

// IApduControlContainer is the corresponding interface of ApduControlContainer
type IApduControlContainer interface {
	IApdu
	// GetControlApdu returns ControlApdu (property field)
	GetControlApdu() *ApduControl
	// GetLengthInBytes returns the length in bytes
	GetLengthInBytes() uint16
	// GetLengthInBits returns the length in bits
	GetLengthInBits() uint16
	// Serialize serializes this type
	Serialize(writeBuffer utils.WriteBuffer) error
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for discriminator values.
///////////////////////

func (m *ApduControlContainer) GetControl() uint8 {
	return uint8(1)
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

func (m *ApduControlContainer) InitializeParent(parent *Apdu, numbered bool, counter uint8) {
	m.Apdu.Numbered = numbered
	m.Apdu.Counter = counter
}

func (m *ApduControlContainer) GetParent() *Apdu {
	return m.Apdu
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *ApduControlContainer) GetControlApdu() *ApduControl {
	return m.ControlApdu
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewApduControlContainer factory function for ApduControlContainer
func NewApduControlContainer(controlApdu *ApduControl, numbered bool, counter uint8, dataLength uint8) *ApduControlContainer {
	_result := &ApduControlContainer{
		ControlApdu: controlApdu,
		Apdu:        NewApdu(numbered, counter, dataLength),
	}
	_result.Child = _result
	return _result
}

func CastApduControlContainer(structType interface{}) *ApduControlContainer {
	if casted, ok := structType.(ApduControlContainer); ok {
		return &casted
	}
	if casted, ok := structType.(*ApduControlContainer); ok {
		return casted
	}
	if casted, ok := structType.(Apdu); ok {
		return CastApduControlContainer(casted.Child)
	}
	if casted, ok := structType.(*Apdu); ok {
		return CastApduControlContainer(casted.Child)
	}
	return nil
}

func (m *ApduControlContainer) GetTypeName() string {
	return "ApduControlContainer"
}

func (m *ApduControlContainer) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *ApduControlContainer) GetLengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(m.GetParentLengthInBits())

	// Simple field (controlApdu)
	lengthInBits += m.ControlApdu.GetLengthInBits()

	return lengthInBits
}

func (m *ApduControlContainer) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func ApduControlContainerParse(readBuffer utils.ReadBuffer, dataLength uint8) (*ApduControlContainer, error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("ApduControlContainer"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for ApduControlContainer")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	// Simple Field (controlApdu)
	if pullErr := readBuffer.PullContext("controlApdu"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for controlApdu")
	}
	_controlApdu, _controlApduErr := ApduControlParse(readBuffer)
	if _controlApduErr != nil {
		return nil, errors.Wrap(_controlApduErr, "Error parsing 'controlApdu' field")
	}
	controlApdu := CastApduControl(_controlApdu)
	if closeErr := readBuffer.CloseContext("controlApdu"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for controlApdu")
	}

	if closeErr := readBuffer.CloseContext("ApduControlContainer"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for ApduControlContainer")
	}

	// Create a partially initialized instance
	_child := &ApduControlContainer{
		ControlApdu: CastApduControl(controlApdu),
		Apdu:        &Apdu{},
	}
	_child.Apdu.Child = _child
	return _child, nil
}

func (m *ApduControlContainer) Serialize(writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	ser := func() error {
		if pushErr := writeBuffer.PushContext("ApduControlContainer"); pushErr != nil {
			return errors.Wrap(pushErr, "Error pushing for ApduControlContainer")
		}

		// Simple Field (controlApdu)
		if pushErr := writeBuffer.PushContext("controlApdu"); pushErr != nil {
			return errors.Wrap(pushErr, "Error pushing for controlApdu")
		}
		_controlApduErr := writeBuffer.WriteSerializable(m.ControlApdu)
		if popErr := writeBuffer.PopContext("controlApdu"); popErr != nil {
			return errors.Wrap(popErr, "Error popping for controlApdu")
		}
		if _controlApduErr != nil {
			return errors.Wrap(_controlApduErr, "Error serializing 'controlApdu' field")
		}

		if popErr := writeBuffer.PopContext("ApduControlContainer"); popErr != nil {
			return errors.Wrap(popErr, "Error popping for ApduControlContainer")
		}
		return nil
	}
	return m.SerializeParent(writeBuffer, m, ser)
}

func (m *ApduControlContainer) String() string {
	if m == nil {
		return "<nil>"
	}
	writeBuffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := writeBuffer.WriteSerializable(m); err != nil {
		return err.Error()
	}
	return writeBuffer.GetBox().String()
}
