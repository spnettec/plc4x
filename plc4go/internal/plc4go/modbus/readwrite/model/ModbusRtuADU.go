/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"fmt"
	"github.com/apache/plc4x/plc4go/internal/plc4go/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// Constant values.
const ModbusRtuADU_SPACE1 uint8 = 0x00
const ModbusRtuADU_SPACE2 uint8 = 0x00
const ModbusRtuADU_SPACE3 uint8 = 0x00
const ModbusRtuADU_SPACE4 uint8 = 0x00

// The data-structure of this message
type ModbusRtuADU struct {
	Address uint8
	Pdu     *ModbusPDU

	// Arguments.
	Response bool
}

// The corresponding interface
type IModbusRtuADU interface {
	// GetAddress returns Address
	GetAddress() uint8
	// GetPdu returns Pdu
	GetPdu() *ModbusPDU
	// GetLengthInBytes returns the length in bytes
	GetLengthInBytes() uint16
	// GetLengthInBits returns the length in bits
	GetLengthInBits() uint16
	// Serialize serializes this type
	Serialize(writeBuffer utils.WriteBuffer) error
}

///////////////////////////////////////////////////////////
// Accessors for property fields.
///////////////////////////////////////////////////////////
func (m *ModbusRtuADU) GetAddress() uint8 {
	return m.Address
}

func (m *ModbusRtuADU) GetPdu() *ModbusPDU {
	return m.Pdu
}

///////////////////////////////////////////////////////////
// Accessors for virtual fields.
///////////////////////////////////////////////////////////

// NewModbusRtuADU factory function for ModbusRtuADU
func NewModbusRtuADU(address uint8, pdu *ModbusPDU, response bool) *ModbusRtuADU {
	return &ModbusRtuADU{Address: address, Pdu: pdu, Response: response}
}

func CastModbusRtuADU(structType interface{}) *ModbusRtuADU {
	castFunc := func(typ interface{}) *ModbusRtuADU {
		if casted, ok := typ.(ModbusRtuADU); ok {
			return &casted
		}
		if casted, ok := typ.(*ModbusRtuADU); ok {
			return casted
		}
		return nil
	}
	return castFunc(structType)
}

func (m *ModbusRtuADU) GetTypeName() string {
	return "ModbusRtuADU"
}

func (m *ModbusRtuADU) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *ModbusRtuADU) GetLengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(0)

	// Const Field (space1)
	lengthInBits += 8

	// Const Field (space2)
	lengthInBits += 8

	// Const Field (space3)
	lengthInBits += 8

	// Const Field (space4)
	lengthInBits += 8

	// Simple field (address)
	lengthInBits += 8

	// Simple field (pdu)
	lengthInBits += m.Pdu.GetLengthInBits()

	return lengthInBits
}

func (m *ModbusRtuADU) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func ModbusRtuADUParse(readBuffer utils.ReadBuffer, response bool) (*ModbusRtuADU, error) {
	if pullErr := readBuffer.PullContext("ModbusRtuADU"); pullErr != nil {
		return nil, pullErr
	}
	currentPos := readBuffer.GetPos()
	_ = currentPos

	// Const Field (space1)
	space1, _space1Err := readBuffer.ReadUint8("space1", 8)
	if _space1Err != nil {
		return nil, errors.Wrap(_space1Err, "Error parsing 'space1' field")
	}
	if space1 != ModbusRtuADU_SPACE1 {
		return nil, errors.New("Expected constant value " + fmt.Sprintf("%d", ModbusRtuADU_SPACE1) + " but got " + fmt.Sprintf("%d", space1))
	}

	// Const Field (space2)
	space2, _space2Err := readBuffer.ReadUint8("space2", 8)
	if _space2Err != nil {
		return nil, errors.Wrap(_space2Err, "Error parsing 'space2' field")
	}
	if space2 != ModbusRtuADU_SPACE2 {
		return nil, errors.New("Expected constant value " + fmt.Sprintf("%d", ModbusRtuADU_SPACE2) + " but got " + fmt.Sprintf("%d", space2))
	}

	// Const Field (space3)
	space3, _space3Err := readBuffer.ReadUint8("space3", 8)
	if _space3Err != nil {
		return nil, errors.Wrap(_space3Err, "Error parsing 'space3' field")
	}
	if space3 != ModbusRtuADU_SPACE3 {
		return nil, errors.New("Expected constant value " + fmt.Sprintf("%d", ModbusRtuADU_SPACE3) + " but got " + fmt.Sprintf("%d", space3))
	}

	// Const Field (space4)
	space4, _space4Err := readBuffer.ReadUint8("space4", 8)
	if _space4Err != nil {
		return nil, errors.Wrap(_space4Err, "Error parsing 'space4' field")
	}
	if space4 != ModbusRtuADU_SPACE4 {
		return nil, errors.New("Expected constant value " + fmt.Sprintf("%d", ModbusRtuADU_SPACE4) + " but got " + fmt.Sprintf("%d", space4))
	}

	// Simple Field (address)
	_address, _addressErr := readBuffer.ReadUint8("address", 8)
	if _addressErr != nil {
		return nil, errors.Wrap(_addressErr, "Error parsing 'address' field")
	}
	address := _address

	// Simple Field (pdu)
	if pullErr := readBuffer.PullContext("pdu"); pullErr != nil {
		return nil, pullErr
	}
	_pdu, _pduErr := ModbusPDUParse(readBuffer, bool(response))
	if _pduErr != nil {
		return nil, errors.Wrap(_pduErr, "Error parsing 'pdu' field")
	}
	pdu := CastModbusPDU(_pdu)
	if closeErr := readBuffer.CloseContext("pdu"); closeErr != nil {
		return nil, closeErr
	}

	if closeErr := readBuffer.CloseContext("ModbusRtuADU"); closeErr != nil {
		return nil, closeErr
	}

	// Create the instance
	return NewModbusRtuADU(address, pdu, response), nil
}

func (m *ModbusRtuADU) Serialize(writeBuffer utils.WriteBuffer) error {
	if pushErr := writeBuffer.PushContext("ModbusRtuADU"); pushErr != nil {
		return pushErr
	}

	// Const Field (space1)
	_space1Err := writeBuffer.WriteUint8("space1", 8, 0x00)
	if _space1Err != nil {
		return errors.Wrap(_space1Err, "Error serializing 'space1' field")
	}

	// Const Field (space2)
	_space2Err := writeBuffer.WriteUint8("space2", 8, 0x00)
	if _space2Err != nil {
		return errors.Wrap(_space2Err, "Error serializing 'space2' field")
	}

	// Const Field (space3)
	_space3Err := writeBuffer.WriteUint8("space3", 8, 0x00)
	if _space3Err != nil {
		return errors.Wrap(_space3Err, "Error serializing 'space3' field")
	}

	// Const Field (space4)
	_space4Err := writeBuffer.WriteUint8("space4", 8, 0x00)
	if _space4Err != nil {
		return errors.Wrap(_space4Err, "Error serializing 'space4' field")
	}

	// Simple Field (address)
	address := uint8(m.Address)
	_addressErr := writeBuffer.WriteUint8("address", 8, (address))
	if _addressErr != nil {
		return errors.Wrap(_addressErr, "Error serializing 'address' field")
	}

	// Simple Field (pdu)
	if pushErr := writeBuffer.PushContext("pdu"); pushErr != nil {
		return pushErr
	}
	_pduErr := m.Pdu.Serialize(writeBuffer)
	if popErr := writeBuffer.PopContext("pdu"); popErr != nil {
		return popErr
	}
	if _pduErr != nil {
		return errors.Wrap(_pduErr, "Error serializing 'pdu' field")
	}

	if popErr := writeBuffer.PopContext("ModbusRtuADU"); popErr != nil {
		return popErr
	}
	return nil
}

func (m *ModbusRtuADU) String() string {
	if m == nil {
		return "<nil>"
	}
	buffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	m.Serialize(buffer)
	return buffer.GetBox().String()
}
