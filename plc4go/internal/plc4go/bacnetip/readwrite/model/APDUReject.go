/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/plc4go/spi/utils"
	"github.com/pkg/errors"
	"github.com/rs/zerolog/log"
)

// Code generated by code-generation. DO NOT EDIT.

// APDUReject is the data-structure of this message
type APDUReject struct {
	*APDU
	OriginalInvokeId uint8
	RawRejectReason  uint8

	// Arguments.
	ApduLength uint16
}

// IAPDUReject is the corresponding interface of APDUReject
type IAPDUReject interface {
	IAPDU
	// GetOriginalInvokeId returns OriginalInvokeId (property field)
	GetOriginalInvokeId() uint8
	// GetRawRejectReason returns RawRejectReason (property field)
	GetRawRejectReason() uint8
	// GetIsRejectReasonProprietary returns IsRejectReasonProprietary (virtual field)
	GetIsRejectReasonProprietary() bool
	// GetRejectReason returns RejectReason (virtual field)
	GetRejectReason() RejectReason
	// GetRejectReasonProprietary returns RejectReasonProprietary (virtual field)
	GetRejectReasonProprietary() uint8
	// GetLengthInBytes returns the length in bytes
	GetLengthInBytes() uint16
	// GetLengthInBits returns the length in bits
	GetLengthInBits() uint16
	// Serialize serializes this type
	Serialize(writeBuffer utils.WriteBuffer) error
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for discriminator values.
///////////////////////

func (m *APDUReject) GetApduType() uint8 {
	return 0x6
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

func (m *APDUReject) InitializeParent(parent *APDU) {}

func (m *APDUReject) GetParent() *APDU {
	return m.APDU
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *APDUReject) GetOriginalInvokeId() uint8 {
	return m.OriginalInvokeId
}

func (m *APDUReject) GetRawRejectReason() uint8 {
	return m.RawRejectReason
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for virtual fields.
///////////////////////

func (m *APDUReject) GetIsRejectReasonProprietary() bool {
	return bool(bool((m.GetRawRejectReason()) > (63)))
}

func (m *APDUReject) GetRejectReason() RejectReason {
	return RejectReason(MapRejectReason(m.GetRawRejectReason(), m.GetIsRejectReasonProprietary()))
}

func (m *APDUReject) GetRejectReasonProprietary() uint8 {
	return uint8(utils.InlineIf(m.GetIsRejectReasonProprietary(), func() interface{} { return uint8(m.GetRawRejectReason()) }, func() interface{} { return uint8(uint8(0)) }).(uint8))
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewAPDUReject factory function for APDUReject
func NewAPDUReject(originalInvokeId uint8, rawRejectReason uint8, apduLength uint16) *APDUReject {
	_result := &APDUReject{
		OriginalInvokeId: originalInvokeId,
		RawRejectReason:  rawRejectReason,
		APDU:             NewAPDU(apduLength),
	}
	_result.Child = _result
	return _result
}

func CastAPDUReject(structType interface{}) *APDUReject {
	if casted, ok := structType.(APDUReject); ok {
		return &casted
	}
	if casted, ok := structType.(*APDUReject); ok {
		return casted
	}
	if casted, ok := structType.(APDU); ok {
		return CastAPDUReject(casted.Child)
	}
	if casted, ok := structType.(*APDU); ok {
		return CastAPDUReject(casted.Child)
	}
	return nil
}

func (m *APDUReject) GetTypeName() string {
	return "APDUReject"
}

func (m *APDUReject) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *APDUReject) GetLengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(m.GetParentLengthInBits())

	// Reserved Field (reserved)
	lengthInBits += 4

	// Simple field (originalInvokeId)
	lengthInBits += 8

	// Simple field (rawRejectReason)
	lengthInBits += 8

	// A virtual field doesn't have any in- or output.

	// A virtual field doesn't have any in- or output.

	// A virtual field doesn't have any in- or output.

	return lengthInBits
}

func (m *APDUReject) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func APDURejectParse(readBuffer utils.ReadBuffer, apduLength uint16) (*APDUReject, error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("APDUReject"); pullErr != nil {
		return nil, pullErr
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	// Reserved Field (Compartmentalized so the "reserved" variable can't leak)
	{
		reserved, _err := readBuffer.ReadUint8("reserved", 4)
		if _err != nil {
			return nil, errors.Wrap(_err, "Error parsing 'reserved' field")
		}
		if reserved != uint8(0x00) {
			log.Info().Fields(map[string]interface{}{
				"expected value": uint8(0x00),
				"got value":      reserved,
			}).Msg("Got unexpected response.")
		}
	}

	// Simple Field (originalInvokeId)
	_originalInvokeId, _originalInvokeIdErr := readBuffer.ReadUint8("originalInvokeId", 8)
	if _originalInvokeIdErr != nil {
		return nil, errors.Wrap(_originalInvokeIdErr, "Error parsing 'originalInvokeId' field")
	}
	originalInvokeId := _originalInvokeId

	// Simple Field (rawRejectReason)
	_rawRejectReason, _rawRejectReasonErr := readBuffer.ReadUint8("rawRejectReason", 8)
	if _rawRejectReasonErr != nil {
		return nil, errors.Wrap(_rawRejectReasonErr, "Error parsing 'rawRejectReason' field")
	}
	rawRejectReason := _rawRejectReason

	// Virtual field
	_isRejectReasonProprietary := bool((rawRejectReason) > (63))
	isRejectReasonProprietary := bool(_isRejectReasonProprietary)
	_ = isRejectReasonProprietary

	// Virtual field
	_rejectReason := MapRejectReason(rawRejectReason, isRejectReasonProprietary)
	rejectReason := RejectReason(_rejectReason)
	_ = rejectReason

	// Virtual field
	_rejectReasonProprietary := utils.InlineIf(isRejectReasonProprietary, func() interface{} { return uint8(rawRejectReason) }, func() interface{} { return uint8(uint8(0)) }).(uint8)
	rejectReasonProprietary := uint8(_rejectReasonProprietary)
	_ = rejectReasonProprietary

	if closeErr := readBuffer.CloseContext("APDUReject"); closeErr != nil {
		return nil, closeErr
	}

	// Create a partially initialized instance
	_child := &APDUReject{
		OriginalInvokeId: originalInvokeId,
		RawRejectReason:  rawRejectReason,
		APDU:             &APDU{},
	}
	_child.APDU.Child = _child
	return _child, nil
}

func (m *APDUReject) Serialize(writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	ser := func() error {
		if pushErr := writeBuffer.PushContext("APDUReject"); pushErr != nil {
			return pushErr
		}

		// Reserved Field (reserved)
		{
			_err := writeBuffer.WriteUint8("reserved", 4, uint8(0x00))
			if _err != nil {
				return errors.Wrap(_err, "Error serializing 'reserved' field")
			}
		}

		// Simple Field (originalInvokeId)
		originalInvokeId := uint8(m.OriginalInvokeId)
		_originalInvokeIdErr := writeBuffer.WriteUint8("originalInvokeId", 8, (originalInvokeId))
		if _originalInvokeIdErr != nil {
			return errors.Wrap(_originalInvokeIdErr, "Error serializing 'originalInvokeId' field")
		}

		// Simple Field (rawRejectReason)
		rawRejectReason := uint8(m.RawRejectReason)
		_rawRejectReasonErr := writeBuffer.WriteUint8("rawRejectReason", 8, (rawRejectReason))
		if _rawRejectReasonErr != nil {
			return errors.Wrap(_rawRejectReasonErr, "Error serializing 'rawRejectReason' field")
		}
		// Virtual field
		if _isRejectReasonProprietaryErr := writeBuffer.WriteVirtual("isRejectReasonProprietary", m.GetIsRejectReasonProprietary()); _isRejectReasonProprietaryErr != nil {
			return errors.Wrap(_isRejectReasonProprietaryErr, "Error serializing 'isRejectReasonProprietary' field")
		}
		// Virtual field
		if _rejectReasonErr := writeBuffer.WriteVirtual("rejectReason", m.GetRejectReason()); _rejectReasonErr != nil {
			return errors.Wrap(_rejectReasonErr, "Error serializing 'rejectReason' field")
		}
		// Virtual field
		if _rejectReasonProprietaryErr := writeBuffer.WriteVirtual("rejectReasonProprietary", m.GetRejectReasonProprietary()); _rejectReasonProprietaryErr != nil {
			return errors.Wrap(_rejectReasonProprietaryErr, "Error serializing 'rejectReasonProprietary' field")
		}

		if popErr := writeBuffer.PopContext("APDUReject"); popErr != nil {
			return popErr
		}
		return nil
	}
	return m.SerializeParent(writeBuffer, m, ser)
}

func (m *APDUReject) String() string {
	if m == nil {
		return "<nil>"
	}
	buffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := m.Serialize(buffer); err != nil {
		return err.Error()
	}
	return buffer.GetBox().String()
}
