/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/plc4go/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// BACnetConstructedDataLifeSafetyStateEntry is the data-structure of this message
type BACnetConstructedDataLifeSafetyStateEntry struct {
	RawData *BACnetApplicationTagEnumerated
}

// IBACnetConstructedDataLifeSafetyStateEntry is the corresponding interface of BACnetConstructedDataLifeSafetyStateEntry
type IBACnetConstructedDataLifeSafetyStateEntry interface {
	// GetRawData returns RawData (property field)
	GetRawData() *BACnetApplicationTagEnumerated
	// GetIsLifeSafetyStateProprietary returns IsLifeSafetyStateProprietary (virtual field)
	GetIsLifeSafetyStateProprietary() bool
	// GetLifeSafetyState returns LifeSafetyState (virtual field)
	GetLifeSafetyState() BACnetLifeSafetyState
	// GetLifeSafetyStateProprietary returns LifeSafetyStateProprietary (virtual field)
	GetLifeSafetyStateProprietary() uint16
	// GetLengthInBytes returns the length in bytes
	GetLengthInBytes() uint16
	// GetLengthInBits returns the length in bits
	GetLengthInBits() uint16
	// Serialize serializes this type
	Serialize(writeBuffer utils.WriteBuffer) error
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *BACnetConstructedDataLifeSafetyStateEntry) GetRawData() *BACnetApplicationTagEnumerated {
	return m.RawData
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for virtual fields.
///////////////////////

func (m *BACnetConstructedDataLifeSafetyStateEntry) GetIsLifeSafetyStateProprietary() bool {
	return bool(bool((m.GetRawData().GetActualValue()) > (255)))
}

func (m *BACnetConstructedDataLifeSafetyStateEntry) GetLifeSafetyState() BACnetLifeSafetyState {
	return BACnetLifeSafetyState(MapBACnetLifeSafetyState(m.GetRawData(), m.GetIsLifeSafetyStateProprietary()))
}

func (m *BACnetConstructedDataLifeSafetyStateEntry) GetLifeSafetyStateProprietary() uint16 {
	return uint16(utils.InlineIf(m.GetIsLifeSafetyStateProprietary(), func() interface{} { return uint16(m.GetRawData().GetActualValue()) }, func() interface{} { return uint16(uint16(0)) }).(uint16))
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewBACnetConstructedDataLifeSafetyStateEntry factory function for BACnetConstructedDataLifeSafetyStateEntry
func NewBACnetConstructedDataLifeSafetyStateEntry(rawData *BACnetApplicationTagEnumerated) *BACnetConstructedDataLifeSafetyStateEntry {
	return &BACnetConstructedDataLifeSafetyStateEntry{RawData: rawData}
}

func CastBACnetConstructedDataLifeSafetyStateEntry(structType interface{}) *BACnetConstructedDataLifeSafetyStateEntry {
	if casted, ok := structType.(BACnetConstructedDataLifeSafetyStateEntry); ok {
		return &casted
	}
	if casted, ok := structType.(*BACnetConstructedDataLifeSafetyStateEntry); ok {
		return casted
	}
	return nil
}

func (m *BACnetConstructedDataLifeSafetyStateEntry) GetTypeName() string {
	return "BACnetConstructedDataLifeSafetyStateEntry"
}

func (m *BACnetConstructedDataLifeSafetyStateEntry) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *BACnetConstructedDataLifeSafetyStateEntry) GetLengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(0)

	// Simple field (rawData)
	lengthInBits += m.RawData.GetLengthInBits()

	// A virtual field doesn't have any in- or output.

	// A virtual field doesn't have any in- or output.

	// A virtual field doesn't have any in- or output.

	return lengthInBits
}

func (m *BACnetConstructedDataLifeSafetyStateEntry) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func BACnetConstructedDataLifeSafetyStateEntryParse(readBuffer utils.ReadBuffer) (*BACnetConstructedDataLifeSafetyStateEntry, error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("BACnetConstructedDataLifeSafetyStateEntry"); pullErr != nil {
		return nil, pullErr
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	// Simple Field (rawData)
	if pullErr := readBuffer.PullContext("rawData"); pullErr != nil {
		return nil, pullErr
	}
	_rawData, _rawDataErr := BACnetApplicationTagParse(readBuffer)
	if _rawDataErr != nil {
		return nil, errors.Wrap(_rawDataErr, "Error parsing 'rawData' field")
	}
	rawData := CastBACnetApplicationTagEnumerated(_rawData)
	if closeErr := readBuffer.CloseContext("rawData"); closeErr != nil {
		return nil, closeErr
	}

	// Virtual field
	_isLifeSafetyStateProprietary := bool((rawData.GetActualValue()) > (255))
	isLifeSafetyStateProprietary := bool(_isLifeSafetyStateProprietary)
	_ = isLifeSafetyStateProprietary

	// Virtual field
	_lifeSafetyState := MapBACnetLifeSafetyState(rawData, isLifeSafetyStateProprietary)
	lifeSafetyState := BACnetLifeSafetyState(_lifeSafetyState)
	_ = lifeSafetyState

	// Virtual field
	_lifeSafetyStateProprietary := utils.InlineIf(isLifeSafetyStateProprietary, func() interface{} { return uint16(rawData.GetActualValue()) }, func() interface{} { return uint16(uint16(0)) }).(uint16)
	lifeSafetyStateProprietary := uint16(_lifeSafetyStateProprietary)
	_ = lifeSafetyStateProprietary

	if closeErr := readBuffer.CloseContext("BACnetConstructedDataLifeSafetyStateEntry"); closeErr != nil {
		return nil, closeErr
	}

	// Create the instance
	return NewBACnetConstructedDataLifeSafetyStateEntry(rawData), nil
}

func (m *BACnetConstructedDataLifeSafetyStateEntry) Serialize(writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	if pushErr := writeBuffer.PushContext("BACnetConstructedDataLifeSafetyStateEntry"); pushErr != nil {
		return pushErr
	}

	// Simple Field (rawData)
	if pushErr := writeBuffer.PushContext("rawData"); pushErr != nil {
		return pushErr
	}
	_rawDataErr := m.RawData.Serialize(writeBuffer)
	if popErr := writeBuffer.PopContext("rawData"); popErr != nil {
		return popErr
	}
	if _rawDataErr != nil {
		return errors.Wrap(_rawDataErr, "Error serializing 'rawData' field")
	}
	// Virtual field
	if _isLifeSafetyStateProprietaryErr := writeBuffer.WriteVirtual("isLifeSafetyStateProprietary", m.GetIsLifeSafetyStateProprietary()); _isLifeSafetyStateProprietaryErr != nil {
		return errors.Wrap(_isLifeSafetyStateProprietaryErr, "Error serializing 'isLifeSafetyStateProprietary' field")
	}
	// Virtual field
	if _lifeSafetyStateErr := writeBuffer.WriteVirtual("lifeSafetyState", m.GetLifeSafetyState()); _lifeSafetyStateErr != nil {
		return errors.Wrap(_lifeSafetyStateErr, "Error serializing 'lifeSafetyState' field")
	}
	// Virtual field
	if _lifeSafetyStateProprietaryErr := writeBuffer.WriteVirtual("lifeSafetyStateProprietary", m.GetLifeSafetyStateProprietary()); _lifeSafetyStateProprietaryErr != nil {
		return errors.Wrap(_lifeSafetyStateProprietaryErr, "Error serializing 'lifeSafetyStateProprietary' field")
	}

	if popErr := writeBuffer.PopContext("BACnetConstructedDataLifeSafetyStateEntry"); popErr != nil {
		return popErr
	}
	return nil
}

func (m *BACnetConstructedDataLifeSafetyStateEntry) String() string {
	if m == nil {
		return "<nil>"
	}
	buffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := m.Serialize(buffer); err != nil {
		return err.Error()
	}
	return buffer.GetBox().String()
}
