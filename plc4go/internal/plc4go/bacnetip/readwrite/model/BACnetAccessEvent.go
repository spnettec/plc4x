/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/plc4go/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// BACnetAccessEvent is an enum
type BACnetAccessEvent uint16

type IBACnetAccessEvent interface {
	Serialize(writeBuffer utils.WriteBuffer) error
}

const (
	BACnetAccessEvent_VENDOR_PROPRIETARY_VALUE BACnetAccessEvent = 0xFFFF
)

var BACnetAccessEventValues []BACnetAccessEvent

func init() {
	_ = errors.New
	BACnetAccessEventValues = []BACnetAccessEvent{
		BACnetAccessEvent_VENDOR_PROPRIETARY_VALUE,
	}
}

func BACnetAccessEventByValue(value uint16) BACnetAccessEvent {
	switch value {
	case 0xFFFF:
		return BACnetAccessEvent_VENDOR_PROPRIETARY_VALUE
	}
	return 0
}

func BACnetAccessEventByName(value string) BACnetAccessEvent {
	switch value {
	case "VENDOR_PROPRIETARY_VALUE":
		return BACnetAccessEvent_VENDOR_PROPRIETARY_VALUE
	}
	return 0
}

func BACnetAccessEventKnows(value uint16) bool {
	for _, typeValue := range BACnetAccessEventValues {
		if uint16(typeValue) == value {
			return true
		}
	}
	return false
}

func CastBACnetAccessEvent(structType interface{}) BACnetAccessEvent {
	castFunc := func(typ interface{}) BACnetAccessEvent {
		if sBACnetAccessEvent, ok := typ.(BACnetAccessEvent); ok {
			return sBACnetAccessEvent
		}
		return 0
	}
	return castFunc(structType)
}

func (m BACnetAccessEvent) GetLengthInBits() uint16 {
	return 16
}

func (m BACnetAccessEvent) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func BACnetAccessEventParse(readBuffer utils.ReadBuffer) (BACnetAccessEvent, error) {
	val, err := readBuffer.ReadUint16("BACnetAccessEvent", 16)
	if err != nil {
		return 0, nil
	}
	return BACnetAccessEventByValue(val), nil
}

func (e BACnetAccessEvent) Serialize(writeBuffer utils.WriteBuffer) error {
	return writeBuffer.WriteUint16("BACnetAccessEvent", 16, uint16(e), utils.WithAdditionalStringRepresentation(e.name()))
}

func (e BACnetAccessEvent) name() string {
	switch e {
	case BACnetAccessEvent_VENDOR_PROPRIETARY_VALUE:
		return "VENDOR_PROPRIETARY_VALUE"
	}
	return ""
}

func (e BACnetAccessEvent) String() string {
	return e.name()
}
