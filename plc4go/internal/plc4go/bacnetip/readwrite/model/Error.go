/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/plc4go/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// Error is the data-structure of this message
type Error struct {
	RawErrorClass *BACnetApplicationTagEnumerated
	RawErrorCode  *BACnetApplicationTagEnumerated
}

// IError is the corresponding interface of Error
type IError interface {
	// GetRawErrorClass returns RawErrorClass (property field)
	GetRawErrorClass() *BACnetApplicationTagEnumerated
	// GetRawErrorCode returns RawErrorCode (property field)
	GetRawErrorCode() *BACnetApplicationTagEnumerated
	// GetErrorClass returns ErrorClass (virtual field)
	GetErrorClass() ErrorClass
	// GetIsErrorClassProprietary returns IsErrorClassProprietary (virtual field)
	GetIsErrorClassProprietary() bool
	// GetErrorClassProprietary returns ErrorClassProprietary (virtual field)
	GetErrorClassProprietary() uint16
	// GetErrorCode returns ErrorCode (virtual field)
	GetErrorCode() ErrorCode
	// GetIsErrorCodeProprietary returns IsErrorCodeProprietary (virtual field)
	GetIsErrorCodeProprietary() bool
	// GetErrorCodeProprietary returns ErrorCodeProprietary (virtual field)
	GetErrorCodeProprietary() uint16
	// GetLengthInBytes returns the length in bytes
	GetLengthInBytes() uint16
	// GetLengthInBits returns the length in bits
	GetLengthInBits() uint16
	// Serialize serializes this type
	Serialize(writeBuffer utils.WriteBuffer) error
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *Error) GetRawErrorClass() *BACnetApplicationTagEnumerated {
	return m.RawErrorClass
}

func (m *Error) GetRawErrorCode() *BACnetApplicationTagEnumerated {
	return m.RawErrorCode
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for virtual fields.
///////////////////////

func (m *Error) GetErrorClass() ErrorClass {
	return ErrorClass(MapErrorClass(m.GetRawErrorClass()))
}

func (m *Error) GetIsErrorClassProprietary() bool {
	return bool(bool((m.GetRawErrorClass().GetActualValue()) > (63)))
}

func (m *Error) GetErrorClassProprietary() uint16 {
	return uint16(m.GetRawErrorClass().GetActualValue())
}

func (m *Error) GetErrorCode() ErrorCode {
	return ErrorCode(MapErrorCode(m.GetRawErrorCode()))
}

func (m *Error) GetIsErrorCodeProprietary() bool {
	return bool(bool((m.GetRawErrorCode().GetActualValue()) > (255)))
}

func (m *Error) GetErrorCodeProprietary() uint16 {
	return uint16(m.GetRawErrorCode().GetActualValue())
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewError factory function for Error
func NewError(rawErrorClass *BACnetApplicationTagEnumerated, rawErrorCode *BACnetApplicationTagEnumerated) *Error {
	return &Error{RawErrorClass: rawErrorClass, RawErrorCode: rawErrorCode}
}

func CastError(structType interface{}) *Error {
	if casted, ok := structType.(Error); ok {
		return &casted
	}
	if casted, ok := structType.(*Error); ok {
		return casted
	}
	return nil
}

func (m *Error) GetTypeName() string {
	return "Error"
}

func (m *Error) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *Error) GetLengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(0)

	// Simple field (rawErrorClass)
	lengthInBits += m.RawErrorClass.GetLengthInBits()

	// A virtual field doesn't have any in- or output.

	// A virtual field doesn't have any in- or output.

	// A virtual field doesn't have any in- or output.

	// Simple field (rawErrorCode)
	lengthInBits += m.RawErrorCode.GetLengthInBits()

	// A virtual field doesn't have any in- or output.

	// A virtual field doesn't have any in- or output.

	// A virtual field doesn't have any in- or output.

	return lengthInBits
}

func (m *Error) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func ErrorParse(readBuffer utils.ReadBuffer) (*Error, error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("Error"); pullErr != nil {
		return nil, pullErr
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	// Simple Field (rawErrorClass)
	if pullErr := readBuffer.PullContext("rawErrorClass"); pullErr != nil {
		return nil, pullErr
	}
	_rawErrorClass, _rawErrorClassErr := BACnetApplicationTagParse(readBuffer)
	if _rawErrorClassErr != nil {
		return nil, errors.Wrap(_rawErrorClassErr, "Error parsing 'rawErrorClass' field")
	}
	rawErrorClass := CastBACnetApplicationTagEnumerated(_rawErrorClass)
	if closeErr := readBuffer.CloseContext("rawErrorClass"); closeErr != nil {
		return nil, closeErr
	}

	// Virtual field
	_errorClass := MapErrorClass(rawErrorClass)
	errorClass := ErrorClass(_errorClass)
	_ = errorClass

	// Virtual field
	_isErrorClassProprietary := bool((rawErrorClass.GetActualValue()) > (63))
	isErrorClassProprietary := bool(_isErrorClassProprietary)
	_ = isErrorClassProprietary

	// Virtual field
	_errorClassProprietary := rawErrorClass.GetActualValue()
	errorClassProprietary := uint16(_errorClassProprietary)
	_ = errorClassProprietary

	// Simple Field (rawErrorCode)
	if pullErr := readBuffer.PullContext("rawErrorCode"); pullErr != nil {
		return nil, pullErr
	}
	_rawErrorCode, _rawErrorCodeErr := BACnetApplicationTagParse(readBuffer)
	if _rawErrorCodeErr != nil {
		return nil, errors.Wrap(_rawErrorCodeErr, "Error parsing 'rawErrorCode' field")
	}
	rawErrorCode := CastBACnetApplicationTagEnumerated(_rawErrorCode)
	if closeErr := readBuffer.CloseContext("rawErrorCode"); closeErr != nil {
		return nil, closeErr
	}

	// Virtual field
	_errorCode := MapErrorCode(rawErrorCode)
	errorCode := ErrorCode(_errorCode)
	_ = errorCode

	// Virtual field
	_isErrorCodeProprietary := bool((rawErrorCode.GetActualValue()) > (255))
	isErrorCodeProprietary := bool(_isErrorCodeProprietary)
	_ = isErrorCodeProprietary

	// Virtual field
	_errorCodeProprietary := rawErrorCode.GetActualValue()
	errorCodeProprietary := uint16(_errorCodeProprietary)
	_ = errorCodeProprietary

	if closeErr := readBuffer.CloseContext("Error"); closeErr != nil {
		return nil, closeErr
	}

	// Create the instance
	return NewError(rawErrorClass, rawErrorCode), nil
}

func (m *Error) Serialize(writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	if pushErr := writeBuffer.PushContext("Error"); pushErr != nil {
		return pushErr
	}

	// Simple Field (rawErrorClass)
	if pushErr := writeBuffer.PushContext("rawErrorClass"); pushErr != nil {
		return pushErr
	}
	_rawErrorClassErr := m.RawErrorClass.Serialize(writeBuffer)
	if popErr := writeBuffer.PopContext("rawErrorClass"); popErr != nil {
		return popErr
	}
	if _rawErrorClassErr != nil {
		return errors.Wrap(_rawErrorClassErr, "Error serializing 'rawErrorClass' field")
	}
	// Virtual field
	if _errorClassErr := writeBuffer.WriteVirtual("errorClass", m.GetErrorClass()); _errorClassErr != nil {
		return errors.Wrap(_errorClassErr, "Error serializing 'errorClass' field")
	}
	// Virtual field
	if _isErrorClassProprietaryErr := writeBuffer.WriteVirtual("isErrorClassProprietary", m.GetIsErrorClassProprietary()); _isErrorClassProprietaryErr != nil {
		return errors.Wrap(_isErrorClassProprietaryErr, "Error serializing 'isErrorClassProprietary' field")
	}
	// Virtual field
	if _errorClassProprietaryErr := writeBuffer.WriteVirtual("errorClassProprietary", m.GetErrorClassProprietary()); _errorClassProprietaryErr != nil {
		return errors.Wrap(_errorClassProprietaryErr, "Error serializing 'errorClassProprietary' field")
	}

	// Simple Field (rawErrorCode)
	if pushErr := writeBuffer.PushContext("rawErrorCode"); pushErr != nil {
		return pushErr
	}
	_rawErrorCodeErr := m.RawErrorCode.Serialize(writeBuffer)
	if popErr := writeBuffer.PopContext("rawErrorCode"); popErr != nil {
		return popErr
	}
	if _rawErrorCodeErr != nil {
		return errors.Wrap(_rawErrorCodeErr, "Error serializing 'rawErrorCode' field")
	}
	// Virtual field
	if _errorCodeErr := writeBuffer.WriteVirtual("errorCode", m.GetErrorCode()); _errorCodeErr != nil {
		return errors.Wrap(_errorCodeErr, "Error serializing 'errorCode' field")
	}
	// Virtual field
	if _isErrorCodeProprietaryErr := writeBuffer.WriteVirtual("isErrorCodeProprietary", m.GetIsErrorCodeProprietary()); _isErrorCodeProprietaryErr != nil {
		return errors.Wrap(_isErrorCodeProprietaryErr, "Error serializing 'isErrorCodeProprietary' field")
	}
	// Virtual field
	if _errorCodeProprietaryErr := writeBuffer.WriteVirtual("errorCodeProprietary", m.GetErrorCodeProprietary()); _errorCodeProprietaryErr != nil {
		return errors.Wrap(_errorCodeProprietaryErr, "Error serializing 'errorCodeProprietary' field")
	}

	if popErr := writeBuffer.PopContext("Error"); popErr != nil {
		return popErr
	}
	return nil
}

func (m *Error) String() string {
	if m == nil {
		return "<nil>"
	}
	buffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := m.Serialize(buffer); err != nil {
		return err.Error()
	}
	return buffer.GetBox().String()
}
