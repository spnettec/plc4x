/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/plc4go/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// RejectReason is an enum
type RejectReason uint8

type IRejectReason interface {
	Serialize(writeBuffer utils.WriteBuffer) error
}

const (
	RejectReason_OTHER                       RejectReason = 0x0
	RejectReason_BUFFER_OVERFLOW             RejectReason = 0x1
	RejectReason_INCONSISTENT_PARAMETERS     RejectReason = 0x2
	RejectReason_INVALID_PARAMETER_DATA_TYPE RejectReason = 0x3
	RejectReason_INVALID_TAG                 RejectReason = 0x4
	RejectReason_MISSING_REQUIRED_PARAMETER  RejectReason = 0x5
	RejectReason_PARAMETER_OUT_OF_RANGE      RejectReason = 0x6
	RejectReason_TOO_MANY_ARGUMENTS          RejectReason = 0x7
	RejectReason_UNDEFINED_ENUMERATION       RejectReason = 0x8
	RejectReason_UNRECOGNIZED_SERVICE        RejectReason = 0x9
	RejectReason_VENDOR_PROPRIETARY_VALUE    RejectReason = 0xFF
)

var RejectReasonValues []RejectReason

func init() {
	_ = errors.New
	RejectReasonValues = []RejectReason{
		RejectReason_OTHER,
		RejectReason_BUFFER_OVERFLOW,
		RejectReason_INCONSISTENT_PARAMETERS,
		RejectReason_INVALID_PARAMETER_DATA_TYPE,
		RejectReason_INVALID_TAG,
		RejectReason_MISSING_REQUIRED_PARAMETER,
		RejectReason_PARAMETER_OUT_OF_RANGE,
		RejectReason_TOO_MANY_ARGUMENTS,
		RejectReason_UNDEFINED_ENUMERATION,
		RejectReason_UNRECOGNIZED_SERVICE,
		RejectReason_VENDOR_PROPRIETARY_VALUE,
	}
}

func RejectReasonByValue(value uint8) RejectReason {
	switch value {
	case 0x0:
		return RejectReason_OTHER
	case 0x1:
		return RejectReason_BUFFER_OVERFLOW
	case 0x2:
		return RejectReason_INCONSISTENT_PARAMETERS
	case 0x3:
		return RejectReason_INVALID_PARAMETER_DATA_TYPE
	case 0x4:
		return RejectReason_INVALID_TAG
	case 0x5:
		return RejectReason_MISSING_REQUIRED_PARAMETER
	case 0x6:
		return RejectReason_PARAMETER_OUT_OF_RANGE
	case 0x7:
		return RejectReason_TOO_MANY_ARGUMENTS
	case 0x8:
		return RejectReason_UNDEFINED_ENUMERATION
	case 0x9:
		return RejectReason_UNRECOGNIZED_SERVICE
	case 0xFF:
		return RejectReason_VENDOR_PROPRIETARY_VALUE
	}
	return 0
}

func RejectReasonByName(value string) RejectReason {
	switch value {
	case "OTHER":
		return RejectReason_OTHER
	case "BUFFER_OVERFLOW":
		return RejectReason_BUFFER_OVERFLOW
	case "INCONSISTENT_PARAMETERS":
		return RejectReason_INCONSISTENT_PARAMETERS
	case "INVALID_PARAMETER_DATA_TYPE":
		return RejectReason_INVALID_PARAMETER_DATA_TYPE
	case "INVALID_TAG":
		return RejectReason_INVALID_TAG
	case "MISSING_REQUIRED_PARAMETER":
		return RejectReason_MISSING_REQUIRED_PARAMETER
	case "PARAMETER_OUT_OF_RANGE":
		return RejectReason_PARAMETER_OUT_OF_RANGE
	case "TOO_MANY_ARGUMENTS":
		return RejectReason_TOO_MANY_ARGUMENTS
	case "UNDEFINED_ENUMERATION":
		return RejectReason_UNDEFINED_ENUMERATION
	case "UNRECOGNIZED_SERVICE":
		return RejectReason_UNRECOGNIZED_SERVICE
	case "VENDOR_PROPRIETARY_VALUE":
		return RejectReason_VENDOR_PROPRIETARY_VALUE
	}
	return 0
}

func RejectReasonKnows(value uint8) bool {
	for _, typeValue := range RejectReasonValues {
		if uint8(typeValue) == value {
			return true
		}
	}
	return false
}

func CastRejectReason(structType interface{}) RejectReason {
	castFunc := func(typ interface{}) RejectReason {
		if sRejectReason, ok := typ.(RejectReason); ok {
			return sRejectReason
		}
		return 0
	}
	return castFunc(structType)
}

func (m RejectReason) GetLengthInBits() uint16 {
	return 8
}

func (m RejectReason) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func RejectReasonParse(readBuffer utils.ReadBuffer) (RejectReason, error) {
	val, err := readBuffer.ReadUint8("RejectReason", 8)
	if err != nil {
		return 0, nil
	}
	return RejectReasonByValue(val), nil
}

func (e RejectReason) Serialize(writeBuffer utils.WriteBuffer) error {
	return writeBuffer.WriteUint8("RejectReason", 8, uint8(e), utils.WithAdditionalStringRepresentation(e.name()))
}

func (e RejectReason) name() string {
	switch e {
	case RejectReason_OTHER:
		return "OTHER"
	case RejectReason_BUFFER_OVERFLOW:
		return "BUFFER_OVERFLOW"
	case RejectReason_INCONSISTENT_PARAMETERS:
		return "INCONSISTENT_PARAMETERS"
	case RejectReason_INVALID_PARAMETER_DATA_TYPE:
		return "INVALID_PARAMETER_DATA_TYPE"
	case RejectReason_INVALID_TAG:
		return "INVALID_TAG"
	case RejectReason_MISSING_REQUIRED_PARAMETER:
		return "MISSING_REQUIRED_PARAMETER"
	case RejectReason_PARAMETER_OUT_OF_RANGE:
		return "PARAMETER_OUT_OF_RANGE"
	case RejectReason_TOO_MANY_ARGUMENTS:
		return "TOO_MANY_ARGUMENTS"
	case RejectReason_UNDEFINED_ENUMERATION:
		return "UNDEFINED_ENUMERATION"
	case RejectReason_UNRECOGNIZED_SERVICE:
		return "UNRECOGNIZED_SERVICE"
	case RejectReason_VENDOR_PROPRIETARY_VALUE:
		return "VENDOR_PROPRIETARY_VALUE"
	}
	return ""
}

func (e RejectReason) String() string {
	return e.name()
}
