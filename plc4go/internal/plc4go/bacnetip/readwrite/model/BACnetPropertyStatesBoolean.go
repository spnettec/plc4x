/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/plc4go/spi/utils"
	"github.com/pkg/errors"
	"io"
)

// Code generated by code-generation. DO NOT EDIT.

// The data-structure of this message
type BACnetPropertyStatesBoolean struct {
	*BACnetPropertyStates
	BooleanValue *BACnetContextTagBoolean
}

// The corresponding interface
type IBACnetPropertyStatesBoolean interface {
	LengthInBytes() uint16
	LengthInBits() uint16
	Serialize(writeBuffer utils.WriteBuffer) error
}

///////////////////////////////////////////////////////////
// Accessors for discriminator values.
///////////////////////////////////////////////////////////
func (m *BACnetPropertyStatesBoolean) PeekedTagNumber() uint8 {
	return uint8(0)
}

func (m *BACnetPropertyStatesBoolean) InitializeParent(parent *BACnetPropertyStates, openingTag *BACnetOpeningTag, peekedTagHeader *BACnetTagHeader, closingTag *BACnetClosingTag, peekedTagNumber uint8) {
	m.OpeningTag = openingTag
	m.PeekedTagHeader = peekedTagHeader
	m.ClosingTag = closingTag
}

func NewBACnetPropertyStatesBoolean(booleanValue *BACnetContextTagBoolean, openingTag *BACnetOpeningTag, peekedTagHeader *BACnetTagHeader, closingTag *BACnetClosingTag, peekedTagNumber uint8) *BACnetPropertyStates {
	child := &BACnetPropertyStatesBoolean{
		BooleanValue:         booleanValue,
		BACnetPropertyStates: NewBACnetPropertyStates(openingTag, peekedTagHeader, closingTag, peekedTagNumber),
	}
	child.Child = child
	return child.BACnetPropertyStates
}

func CastBACnetPropertyStatesBoolean(structType interface{}) *BACnetPropertyStatesBoolean {
	castFunc := func(typ interface{}) *BACnetPropertyStatesBoolean {
		if casted, ok := typ.(BACnetPropertyStatesBoolean); ok {
			return &casted
		}
		if casted, ok := typ.(*BACnetPropertyStatesBoolean); ok {
			return casted
		}
		if casted, ok := typ.(BACnetPropertyStates); ok {
			return CastBACnetPropertyStatesBoolean(casted.Child)
		}
		if casted, ok := typ.(*BACnetPropertyStates); ok {
			return CastBACnetPropertyStatesBoolean(casted.Child)
		}
		return nil
	}
	return castFunc(structType)
}

func (m *BACnetPropertyStatesBoolean) GetTypeName() string {
	return "BACnetPropertyStatesBoolean"
}

func (m *BACnetPropertyStatesBoolean) LengthInBits() uint16 {
	return m.LengthInBitsConditional(false)
}

func (m *BACnetPropertyStatesBoolean) LengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(m.ParentLengthInBits())

	// Optional Field (booleanValue)
	if m.BooleanValue != nil {
		lengthInBits += (*m.BooleanValue).LengthInBits()
	}

	return lengthInBits
}

func (m *BACnetPropertyStatesBoolean) LengthInBytes() uint16 {
	return m.LengthInBits() / 8
}

func BACnetPropertyStatesBooleanParse(readBuffer utils.ReadBuffer, tagNumber uint8, peekedTagNumber uint8) (*BACnetPropertyStates, error) {
	if pullErr := readBuffer.PullContext("BACnetPropertyStatesBoolean"); pullErr != nil {
		return nil, pullErr
	}

	// Optional Field (booleanValue) (Can be skipped, if a given expression evaluates to false)
	var booleanValue *BACnetContextTagBoolean = nil
	{
		currentPos := readBuffer.GetPos()
		if pullErr := readBuffer.PullContext("booleanValue"); pullErr != nil {
			return nil, pullErr
		}
		_val, _err := BACnetContextTagParse(readBuffer, peekedTagNumber, BACnetDataType_BOOLEAN)
		switch {
		case _err != nil && _err != utils.ParseAssertError && !errors.Is(_err, io.EOF):
			return nil, errors.Wrap(_err, "Error parsing 'booleanValue' field")
		case _err == utils.ParseAssertError || errors.Is(_err, io.EOF):
			readBuffer.Reset(currentPos)
		default:
			booleanValue = CastBACnetContextTagBoolean(_val)
			if closeErr := readBuffer.CloseContext("booleanValue"); closeErr != nil {
				return nil, closeErr
			}
		}
	}

	if closeErr := readBuffer.CloseContext("BACnetPropertyStatesBoolean"); closeErr != nil {
		return nil, closeErr
	}

	// Create a partially initialized instance
	_child := &BACnetPropertyStatesBoolean{
		BooleanValue:         CastBACnetContextTagBoolean(booleanValue),
		BACnetPropertyStates: &BACnetPropertyStates{},
	}
	_child.BACnetPropertyStates.Child = _child
	return _child.BACnetPropertyStates, nil
}

func (m *BACnetPropertyStatesBoolean) Serialize(writeBuffer utils.WriteBuffer) error {
	ser := func() error {
		if pushErr := writeBuffer.PushContext("BACnetPropertyStatesBoolean"); pushErr != nil {
			return pushErr
		}

		// Optional Field (booleanValue) (Can be skipped, if the value is null)
		var booleanValue *BACnetContextTagBoolean = nil
		if m.BooleanValue != nil {
			if pushErr := writeBuffer.PushContext("booleanValue"); pushErr != nil {
				return pushErr
			}
			booleanValue = m.BooleanValue
			_booleanValueErr := booleanValue.Serialize(writeBuffer)
			if popErr := writeBuffer.PopContext("booleanValue"); popErr != nil {
				return popErr
			}
			if _booleanValueErr != nil {
				return errors.Wrap(_booleanValueErr, "Error serializing 'booleanValue' field")
			}
		}

		if popErr := writeBuffer.PopContext("BACnetPropertyStatesBoolean"); popErr != nil {
			return popErr
		}
		return nil
	}
	return m.SerializeParent(writeBuffer, m, ser)
}

func (m *BACnetPropertyStatesBoolean) String() string {
	if m == nil {
		return "<nil>"
	}
	buffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	m.Serialize(buffer)
	return buffer.GetBox().String()
}
