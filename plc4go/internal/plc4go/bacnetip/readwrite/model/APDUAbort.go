/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/plc4go/spi/utils"
	"github.com/pkg/errors"
	"github.com/rs/zerolog/log"
)

// Code generated by code-generation. DO NOT EDIT.

// APDUAbort is the data-structure of this message
type APDUAbort struct {
	*APDU
	Server           bool
	OriginalInvokeId uint8
	RawAbortReason   uint8

	// Arguments.
	ApduLength uint16
}

// IAPDUAbort is the corresponding interface of APDUAbort
type IAPDUAbort interface {
	IAPDU
	// GetServer returns Server (property field)
	GetServer() bool
	// GetOriginalInvokeId returns OriginalInvokeId (property field)
	GetOriginalInvokeId() uint8
	// GetRawAbortReason returns RawAbortReason (property field)
	GetRawAbortReason() uint8
	// GetIsAbortReasonProprietary returns IsAbortReasonProprietary (virtual field)
	GetIsAbortReasonProprietary() bool
	// GetAbortReason returns AbortReason (virtual field)
	GetAbortReason() AbortReason
	// GetAbortReasonProprietary returns AbortReasonProprietary (virtual field)
	GetAbortReasonProprietary() uint8
	// GetLengthInBytes returns the length in bytes
	GetLengthInBytes() uint16
	// GetLengthInBits returns the length in bits
	GetLengthInBits() uint16
	// Serialize serializes this type
	Serialize(writeBuffer utils.WriteBuffer) error
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for discriminator values.
///////////////////////

func (m *APDUAbort) GetApduType() uint8 {
	return 0x7
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

func (m *APDUAbort) InitializeParent(parent *APDU) {}

func (m *APDUAbort) GetParent() *APDU {
	return m.APDU
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *APDUAbort) GetServer() bool {
	return m.Server
}

func (m *APDUAbort) GetOriginalInvokeId() uint8 {
	return m.OriginalInvokeId
}

func (m *APDUAbort) GetRawAbortReason() uint8 {
	return m.RawAbortReason
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for virtual fields.
///////////////////////

func (m *APDUAbort) GetIsAbortReasonProprietary() bool {
	return bool(bool((m.GetRawAbortReason()) > (63)))
}

func (m *APDUAbort) GetAbortReason() AbortReason {
	return AbortReason(MapAbortReason(m.GetRawAbortReason(), m.GetIsAbortReasonProprietary()))
}

func (m *APDUAbort) GetAbortReasonProprietary() uint8 {
	return uint8(utils.InlineIf(m.GetIsAbortReasonProprietary(), func() interface{} { return uint8(m.GetRawAbortReason()) }, func() interface{} { return uint8(uint8(0)) }).(uint8))
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewAPDUAbort factory function for APDUAbort
func NewAPDUAbort(server bool, originalInvokeId uint8, rawAbortReason uint8, apduLength uint16) *APDUAbort {
	_result := &APDUAbort{
		Server:           server,
		OriginalInvokeId: originalInvokeId,
		RawAbortReason:   rawAbortReason,
		APDU:             NewAPDU(apduLength),
	}
	_result.Child = _result
	return _result
}

func CastAPDUAbort(structType interface{}) *APDUAbort {
	if casted, ok := structType.(APDUAbort); ok {
		return &casted
	}
	if casted, ok := structType.(*APDUAbort); ok {
		return casted
	}
	if casted, ok := structType.(APDU); ok {
		return CastAPDUAbort(casted.Child)
	}
	if casted, ok := structType.(*APDU); ok {
		return CastAPDUAbort(casted.Child)
	}
	return nil
}

func (m *APDUAbort) GetTypeName() string {
	return "APDUAbort"
}

func (m *APDUAbort) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *APDUAbort) GetLengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(m.GetParentLengthInBits())

	// Reserved Field (reserved)
	lengthInBits += 3

	// Simple field (server)
	lengthInBits += 1

	// Simple field (originalInvokeId)
	lengthInBits += 8

	// Simple field (rawAbortReason)
	lengthInBits += 8

	// A virtual field doesn't have any in- or output.

	// A virtual field doesn't have any in- or output.

	// A virtual field doesn't have any in- or output.

	return lengthInBits
}

func (m *APDUAbort) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func APDUAbortParse(readBuffer utils.ReadBuffer, apduLength uint16) (*APDUAbort, error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("APDUAbort"); pullErr != nil {
		return nil, pullErr
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	// Reserved Field (Compartmentalized so the "reserved" variable can't leak)
	{
		reserved, _err := readBuffer.ReadUint8("reserved", 3)
		if _err != nil {
			return nil, errors.Wrap(_err, "Error parsing 'reserved' field")
		}
		if reserved != uint8(0x00) {
			log.Info().Fields(map[string]interface{}{
				"expected value": uint8(0x00),
				"got value":      reserved,
			}).Msg("Got unexpected response.")
		}
	}

	// Simple Field (server)
	_server, _serverErr := readBuffer.ReadBit("server")
	if _serverErr != nil {
		return nil, errors.Wrap(_serverErr, "Error parsing 'server' field")
	}
	server := _server

	// Simple Field (originalInvokeId)
	_originalInvokeId, _originalInvokeIdErr := readBuffer.ReadUint8("originalInvokeId", 8)
	if _originalInvokeIdErr != nil {
		return nil, errors.Wrap(_originalInvokeIdErr, "Error parsing 'originalInvokeId' field")
	}
	originalInvokeId := _originalInvokeId

	// Simple Field (rawAbortReason)
	_rawAbortReason, _rawAbortReasonErr := readBuffer.ReadUint8("rawAbortReason", 8)
	if _rawAbortReasonErr != nil {
		return nil, errors.Wrap(_rawAbortReasonErr, "Error parsing 'rawAbortReason' field")
	}
	rawAbortReason := _rawAbortReason

	// Virtual field
	_isAbortReasonProprietary := bool((rawAbortReason) > (63))
	isAbortReasonProprietary := bool(_isAbortReasonProprietary)
	_ = isAbortReasonProprietary

	// Virtual field
	_abortReason := MapAbortReason(rawAbortReason, isAbortReasonProprietary)
	abortReason := AbortReason(_abortReason)
	_ = abortReason

	// Virtual field
	_abortReasonProprietary := utils.InlineIf(isAbortReasonProprietary, func() interface{} { return uint8(rawAbortReason) }, func() interface{} { return uint8(uint8(0)) }).(uint8)
	abortReasonProprietary := uint8(_abortReasonProprietary)
	_ = abortReasonProprietary

	if closeErr := readBuffer.CloseContext("APDUAbort"); closeErr != nil {
		return nil, closeErr
	}

	// Create a partially initialized instance
	_child := &APDUAbort{
		Server:           server,
		OriginalInvokeId: originalInvokeId,
		RawAbortReason:   rawAbortReason,
		APDU:             &APDU{},
	}
	_child.APDU.Child = _child
	return _child, nil
}

func (m *APDUAbort) Serialize(writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	ser := func() error {
		if pushErr := writeBuffer.PushContext("APDUAbort"); pushErr != nil {
			return pushErr
		}

		// Reserved Field (reserved)
		{
			_err := writeBuffer.WriteUint8("reserved", 3, uint8(0x00))
			if _err != nil {
				return errors.Wrap(_err, "Error serializing 'reserved' field")
			}
		}

		// Simple Field (server)
		server := bool(m.Server)
		_serverErr := writeBuffer.WriteBit("server", (server))
		if _serverErr != nil {
			return errors.Wrap(_serverErr, "Error serializing 'server' field")
		}

		// Simple Field (originalInvokeId)
		originalInvokeId := uint8(m.OriginalInvokeId)
		_originalInvokeIdErr := writeBuffer.WriteUint8("originalInvokeId", 8, (originalInvokeId))
		if _originalInvokeIdErr != nil {
			return errors.Wrap(_originalInvokeIdErr, "Error serializing 'originalInvokeId' field")
		}

		// Simple Field (rawAbortReason)
		rawAbortReason := uint8(m.RawAbortReason)
		_rawAbortReasonErr := writeBuffer.WriteUint8("rawAbortReason", 8, (rawAbortReason))
		if _rawAbortReasonErr != nil {
			return errors.Wrap(_rawAbortReasonErr, "Error serializing 'rawAbortReason' field")
		}
		// Virtual field
		if _isAbortReasonProprietaryErr := writeBuffer.WriteVirtual("isAbortReasonProprietary", m.GetIsAbortReasonProprietary()); _isAbortReasonProprietaryErr != nil {
			return errors.Wrap(_isAbortReasonProprietaryErr, "Error serializing 'isAbortReasonProprietary' field")
		}
		// Virtual field
		if _abortReasonErr := writeBuffer.WriteVirtual("abortReason", m.GetAbortReason()); _abortReasonErr != nil {
			return errors.Wrap(_abortReasonErr, "Error serializing 'abortReason' field")
		}
		// Virtual field
		if _abortReasonProprietaryErr := writeBuffer.WriteVirtual("abortReasonProprietary", m.GetAbortReasonProprietary()); _abortReasonProprietaryErr != nil {
			return errors.Wrap(_abortReasonProprietaryErr, "Error serializing 'abortReasonProprietary' field")
		}

		if popErr := writeBuffer.PopContext("APDUAbort"); popErr != nil {
			return popErr
		}
		return nil
	}
	return m.SerializeParent(writeBuffer, m, ser)
}

func (m *APDUAbort) String() string {
	if m == nil {
		return "<nil>"
	}
	buffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := m.Serialize(buffer); err != nil {
		return err.Error()
	}
	return buffer.GetBox().String()
}
