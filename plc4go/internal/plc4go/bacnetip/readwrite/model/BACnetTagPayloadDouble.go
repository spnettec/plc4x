/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/plc4go/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// The data-structure of this message
type BACnetTagPayloadDouble struct {
	Value float64
}

// The corresponding interface
type IBACnetTagPayloadDouble interface {
	// GetValue returns Value
	GetValue() float64
	// LengthInBytes returns the length in bytes
	LengthInBytes() uint16
	// LengthInBits returns the length in bits
	LengthInBits() uint16
	// Serialize serializes this type
	Serialize(writeBuffer utils.WriteBuffer) error
}

///////////////////////////////////////////////////////////
// Accessors for property fields.
///////////////////////////////////////////////////////////
func (m *BACnetTagPayloadDouble) GetValue() float64 {
	return m.Value
}

///////////////////////////////////////////////////////////
// Accessors for virtual fields.
///////////////////////////////////////////////////////////

func NewBACnetTagPayloadDouble(value float64) *BACnetTagPayloadDouble {
	return &BACnetTagPayloadDouble{Value: value}
}

func CastBACnetTagPayloadDouble(structType interface{}) *BACnetTagPayloadDouble {
	castFunc := func(typ interface{}) *BACnetTagPayloadDouble {
		if casted, ok := typ.(BACnetTagPayloadDouble); ok {
			return &casted
		}
		if casted, ok := typ.(*BACnetTagPayloadDouble); ok {
			return casted
		}
		return nil
	}
	return castFunc(structType)
}

func (m *BACnetTagPayloadDouble) GetTypeName() string {
	return "BACnetTagPayloadDouble"
}

func (m *BACnetTagPayloadDouble) LengthInBits() uint16 {
	return m.LengthInBitsConditional(false)
}

func (m *BACnetTagPayloadDouble) LengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(0)

	// Simple field (value)
	lengthInBits += 64

	return lengthInBits
}

func (m *BACnetTagPayloadDouble) LengthInBytes() uint16 {
	return m.LengthInBits() / 8
}

func BACnetTagPayloadDoubleParse(readBuffer utils.ReadBuffer) (*BACnetTagPayloadDouble, error) {
	if pullErr := readBuffer.PullContext("BACnetTagPayloadDouble"); pullErr != nil {
		return nil, pullErr
	}

	// Simple Field (value)
	_value, _valueErr := readBuffer.ReadFloat64("value", 64)
	if _valueErr != nil {
		return nil, errors.Wrap(_valueErr, "Error parsing 'value' field")
	}
	value := _value

	if closeErr := readBuffer.CloseContext("BACnetTagPayloadDouble"); closeErr != nil {
		return nil, closeErr
	}

	// Create the instance
	return NewBACnetTagPayloadDouble(value), nil
}

func (m *BACnetTagPayloadDouble) Serialize(writeBuffer utils.WriteBuffer) error {
	if pushErr := writeBuffer.PushContext("BACnetTagPayloadDouble"); pushErr != nil {
		return pushErr
	}

	// Simple Field (value)
	value := float64(m.Value)
	_valueErr := writeBuffer.WriteFloat64("value", 64, (value))
	if _valueErr != nil {
		return errors.Wrap(_valueErr, "Error serializing 'value' field")
	}

	if popErr := writeBuffer.PopContext("BACnetTagPayloadDouble"); popErr != nil {
		return popErr
	}
	return nil
}

func (m *BACnetTagPayloadDouble) String() string {
	if m == nil {
		return "<nil>"
	}
	buffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	m.Serialize(buffer)
	return buffer.GetBox().String()
}
