/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/plc4go/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// The data-structure of this message
type BACnetPropertyValuePriorityValue struct {
	*BACnetPropertyValue
	Values []byte
}

// The corresponding interface
type IBACnetPropertyValuePriorityValue interface {
	LengthInBytes() uint16
	LengthInBits() uint16
	Serialize(writeBuffer utils.WriteBuffer) error
}

///////////////////////////////////////////////////////////
// Accessors for discriminator values.
///////////////////////////////////////////////////////////
func (m *BACnetPropertyValuePriorityValue) Identifier() BACnetPropertyIdentifier {
	return BACnetPropertyIdentifier_PRIORITY_ARRAY
}

func (m *BACnetPropertyValuePriorityValue) InitializeParent(parent *BACnetPropertyValue) {
}

func NewBACnetPropertyValuePriorityValue(values []byte) *BACnetPropertyValue {
	child := &BACnetPropertyValuePriorityValue{
		Values:              values,
		BACnetPropertyValue: NewBACnetPropertyValue(),
	}
	child.Child = child
	return child.BACnetPropertyValue
}

func CastBACnetPropertyValuePriorityValue(structType interface{}) *BACnetPropertyValuePriorityValue {
	castFunc := func(typ interface{}) *BACnetPropertyValuePriorityValue {
		if casted, ok := typ.(BACnetPropertyValuePriorityValue); ok {
			return &casted
		}
		if casted, ok := typ.(*BACnetPropertyValuePriorityValue); ok {
			return casted
		}
		if casted, ok := typ.(BACnetPropertyValue); ok {
			return CastBACnetPropertyValuePriorityValue(casted.Child)
		}
		if casted, ok := typ.(*BACnetPropertyValue); ok {
			return CastBACnetPropertyValuePriorityValue(casted.Child)
		}
		return nil
	}
	return castFunc(structType)
}

func (m *BACnetPropertyValuePriorityValue) GetTypeName() string {
	return "BACnetPropertyValuePriorityValue"
}

func (m *BACnetPropertyValuePriorityValue) LengthInBits() uint16 {
	return m.LengthInBitsConditional(false)
}

func (m *BACnetPropertyValuePriorityValue) LengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(m.ParentLengthInBits())

	// Array field
	if len(m.Values) > 0 {
		lengthInBits += 8 * uint16(len(m.Values))
	}

	return lengthInBits
}

func (m *BACnetPropertyValuePriorityValue) LengthInBytes() uint16 {
	return m.LengthInBits() / 8
}

func BACnetPropertyValuePriorityValueParse(readBuffer utils.ReadBuffer, identifier BACnetPropertyIdentifier, actualLength uint32) (*BACnetPropertyValue, error) {
	if pullErr := readBuffer.PullContext("BACnetPropertyValuePriorityValue"); pullErr != nil {
		return nil, pullErr
	}
	// Byte Array field (values)
	numberOfBytesvalues := int(uint16(16))
	values, _readArrayErr := readBuffer.ReadByteArray("values", numberOfBytesvalues)
	if _readArrayErr != nil {
		return nil, errors.Wrap(_readArrayErr, "Error parsing 'values' field")
	}

	if closeErr := readBuffer.CloseContext("BACnetPropertyValuePriorityValue"); closeErr != nil {
		return nil, closeErr
	}

	// Create a partially initialized instance
	_child := &BACnetPropertyValuePriorityValue{
		Values:              values,
		BACnetPropertyValue: &BACnetPropertyValue{},
	}
	_child.BACnetPropertyValue.Child = _child
	return _child.BACnetPropertyValue, nil
}

func (m *BACnetPropertyValuePriorityValue) Serialize(writeBuffer utils.WriteBuffer) error {
	ser := func() error {
		if pushErr := writeBuffer.PushContext("BACnetPropertyValuePriorityValue"); pushErr != nil {
			return pushErr
		}

		// Array Field (values)
		if m.Values != nil {
			// Byte Array field (values)
			_writeArrayErr := writeBuffer.WriteByteArray("values", m.Values)
			if _writeArrayErr != nil {
				return errors.Wrap(_writeArrayErr, "Error serializing 'values' field")
			}
		}

		if popErr := writeBuffer.PopContext("BACnetPropertyValuePriorityValue"); popErr != nil {
			return popErr
		}
		return nil
	}
	return m.SerializeParent(writeBuffer, m, ser)
}

func (m *BACnetPropertyValuePriorityValue) String() string {
	if m == nil {
		return "<nil>"
	}
	buffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	m.Serialize(buffer)
	return buffer.GetBox().String()
}
