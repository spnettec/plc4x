/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/plc4go/spi/utils"
	"github.com/pkg/errors"
	"io"
)

// Code generated by code-generation. DO NOT EDIT.

// The data-structure of this message
type BACnetConstructedDataElement struct {
	PeekedTagHeader   *BACnetTagHeader
	ApplicationTag    *BACnetApplicationTag
	ContextTag        *BACnetContextTag
	ConstructedData   *BACnetConstructedData
	PeekedTagNumber   uint8
	IsApplicationTag  bool
	IsConstructedData bool
	IsContextTag      bool
}

// The corresponding interface
type IBACnetConstructedDataElement interface {
	// GetPeekedTagHeader returns PeekedTagHeader
	GetPeekedTagHeader() *BACnetTagHeader
	// GetApplicationTag returns ApplicationTag
	GetApplicationTag() *BACnetApplicationTag
	// GetContextTag returns ContextTag
	GetContextTag() *BACnetContextTag
	// GetConstructedData returns ConstructedData
	GetConstructedData() *BACnetConstructedData
	// GetPeekedTagNumber returns PeekedTagNumber
	GetPeekedTagNumber() uint8
	// GetIsApplicationTag returns IsApplicationTag
	GetIsApplicationTag() bool
	// GetIsConstructedData returns IsConstructedData
	GetIsConstructedData() bool
	// GetIsContextTag returns IsContextTag
	GetIsContextTag() bool
	// LengthInBytes returns the length in bytes
	LengthInBytes() uint16
	// LengthInBits returns the length in bits
	LengthInBits() uint16
	// Serialize serializes this type
	Serialize(writeBuffer utils.WriteBuffer) error
}

///////////////////////////////////////////////////////////
// Accessors for property fields.
///////////////////////////////////////////////////////////
func (m *BACnetConstructedDataElement) GetPeekedTagHeader() *BACnetTagHeader {
	return m.PeekedTagHeader
}

func (m *BACnetConstructedDataElement) GetApplicationTag() *BACnetApplicationTag {
	return m.ApplicationTag
}

func (m *BACnetConstructedDataElement) GetContextTag() *BACnetContextTag {
	return m.ContextTag
}

func (m *BACnetConstructedDataElement) GetConstructedData() *BACnetConstructedData {
	return m.ConstructedData
}

///////////////////////////////////////////////////////////
// Accessors for virtual fields.
///////////////////////////////////////////////////////////
func (m *BACnetConstructedDataElement) GetPeekedTagNumber() uint8 {
	// TODO: calculation should happen here instead accessing the stored field
	return m.PeekedTagNumber
}

func (m *BACnetConstructedDataElement) GetIsApplicationTag() bool {
	// TODO: calculation should happen here instead accessing the stored field
	return m.IsApplicationTag
}

func (m *BACnetConstructedDataElement) GetIsConstructedData() bool {
	// TODO: calculation should happen here instead accessing the stored field
	return m.IsConstructedData
}

func (m *BACnetConstructedDataElement) GetIsContextTag() bool {
	// TODO: calculation should happen here instead accessing the stored field
	return m.IsContextTag
}

func NewBACnetConstructedDataElement(peekedTagHeader *BACnetTagHeader, applicationTag *BACnetApplicationTag, contextTag *BACnetContextTag, constructedData *BACnetConstructedData, peekedTagNumber uint8, isApplicationTag bool, isConstructedData bool, isContextTag bool) *BACnetConstructedDataElement {
	return &BACnetConstructedDataElement{PeekedTagHeader: peekedTagHeader, ApplicationTag: applicationTag, ContextTag: contextTag, ConstructedData: constructedData, PeekedTagNumber: peekedTagNumber, IsApplicationTag: isApplicationTag, IsConstructedData: isConstructedData, IsContextTag: isContextTag}
}

func CastBACnetConstructedDataElement(structType interface{}) *BACnetConstructedDataElement {
	castFunc := func(typ interface{}) *BACnetConstructedDataElement {
		if casted, ok := typ.(BACnetConstructedDataElement); ok {
			return &casted
		}
		if casted, ok := typ.(*BACnetConstructedDataElement); ok {
			return casted
		}
		return nil
	}
	return castFunc(structType)
}

func (m *BACnetConstructedDataElement) GetTypeName() string {
	return "BACnetConstructedDataElement"
}

func (m *BACnetConstructedDataElement) LengthInBits() uint16 {
	return m.LengthInBitsConditional(false)
}

func (m *BACnetConstructedDataElement) LengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(0)

	// A virtual field doesn't have any in- or output.

	// A virtual field doesn't have any in- or output.

	// A virtual field doesn't have any in- or output.

	// A virtual field doesn't have any in- or output.

	// Optional Field (applicationTag)
	if m.ApplicationTag != nil {
		lengthInBits += (*m.ApplicationTag).LengthInBits()
	}

	// Optional Field (contextTag)
	if m.ContextTag != nil {
		lengthInBits += (*m.ContextTag).LengthInBits()
	}

	// Optional Field (constructedData)
	if m.ConstructedData != nil {
		lengthInBits += (*m.ConstructedData).LengthInBits()
	}

	return lengthInBits
}

func (m *BACnetConstructedDataElement) LengthInBytes() uint16 {
	return m.LengthInBits() / 8
}

func BACnetConstructedDataElementParse(readBuffer utils.ReadBuffer, objectType BACnetObjectType, propertyIdentifier *BACnetContextTagPropertyIdentifier) (*BACnetConstructedDataElement, error) {
	if pullErr := readBuffer.PullContext("BACnetConstructedDataElement"); pullErr != nil {
		return nil, pullErr
	}

	// Peek Field (peekedTagHeader)
	currentPos := readBuffer.GetPos()
	if pullErr := readBuffer.PullContext("peekedTagHeader"); pullErr != nil {
		return nil, pullErr
	}
	peekedTagHeader, _ := BACnetTagHeaderParse(readBuffer)
	readBuffer.Reset(currentPos)

	// Virtual field
	_peekedTagNumber := peekedTagHeader.ActualTagNumber
	peekedTagNumber := uint8(_peekedTagNumber)

	// Virtual field
	_isApplicationTag := bool((peekedTagHeader.TagClass) == (TagClass_APPLICATION_TAGS))
	isApplicationTag := bool(_isApplicationTag)

	// Virtual field
	_isConstructedData := bool(!(isApplicationTag)) && bool(bool((peekedTagHeader.ActualLength) == (0x6)))
	isConstructedData := bool(_isConstructedData)

	// Virtual field
	_isContextTag := bool(!(isConstructedData)) && bool(!(isApplicationTag))
	isContextTag := bool(_isContextTag)

	// Optional Field (applicationTag) (Can be skipped, if a given expression evaluates to false)
	var applicationTag *BACnetApplicationTag = nil
	if isApplicationTag {
		currentPos := readBuffer.GetPos()
		if pullErr := readBuffer.PullContext("applicationTag"); pullErr != nil {
			return nil, pullErr
		}
		_val, _err := BACnetApplicationTagParse(readBuffer)
		switch {
		case errors.Is(_err, utils.ParseAssertError{}) || errors.Is(_err, io.EOF):
			readBuffer.Reset(currentPos)
		case _err != nil:
			return nil, errors.Wrap(_err, "Error parsing 'applicationTag' field")
		default:
			applicationTag = CastBACnetApplicationTag(_val)
			if closeErr := readBuffer.CloseContext("applicationTag"); closeErr != nil {
				return nil, closeErr
			}
		}
	}

	// Optional Field (contextTag) (Can be skipped, if a given expression evaluates to false)
	var contextTag *BACnetContextTag = nil
	if isContextTag {
		currentPos := readBuffer.GetPos()
		if pullErr := readBuffer.PullContext("contextTag"); pullErr != nil {
			return nil, pullErr
		}
		_val, _err := BACnetContextTagParse(readBuffer, peekedTagNumber, GuessDataType(objectType))
		switch {
		case errors.Is(_err, utils.ParseAssertError{}) || errors.Is(_err, io.EOF):
			readBuffer.Reset(currentPos)
		case _err != nil:
			return nil, errors.Wrap(_err, "Error parsing 'contextTag' field")
		default:
			contextTag = CastBACnetContextTag(_val)
			if closeErr := readBuffer.CloseContext("contextTag"); closeErr != nil {
				return nil, closeErr
			}
		}
	}

	// Optional Field (constructedData) (Can be skipped, if a given expression evaluates to false)
	var constructedData *BACnetConstructedData = nil
	if isConstructedData {
		currentPos := readBuffer.GetPos()
		if pullErr := readBuffer.PullContext("constructedData"); pullErr != nil {
			return nil, pullErr
		}
		_val, _err := BACnetConstructedDataParse(readBuffer, peekedTagNumber, objectType, propertyIdentifier)
		switch {
		case errors.Is(_err, utils.ParseAssertError{}) || errors.Is(_err, io.EOF):
			readBuffer.Reset(currentPos)
		case _err != nil:
			return nil, errors.Wrap(_err, "Error parsing 'constructedData' field")
		default:
			constructedData = CastBACnetConstructedData(_val)
			if closeErr := readBuffer.CloseContext("constructedData"); closeErr != nil {
				return nil, closeErr
			}
		}
	}

	// Validation
	if !(bool(bool(isApplicationTag) || bool(isContextTag)) || bool(isConstructedData)) {
		return nil, utils.ParseAssertError{"BACnetConstructedDataElement could not parse anything"}
	}

	if closeErr := readBuffer.CloseContext("BACnetConstructedDataElement"); closeErr != nil {
		return nil, closeErr
	}

	// Create the instance
	return NewBACnetConstructedDataElement(peekedTagHeader, applicationTag, contextTag, constructedData, peekedTagNumber, isApplicationTag, isConstructedData, isContextTag), nil
}

func (m *BACnetConstructedDataElement) Serialize(writeBuffer utils.WriteBuffer) error {
	if pushErr := writeBuffer.PushContext("BACnetConstructedDataElement"); pushErr != nil {
		return pushErr
	}
	// Virtual field
	if _peekedTagNumberErr := writeBuffer.WriteVirtual("peekedTagNumber", m.PeekedTagNumber); _peekedTagNumberErr != nil {
		return errors.Wrap(_peekedTagNumberErr, "Error serializing 'peekedTagNumber' field")
	}
	// Virtual field
	if _isApplicationTagErr := writeBuffer.WriteVirtual("isApplicationTag", m.IsApplicationTag); _isApplicationTagErr != nil {
		return errors.Wrap(_isApplicationTagErr, "Error serializing 'isApplicationTag' field")
	}
	// Virtual field
	if _isConstructedDataErr := writeBuffer.WriteVirtual("isConstructedData", m.IsConstructedData); _isConstructedDataErr != nil {
		return errors.Wrap(_isConstructedDataErr, "Error serializing 'isConstructedData' field")
	}
	// Virtual field
	if _isContextTagErr := writeBuffer.WriteVirtual("isContextTag", m.IsContextTag); _isContextTagErr != nil {
		return errors.Wrap(_isContextTagErr, "Error serializing 'isContextTag' field")
	}

	// Optional Field (applicationTag) (Can be skipped, if the value is null)
	var applicationTag *BACnetApplicationTag = nil
	if m.ApplicationTag != nil {
		if pushErr := writeBuffer.PushContext("applicationTag"); pushErr != nil {
			return pushErr
		}
		applicationTag = m.ApplicationTag
		_applicationTagErr := applicationTag.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("applicationTag"); popErr != nil {
			return popErr
		}
		if _applicationTagErr != nil {
			return errors.Wrap(_applicationTagErr, "Error serializing 'applicationTag' field")
		}
	}

	// Optional Field (contextTag) (Can be skipped, if the value is null)
	var contextTag *BACnetContextTag = nil
	if m.ContextTag != nil {
		if pushErr := writeBuffer.PushContext("contextTag"); pushErr != nil {
			return pushErr
		}
		contextTag = m.ContextTag
		_contextTagErr := contextTag.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("contextTag"); popErr != nil {
			return popErr
		}
		if _contextTagErr != nil {
			return errors.Wrap(_contextTagErr, "Error serializing 'contextTag' field")
		}
	}

	// Optional Field (constructedData) (Can be skipped, if the value is null)
	var constructedData *BACnetConstructedData = nil
	if m.ConstructedData != nil {
		if pushErr := writeBuffer.PushContext("constructedData"); pushErr != nil {
			return pushErr
		}
		constructedData = m.ConstructedData
		_constructedDataErr := constructedData.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("constructedData"); popErr != nil {
			return popErr
		}
		if _constructedDataErr != nil {
			return errors.Wrap(_constructedDataErr, "Error serializing 'constructedData' field")
		}
	}

	if popErr := writeBuffer.PopContext("BACnetConstructedDataElement"); popErr != nil {
		return popErr
	}
	return nil
}

func (m *BACnetConstructedDataElement) String() string {
	if m == nil {
		return "<nil>"
	}
	buffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	m.Serialize(buffer)
	return buffer.GetBox().String()
}
