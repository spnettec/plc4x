/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/plc4go/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// The data-structure of this message
type BACnetConfirmedServiceRequestAtomicReadFileStream struct {
	*BACnetConfirmedServiceRequestAtomicReadFileStreamOrRecord
	FileStartPosition *BACnetApplicationTagSignedInteger
	RequestOctetCount *BACnetApplicationTagUnsignedInteger
}

// The corresponding interface
type IBACnetConfirmedServiceRequestAtomicReadFileStream interface {
	// GetFileStartPosition returns FileStartPosition
	GetFileStartPosition() *BACnetApplicationTagSignedInteger
	// GetRequestOctetCount returns RequestOctetCount
	GetRequestOctetCount() *BACnetApplicationTagUnsignedInteger
	// LengthInBytes returns the length in bytes
	LengthInBytes() uint16
	// LengthInBits returns the length in bits
	LengthInBits() uint16
	// Serialize serializes this type
	Serialize(writeBuffer utils.WriteBuffer) error
}

///////////////////////////////////////////////////////////
// Accessors for discriminator values.
///////////////////////////////////////////////////////////
func (m *BACnetConfirmedServiceRequestAtomicReadFileStream) PeekedTagNumber() uint8 {
	return 0x0
}

func (m *BACnetConfirmedServiceRequestAtomicReadFileStream) GetPeekedTagNumber() uint8 {
	return 0x0
}

func (m *BACnetConfirmedServiceRequestAtomicReadFileStream) InitializeParent(parent *BACnetConfirmedServiceRequestAtomicReadFileStreamOrRecord, peekedTagHeader *BACnetTagHeader, openingTag *BACnetOpeningTag, closingTag *BACnetClosingTag, peekedTagNumber uint8) {
	m.BACnetConfirmedServiceRequestAtomicReadFileStreamOrRecord.PeekedTagHeader = peekedTagHeader
	m.BACnetConfirmedServiceRequestAtomicReadFileStreamOrRecord.OpeningTag = openingTag
	m.BACnetConfirmedServiceRequestAtomicReadFileStreamOrRecord.ClosingTag = closingTag
	m.BACnetConfirmedServiceRequestAtomicReadFileStreamOrRecord.PeekedTagNumber = peekedTagNumber
}

///////////////////////////////////////////////////////////
// Accessors for property fields.
///////////////////////////////////////////////////////////
func (m *BACnetConfirmedServiceRequestAtomicReadFileStream) GetFileStartPosition() *BACnetApplicationTagSignedInteger {
	return m.FileStartPosition
}

func (m *BACnetConfirmedServiceRequestAtomicReadFileStream) GetRequestOctetCount() *BACnetApplicationTagUnsignedInteger {
	return m.RequestOctetCount
}

///////////////////////////////////////////////////////////
// Accessors for virtual fields.
///////////////////////////////////////////////////////////

func NewBACnetConfirmedServiceRequestAtomicReadFileStream(fileStartPosition *BACnetApplicationTagSignedInteger, requestOctetCount *BACnetApplicationTagUnsignedInteger, peekedTagHeader *BACnetTagHeader, openingTag *BACnetOpeningTag, closingTag *BACnetClosingTag, peekedTagNumber uint8) *BACnetConfirmedServiceRequestAtomicReadFileStreamOrRecord {
	child := &BACnetConfirmedServiceRequestAtomicReadFileStream{
		FileStartPosition: fileStartPosition,
		RequestOctetCount: requestOctetCount,
		BACnetConfirmedServiceRequestAtomicReadFileStreamOrRecord: NewBACnetConfirmedServiceRequestAtomicReadFileStreamOrRecord(peekedTagHeader, openingTag, closingTag, peekedTagNumber),
	}
	child.Child = child
	return child.BACnetConfirmedServiceRequestAtomicReadFileStreamOrRecord
}

func CastBACnetConfirmedServiceRequestAtomicReadFileStream(structType interface{}) *BACnetConfirmedServiceRequestAtomicReadFileStream {
	castFunc := func(typ interface{}) *BACnetConfirmedServiceRequestAtomicReadFileStream {
		if casted, ok := typ.(BACnetConfirmedServiceRequestAtomicReadFileStream); ok {
			return &casted
		}
		if casted, ok := typ.(*BACnetConfirmedServiceRequestAtomicReadFileStream); ok {
			return casted
		}
		if casted, ok := typ.(BACnetConfirmedServiceRequestAtomicReadFileStreamOrRecord); ok {
			return CastBACnetConfirmedServiceRequestAtomicReadFileStream(casted.Child)
		}
		if casted, ok := typ.(*BACnetConfirmedServiceRequestAtomicReadFileStreamOrRecord); ok {
			return CastBACnetConfirmedServiceRequestAtomicReadFileStream(casted.Child)
		}
		return nil
	}
	return castFunc(structType)
}

func (m *BACnetConfirmedServiceRequestAtomicReadFileStream) GetTypeName() string {
	return "BACnetConfirmedServiceRequestAtomicReadFileStream"
}

func (m *BACnetConfirmedServiceRequestAtomicReadFileStream) LengthInBits() uint16 {
	return m.LengthInBitsConditional(false)
}

func (m *BACnetConfirmedServiceRequestAtomicReadFileStream) LengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(m.ParentLengthInBits())

	// Simple field (fileStartPosition)
	lengthInBits += m.FileStartPosition.LengthInBits()

	// Simple field (requestOctetCount)
	lengthInBits += m.RequestOctetCount.LengthInBits()

	return lengthInBits
}

func (m *BACnetConfirmedServiceRequestAtomicReadFileStream) LengthInBytes() uint16 {
	return m.LengthInBits() / 8
}

func BACnetConfirmedServiceRequestAtomicReadFileStreamParse(readBuffer utils.ReadBuffer) (*BACnetConfirmedServiceRequestAtomicReadFileStreamOrRecord, error) {
	if pullErr := readBuffer.PullContext("BACnetConfirmedServiceRequestAtomicReadFileStream"); pullErr != nil {
		return nil, pullErr
	}

	// Simple Field (fileStartPosition)
	if pullErr := readBuffer.PullContext("fileStartPosition"); pullErr != nil {
		return nil, pullErr
	}
	_fileStartPosition, _fileStartPositionErr := BACnetApplicationTagParse(readBuffer)
	if _fileStartPositionErr != nil {
		return nil, errors.Wrap(_fileStartPositionErr, "Error parsing 'fileStartPosition' field")
	}
	fileStartPosition := CastBACnetApplicationTagSignedInteger(_fileStartPosition)
	if closeErr := readBuffer.CloseContext("fileStartPosition"); closeErr != nil {
		return nil, closeErr
	}

	// Simple Field (requestOctetCount)
	if pullErr := readBuffer.PullContext("requestOctetCount"); pullErr != nil {
		return nil, pullErr
	}
	_requestOctetCount, _requestOctetCountErr := BACnetApplicationTagParse(readBuffer)
	if _requestOctetCountErr != nil {
		return nil, errors.Wrap(_requestOctetCountErr, "Error parsing 'requestOctetCount' field")
	}
	requestOctetCount := CastBACnetApplicationTagUnsignedInteger(_requestOctetCount)
	if closeErr := readBuffer.CloseContext("requestOctetCount"); closeErr != nil {
		return nil, closeErr
	}

	if closeErr := readBuffer.CloseContext("BACnetConfirmedServiceRequestAtomicReadFileStream"); closeErr != nil {
		return nil, closeErr
	}

	// Create a partially initialized instance
	_child := &BACnetConfirmedServiceRequestAtomicReadFileStream{
		FileStartPosition: CastBACnetApplicationTagSignedInteger(fileStartPosition),
		RequestOctetCount: CastBACnetApplicationTagUnsignedInteger(requestOctetCount),
		BACnetConfirmedServiceRequestAtomicReadFileStreamOrRecord: &BACnetConfirmedServiceRequestAtomicReadFileStreamOrRecord{},
	}
	_child.BACnetConfirmedServiceRequestAtomicReadFileStreamOrRecord.Child = _child
	return _child.BACnetConfirmedServiceRequestAtomicReadFileStreamOrRecord, nil
}

func (m *BACnetConfirmedServiceRequestAtomicReadFileStream) Serialize(writeBuffer utils.WriteBuffer) error {
	ser := func() error {
		if pushErr := writeBuffer.PushContext("BACnetConfirmedServiceRequestAtomicReadFileStream"); pushErr != nil {
			return pushErr
		}

		// Simple Field (fileStartPosition)
		if pushErr := writeBuffer.PushContext("fileStartPosition"); pushErr != nil {
			return pushErr
		}
		_fileStartPositionErr := m.FileStartPosition.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("fileStartPosition"); popErr != nil {
			return popErr
		}
		if _fileStartPositionErr != nil {
			return errors.Wrap(_fileStartPositionErr, "Error serializing 'fileStartPosition' field")
		}

		// Simple Field (requestOctetCount)
		if pushErr := writeBuffer.PushContext("requestOctetCount"); pushErr != nil {
			return pushErr
		}
		_requestOctetCountErr := m.RequestOctetCount.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("requestOctetCount"); popErr != nil {
			return popErr
		}
		if _requestOctetCountErr != nil {
			return errors.Wrap(_requestOctetCountErr, "Error serializing 'requestOctetCount' field")
		}

		if popErr := writeBuffer.PopContext("BACnetConfirmedServiceRequestAtomicReadFileStream"); popErr != nil {
			return popErr
		}
		return nil
	}
	return m.SerializeParent(writeBuffer, m, ser)
}

func (m *BACnetConfirmedServiceRequestAtomicReadFileStream) String() string {
	if m == nil {
		return "<nil>"
	}
	buffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	m.Serialize(buffer)
	return buffer.GetBox().String()
}
