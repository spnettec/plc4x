/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/plc4go/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// BACnetNetworkPortCommand is an enum
type BACnetNetworkPortCommand uint8

type IBACnetNetworkPortCommand interface {
	Serialize(writeBuffer utils.WriteBuffer) error
}

const (
	BACnetNetworkPortCommand_VENDOR_PROPRIETARY_VALUE BACnetNetworkPortCommand = 0xFF
)

var BACnetNetworkPortCommandValues []BACnetNetworkPortCommand

func init() {
	_ = errors.New
	BACnetNetworkPortCommandValues = []BACnetNetworkPortCommand{
		BACnetNetworkPortCommand_VENDOR_PROPRIETARY_VALUE,
	}
}

func BACnetNetworkPortCommandByValue(value uint8) BACnetNetworkPortCommand {
	switch value {
	case 0xFF:
		return BACnetNetworkPortCommand_VENDOR_PROPRIETARY_VALUE
	}
	return 0
}

func BACnetNetworkPortCommandByName(value string) BACnetNetworkPortCommand {
	switch value {
	case "VENDOR_PROPRIETARY_VALUE":
		return BACnetNetworkPortCommand_VENDOR_PROPRIETARY_VALUE
	}
	return 0
}

func BACnetNetworkPortCommandKnows(value uint8) bool {
	for _, typeValue := range BACnetNetworkPortCommandValues {
		if uint8(typeValue) == value {
			return true
		}
	}
	return false
}

func CastBACnetNetworkPortCommand(structType interface{}) BACnetNetworkPortCommand {
	castFunc := func(typ interface{}) BACnetNetworkPortCommand {
		if sBACnetNetworkPortCommand, ok := typ.(BACnetNetworkPortCommand); ok {
			return sBACnetNetworkPortCommand
		}
		return 0
	}
	return castFunc(structType)
}

func (m BACnetNetworkPortCommand) GetLengthInBits() uint16 {
	return 8
}

func (m BACnetNetworkPortCommand) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func BACnetNetworkPortCommandParse(readBuffer utils.ReadBuffer) (BACnetNetworkPortCommand, error) {
	val, err := readBuffer.ReadUint8("BACnetNetworkPortCommand", 8)
	if err != nil {
		return 0, nil
	}
	return BACnetNetworkPortCommandByValue(val), nil
}

func (e BACnetNetworkPortCommand) Serialize(writeBuffer utils.WriteBuffer) error {
	return writeBuffer.WriteUint8("BACnetNetworkPortCommand", 8, uint8(e), utils.WithAdditionalStringRepresentation(e.name()))
}

func (e BACnetNetworkPortCommand) name() string {
	switch e {
	case BACnetNetworkPortCommand_VENDOR_PROPRIETARY_VALUE:
		return "VENDOR_PROPRIETARY_VALUE"
	}
	return ""
}

func (e BACnetNetworkPortCommand) String() string {
	return e.name()
}
