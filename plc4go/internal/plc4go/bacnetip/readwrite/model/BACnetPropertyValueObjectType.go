/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/plc4go/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// The data-structure of this message
type BACnetPropertyValueObjectType struct {
	*BACnetPropertyValue
	ObjectIdentifier *BACnetApplicationTagObjectIdentifier
}

// The corresponding interface
type IBACnetPropertyValueObjectType interface {
	LengthInBytes() uint16
	LengthInBits() uint16
	Serialize(writeBuffer utils.WriteBuffer) error
}

///////////////////////////////////////////////////////////
// Accessors for discriminator values.
///////////////////////////////////////////////////////////
func (m *BACnetPropertyValueObjectType) Identifier() BACnetPropertyIdentifier {
	return BACnetPropertyIdentifier_OBJECT_TYPE
}

func (m *BACnetPropertyValueObjectType) InitializeParent(parent *BACnetPropertyValue) {
}

func NewBACnetPropertyValueObjectType(objectIdentifier *BACnetApplicationTagObjectIdentifier) *BACnetPropertyValue {
	child := &BACnetPropertyValueObjectType{
		ObjectIdentifier:    objectIdentifier,
		BACnetPropertyValue: NewBACnetPropertyValue(),
	}
	child.Child = child
	return child.BACnetPropertyValue
}

func CastBACnetPropertyValueObjectType(structType interface{}) *BACnetPropertyValueObjectType {
	castFunc := func(typ interface{}) *BACnetPropertyValueObjectType {
		if casted, ok := typ.(BACnetPropertyValueObjectType); ok {
			return &casted
		}
		if casted, ok := typ.(*BACnetPropertyValueObjectType); ok {
			return casted
		}
		if casted, ok := typ.(BACnetPropertyValue); ok {
			return CastBACnetPropertyValueObjectType(casted.Child)
		}
		if casted, ok := typ.(*BACnetPropertyValue); ok {
			return CastBACnetPropertyValueObjectType(casted.Child)
		}
		return nil
	}
	return castFunc(structType)
}

func (m *BACnetPropertyValueObjectType) GetTypeName() string {
	return "BACnetPropertyValueObjectType"
}

func (m *BACnetPropertyValueObjectType) LengthInBits() uint16 {
	return m.LengthInBitsConditional(false)
}

func (m *BACnetPropertyValueObjectType) LengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(m.ParentLengthInBits())

	// Simple field (objectIdentifier)
	lengthInBits += m.ObjectIdentifier.LengthInBits()

	return lengthInBits
}

func (m *BACnetPropertyValueObjectType) LengthInBytes() uint16 {
	return m.LengthInBits() / 8
}

func BACnetPropertyValueObjectTypeParse(readBuffer utils.ReadBuffer, identifier BACnetPropertyIdentifier, actualLength uint32) (*BACnetPropertyValue, error) {
	if pullErr := readBuffer.PullContext("BACnetPropertyValueObjectType"); pullErr != nil {
		return nil, pullErr
	}

	// Simple Field (objectIdentifier)
	if pullErr := readBuffer.PullContext("objectIdentifier"); pullErr != nil {
		return nil, pullErr
	}
	_objectIdentifier, _objectIdentifierErr := BACnetTagParse(readBuffer)
	if _objectIdentifierErr != nil {
		return nil, errors.Wrap(_objectIdentifierErr, "Error parsing 'objectIdentifier' field")
	}
	objectIdentifier := CastBACnetApplicationTagObjectIdentifier(_objectIdentifier)
	if closeErr := readBuffer.CloseContext("objectIdentifier"); closeErr != nil {
		return nil, closeErr
	}

	if closeErr := readBuffer.CloseContext("BACnetPropertyValueObjectType"); closeErr != nil {
		return nil, closeErr
	}

	// Create a partially initialized instance
	_child := &BACnetPropertyValueObjectType{
		ObjectIdentifier:    CastBACnetApplicationTagObjectIdentifier(objectIdentifier),
		BACnetPropertyValue: &BACnetPropertyValue{},
	}
	_child.BACnetPropertyValue.Child = _child
	return _child.BACnetPropertyValue, nil
}

func (m *BACnetPropertyValueObjectType) Serialize(writeBuffer utils.WriteBuffer) error {
	ser := func() error {
		if pushErr := writeBuffer.PushContext("BACnetPropertyValueObjectType"); pushErr != nil {
			return pushErr
		}

		// Simple Field (objectIdentifier)
		if pushErr := writeBuffer.PushContext("objectIdentifier"); pushErr != nil {
			return pushErr
		}
		_objectIdentifierErr := m.ObjectIdentifier.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("objectIdentifier"); popErr != nil {
			return popErr
		}
		if _objectIdentifierErr != nil {
			return errors.Wrap(_objectIdentifierErr, "Error serializing 'objectIdentifier' field")
		}

		if popErr := writeBuffer.PopContext("BACnetPropertyValueObjectType"); popErr != nil {
			return popErr
		}
		return nil
	}
	return m.SerializeParent(writeBuffer, m, ser)
}

func (m *BACnetPropertyValueObjectType) String() string {
	if m == nil {
		return "<nil>"
	}
	buffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	m.Serialize(buffer)
	return buffer.GetBox().String()
}
