/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/plc4go/spi/utils"
	"github.com/pkg/errors"
	"io"
)

// Code generated by code-generation. DO NOT EDIT.

// The data-structure of this message
type BACnetNotificationParametersExtendedParameters struct {
	OpeningTag           *BACnetOpeningTag
	NullValue            *BACnetApplicationTagNull
	RealValue            *BACnetApplicationTagReal
	UnsignedValue        *BACnetApplicationTagUnsignedInteger
	BooleanValue         *BACnetApplicationTagBoolean
	IntegerValue         *BACnetApplicationTagSignedInteger
	DoubleValue          *BACnetApplicationTagDouble
	OctetStringValue     *BACnetApplicationTagOctetString
	CharacterStringValue *BACnetApplicationTagCharacterString
	BitStringValue       *BACnetApplicationTagBitString
	EnumeratedValue      *BACnetApplicationTagEnumerated
	DateValue            *BACnetApplicationTagDate
	TimeValue            *BACnetApplicationTagTime
	ObjectIdentifier     *BACnetApplicationTagObjectIdentifier
	Reference            *BACnetDeviceObjectPropertyReference
	ClosingTag           *BACnetClosingTag
}

// The corresponding interface
type IBACnetNotificationParametersExtendedParameters interface {
	LengthInBytes() uint16
	LengthInBits() uint16
	Serialize(writeBuffer utils.WriteBuffer) error
}

func NewBACnetNotificationParametersExtendedParameters(openingTag *BACnetOpeningTag, nullValue *BACnetApplicationTagNull, realValue *BACnetApplicationTagReal, unsignedValue *BACnetApplicationTagUnsignedInteger, booleanValue *BACnetApplicationTagBoolean, integerValue *BACnetApplicationTagSignedInteger, doubleValue *BACnetApplicationTagDouble, octetStringValue *BACnetApplicationTagOctetString, characterStringValue *BACnetApplicationTagCharacterString, bitStringValue *BACnetApplicationTagBitString, enumeratedValue *BACnetApplicationTagEnumerated, dateValue *BACnetApplicationTagDate, timeValue *BACnetApplicationTagTime, objectIdentifier *BACnetApplicationTagObjectIdentifier, reference *BACnetDeviceObjectPropertyReference, closingTag *BACnetClosingTag) *BACnetNotificationParametersExtendedParameters {
	return &BACnetNotificationParametersExtendedParameters{OpeningTag: openingTag, NullValue: nullValue, RealValue: realValue, UnsignedValue: unsignedValue, BooleanValue: booleanValue, IntegerValue: integerValue, DoubleValue: doubleValue, OctetStringValue: octetStringValue, CharacterStringValue: characterStringValue, BitStringValue: bitStringValue, EnumeratedValue: enumeratedValue, DateValue: dateValue, TimeValue: timeValue, ObjectIdentifier: objectIdentifier, Reference: reference, ClosingTag: closingTag}
}

func CastBACnetNotificationParametersExtendedParameters(structType interface{}) *BACnetNotificationParametersExtendedParameters {
	castFunc := func(typ interface{}) *BACnetNotificationParametersExtendedParameters {
		if casted, ok := typ.(BACnetNotificationParametersExtendedParameters); ok {
			return &casted
		}
		if casted, ok := typ.(*BACnetNotificationParametersExtendedParameters); ok {
			return casted
		}
		return nil
	}
	return castFunc(structType)
}

func (m *BACnetNotificationParametersExtendedParameters) GetTypeName() string {
	return "BACnetNotificationParametersExtendedParameters"
}

func (m *BACnetNotificationParametersExtendedParameters) LengthInBits() uint16 {
	return m.LengthInBitsConditional(false)
}

func (m *BACnetNotificationParametersExtendedParameters) LengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(0)

	// Simple field (openingTag)
	lengthInBits += m.OpeningTag.LengthInBits()

	// Optional Field (nullValue)
	if m.NullValue != nil {
		lengthInBits += (*m.NullValue).LengthInBits()
	}

	// Optional Field (realValue)
	if m.RealValue != nil {
		lengthInBits += (*m.RealValue).LengthInBits()
	}

	// Optional Field (unsignedValue)
	if m.UnsignedValue != nil {
		lengthInBits += (*m.UnsignedValue).LengthInBits()
	}

	// Optional Field (booleanValue)
	if m.BooleanValue != nil {
		lengthInBits += (*m.BooleanValue).LengthInBits()
	}

	// Optional Field (integerValue)
	if m.IntegerValue != nil {
		lengthInBits += (*m.IntegerValue).LengthInBits()
	}

	// Optional Field (doubleValue)
	if m.DoubleValue != nil {
		lengthInBits += (*m.DoubleValue).LengthInBits()
	}

	// Optional Field (octetStringValue)
	if m.OctetStringValue != nil {
		lengthInBits += (*m.OctetStringValue).LengthInBits()
	}

	// Optional Field (characterStringValue)
	if m.CharacterStringValue != nil {
		lengthInBits += (*m.CharacterStringValue).LengthInBits()
	}

	// Optional Field (bitStringValue)
	if m.BitStringValue != nil {
		lengthInBits += (*m.BitStringValue).LengthInBits()
	}

	// Optional Field (enumeratedValue)
	if m.EnumeratedValue != nil {
		lengthInBits += (*m.EnumeratedValue).LengthInBits()
	}

	// Optional Field (dateValue)
	if m.DateValue != nil {
		lengthInBits += (*m.DateValue).LengthInBits()
	}

	// Optional Field (timeValue)
	if m.TimeValue != nil {
		lengthInBits += (*m.TimeValue).LengthInBits()
	}

	// Optional Field (objectIdentifier)
	if m.ObjectIdentifier != nil {
		lengthInBits += (*m.ObjectIdentifier).LengthInBits()
	}

	// Optional Field (reference)
	if m.Reference != nil {
		lengthInBits += (*m.Reference).LengthInBits()
	}

	// Simple field (closingTag)
	lengthInBits += m.ClosingTag.LengthInBits()

	return lengthInBits
}

func (m *BACnetNotificationParametersExtendedParameters) LengthInBytes() uint16 {
	return m.LengthInBits() / 8
}

func BACnetNotificationParametersExtendedParametersParse(readBuffer utils.ReadBuffer, tagNumber uint8) (*BACnetNotificationParametersExtendedParameters, error) {
	if pullErr := readBuffer.PullContext("BACnetNotificationParametersExtendedParameters"); pullErr != nil {
		return nil, pullErr
	}

	// Simple Field (openingTag)
	if pullErr := readBuffer.PullContext("openingTag"); pullErr != nil {
		return nil, pullErr
	}
	_openingTag, _openingTagErr := BACnetContextTagParse(readBuffer, tagNumber, BACnetDataType_OPENING_TAG)
	if _openingTagErr != nil {
		return nil, errors.Wrap(_openingTagErr, "Error parsing 'openingTag' field")
	}
	openingTag := CastBACnetOpeningTag(_openingTag)
	if closeErr := readBuffer.CloseContext("openingTag"); closeErr != nil {
		return nil, closeErr
	}

	// Optional Field (nullValue) (Can be skipped, if a given expression evaluates to false)
	var nullValue *BACnetApplicationTagNull = nil
	{
		currentPos := readBuffer.GetPos()
		if pullErr := readBuffer.PullContext("nullValue"); pullErr != nil {
			return nil, pullErr
		}
		_val, _err := BACnetApplicationTagParse(readBuffer)
		switch {
		case _err != nil && _err != utils.ParseAssertError && !errors.Is(_err, io.EOF):
			return nil, errors.Wrap(_err, "Error parsing 'nullValue' field")
		case _err == utils.ParseAssertError || errors.Is(_err, io.EOF):
			readBuffer.Reset(currentPos)
		default:
			nullValue = CastBACnetApplicationTagNull(_val)
			if closeErr := readBuffer.CloseContext("nullValue"); closeErr != nil {
				return nil, closeErr
			}
		}
	}

	// Optional Field (realValue) (Can be skipped, if a given expression evaluates to false)
	var realValue *BACnetApplicationTagReal = nil
	{
		currentPos := readBuffer.GetPos()
		if pullErr := readBuffer.PullContext("realValue"); pullErr != nil {
			return nil, pullErr
		}
		_val, _err := BACnetApplicationTagParse(readBuffer)
		switch {
		case _err != nil && _err != utils.ParseAssertError && !errors.Is(_err, io.EOF):
			return nil, errors.Wrap(_err, "Error parsing 'realValue' field")
		case _err == utils.ParseAssertError || errors.Is(_err, io.EOF):
			readBuffer.Reset(currentPos)
		default:
			realValue = CastBACnetApplicationTagReal(_val)
			if closeErr := readBuffer.CloseContext("realValue"); closeErr != nil {
				return nil, closeErr
			}
		}
	}

	// Optional Field (unsignedValue) (Can be skipped, if a given expression evaluates to false)
	var unsignedValue *BACnetApplicationTagUnsignedInteger = nil
	{
		currentPos := readBuffer.GetPos()
		if pullErr := readBuffer.PullContext("unsignedValue"); pullErr != nil {
			return nil, pullErr
		}
		_val, _err := BACnetApplicationTagParse(readBuffer)
		switch {
		case _err != nil && _err != utils.ParseAssertError && !errors.Is(_err, io.EOF):
			return nil, errors.Wrap(_err, "Error parsing 'unsignedValue' field")
		case _err == utils.ParseAssertError || errors.Is(_err, io.EOF):
			readBuffer.Reset(currentPos)
		default:
			unsignedValue = CastBACnetApplicationTagUnsignedInteger(_val)
			if closeErr := readBuffer.CloseContext("unsignedValue"); closeErr != nil {
				return nil, closeErr
			}
		}
	}

	// Optional Field (booleanValue) (Can be skipped, if a given expression evaluates to false)
	var booleanValue *BACnetApplicationTagBoolean = nil
	{
		currentPos := readBuffer.GetPos()
		if pullErr := readBuffer.PullContext("booleanValue"); pullErr != nil {
			return nil, pullErr
		}
		_val, _err := BACnetApplicationTagParse(readBuffer)
		switch {
		case _err != nil && _err != utils.ParseAssertError && !errors.Is(_err, io.EOF):
			return nil, errors.Wrap(_err, "Error parsing 'booleanValue' field")
		case _err == utils.ParseAssertError || errors.Is(_err, io.EOF):
			readBuffer.Reset(currentPos)
		default:
			booleanValue = CastBACnetApplicationTagBoolean(_val)
			if closeErr := readBuffer.CloseContext("booleanValue"); closeErr != nil {
				return nil, closeErr
			}
		}
	}

	// Optional Field (integerValue) (Can be skipped, if a given expression evaluates to false)
	var integerValue *BACnetApplicationTagSignedInteger = nil
	{
		currentPos := readBuffer.GetPos()
		if pullErr := readBuffer.PullContext("integerValue"); pullErr != nil {
			return nil, pullErr
		}
		_val, _err := BACnetApplicationTagParse(readBuffer)
		switch {
		case _err != nil && _err != utils.ParseAssertError && !errors.Is(_err, io.EOF):
			return nil, errors.Wrap(_err, "Error parsing 'integerValue' field")
		case _err == utils.ParseAssertError || errors.Is(_err, io.EOF):
			readBuffer.Reset(currentPos)
		default:
			integerValue = CastBACnetApplicationTagSignedInteger(_val)
			if closeErr := readBuffer.CloseContext("integerValue"); closeErr != nil {
				return nil, closeErr
			}
		}
	}

	// Optional Field (doubleValue) (Can be skipped, if a given expression evaluates to false)
	var doubleValue *BACnetApplicationTagDouble = nil
	{
		currentPos := readBuffer.GetPos()
		if pullErr := readBuffer.PullContext("doubleValue"); pullErr != nil {
			return nil, pullErr
		}
		_val, _err := BACnetApplicationTagParse(readBuffer)
		switch {
		case _err != nil && _err != utils.ParseAssertError && !errors.Is(_err, io.EOF):
			return nil, errors.Wrap(_err, "Error parsing 'doubleValue' field")
		case _err == utils.ParseAssertError || errors.Is(_err, io.EOF):
			readBuffer.Reset(currentPos)
		default:
			doubleValue = CastBACnetApplicationTagDouble(_val)
			if closeErr := readBuffer.CloseContext("doubleValue"); closeErr != nil {
				return nil, closeErr
			}
		}
	}

	// Optional Field (octetStringValue) (Can be skipped, if a given expression evaluates to false)
	var octetStringValue *BACnetApplicationTagOctetString = nil
	{
		currentPos := readBuffer.GetPos()
		if pullErr := readBuffer.PullContext("octetStringValue"); pullErr != nil {
			return nil, pullErr
		}
		_val, _err := BACnetApplicationTagParse(readBuffer)
		switch {
		case _err != nil && _err != utils.ParseAssertError && !errors.Is(_err, io.EOF):
			return nil, errors.Wrap(_err, "Error parsing 'octetStringValue' field")
		case _err == utils.ParseAssertError || errors.Is(_err, io.EOF):
			readBuffer.Reset(currentPos)
		default:
			octetStringValue = CastBACnetApplicationTagOctetString(_val)
			if closeErr := readBuffer.CloseContext("octetStringValue"); closeErr != nil {
				return nil, closeErr
			}
		}
	}

	// Optional Field (characterStringValue) (Can be skipped, if a given expression evaluates to false)
	var characterStringValue *BACnetApplicationTagCharacterString = nil
	{
		currentPos := readBuffer.GetPos()
		if pullErr := readBuffer.PullContext("characterStringValue"); pullErr != nil {
			return nil, pullErr
		}
		_val, _err := BACnetApplicationTagParse(readBuffer)
		switch {
		case _err != nil && _err != utils.ParseAssertError && !errors.Is(_err, io.EOF):
			return nil, errors.Wrap(_err, "Error parsing 'characterStringValue' field")
		case _err == utils.ParseAssertError || errors.Is(_err, io.EOF):
			readBuffer.Reset(currentPos)
		default:
			characterStringValue = CastBACnetApplicationTagCharacterString(_val)
			if closeErr := readBuffer.CloseContext("characterStringValue"); closeErr != nil {
				return nil, closeErr
			}
		}
	}

	// Optional Field (bitStringValue) (Can be skipped, if a given expression evaluates to false)
	var bitStringValue *BACnetApplicationTagBitString = nil
	{
		currentPos := readBuffer.GetPos()
		if pullErr := readBuffer.PullContext("bitStringValue"); pullErr != nil {
			return nil, pullErr
		}
		_val, _err := BACnetApplicationTagParse(readBuffer)
		switch {
		case _err != nil && _err != utils.ParseAssertError && !errors.Is(_err, io.EOF):
			return nil, errors.Wrap(_err, "Error parsing 'bitStringValue' field")
		case _err == utils.ParseAssertError || errors.Is(_err, io.EOF):
			readBuffer.Reset(currentPos)
		default:
			bitStringValue = CastBACnetApplicationTagBitString(_val)
			if closeErr := readBuffer.CloseContext("bitStringValue"); closeErr != nil {
				return nil, closeErr
			}
		}
	}

	// Optional Field (enumeratedValue) (Can be skipped, if a given expression evaluates to false)
	var enumeratedValue *BACnetApplicationTagEnumerated = nil
	{
		currentPos := readBuffer.GetPos()
		if pullErr := readBuffer.PullContext("enumeratedValue"); pullErr != nil {
			return nil, pullErr
		}
		_val, _err := BACnetApplicationTagParse(readBuffer)
		switch {
		case _err != nil && _err != utils.ParseAssertError && !errors.Is(_err, io.EOF):
			return nil, errors.Wrap(_err, "Error parsing 'enumeratedValue' field")
		case _err == utils.ParseAssertError || errors.Is(_err, io.EOF):
			readBuffer.Reset(currentPos)
		default:
			enumeratedValue = CastBACnetApplicationTagEnumerated(_val)
			if closeErr := readBuffer.CloseContext("enumeratedValue"); closeErr != nil {
				return nil, closeErr
			}
		}
	}

	// Optional Field (dateValue) (Can be skipped, if a given expression evaluates to false)
	var dateValue *BACnetApplicationTagDate = nil
	{
		currentPos := readBuffer.GetPos()
		if pullErr := readBuffer.PullContext("dateValue"); pullErr != nil {
			return nil, pullErr
		}
		_val, _err := BACnetApplicationTagParse(readBuffer)
		switch {
		case _err != nil && _err != utils.ParseAssertError && !errors.Is(_err, io.EOF):
			return nil, errors.Wrap(_err, "Error parsing 'dateValue' field")
		case _err == utils.ParseAssertError || errors.Is(_err, io.EOF):
			readBuffer.Reset(currentPos)
		default:
			dateValue = CastBACnetApplicationTagDate(_val)
			if closeErr := readBuffer.CloseContext("dateValue"); closeErr != nil {
				return nil, closeErr
			}
		}
	}

	// Optional Field (timeValue) (Can be skipped, if a given expression evaluates to false)
	var timeValue *BACnetApplicationTagTime = nil
	{
		currentPos := readBuffer.GetPos()
		if pullErr := readBuffer.PullContext("timeValue"); pullErr != nil {
			return nil, pullErr
		}
		_val, _err := BACnetApplicationTagParse(readBuffer)
		switch {
		case _err != nil && _err != utils.ParseAssertError && !errors.Is(_err, io.EOF):
			return nil, errors.Wrap(_err, "Error parsing 'timeValue' field")
		case _err == utils.ParseAssertError || errors.Is(_err, io.EOF):
			readBuffer.Reset(currentPos)
		default:
			timeValue = CastBACnetApplicationTagTime(_val)
			if closeErr := readBuffer.CloseContext("timeValue"); closeErr != nil {
				return nil, closeErr
			}
		}
	}

	// Optional Field (objectIdentifier) (Can be skipped, if a given expression evaluates to false)
	var objectIdentifier *BACnetApplicationTagObjectIdentifier = nil
	{
		currentPos := readBuffer.GetPos()
		if pullErr := readBuffer.PullContext("objectIdentifier"); pullErr != nil {
			return nil, pullErr
		}
		_val, _err := BACnetApplicationTagParse(readBuffer)
		switch {
		case _err != nil && _err != utils.ParseAssertError && !errors.Is(_err, io.EOF):
			return nil, errors.Wrap(_err, "Error parsing 'objectIdentifier' field")
		case _err == utils.ParseAssertError || errors.Is(_err, io.EOF):
			readBuffer.Reset(currentPos)
		default:
			objectIdentifier = CastBACnetApplicationTagObjectIdentifier(_val)
			if closeErr := readBuffer.CloseContext("objectIdentifier"); closeErr != nil {
				return nil, closeErr
			}
		}
	}

	// Optional Field (reference) (Can be skipped, if a given expression evaluates to false)
	var reference *BACnetDeviceObjectPropertyReference = nil
	{
		currentPos := readBuffer.GetPos()
		if pullErr := readBuffer.PullContext("reference"); pullErr != nil {
			return nil, pullErr
		}
		_val, _err := BACnetDeviceObjectPropertyReferenceParse(readBuffer, uint8(0))
		switch {
		case _err != nil && _err != utils.ParseAssertError && !errors.Is(_err, io.EOF):
			return nil, errors.Wrap(_err, "Error parsing 'reference' field")
		case _err == utils.ParseAssertError || errors.Is(_err, io.EOF):
			readBuffer.Reset(currentPos)
		default:
			reference = CastBACnetDeviceObjectPropertyReference(_val)
			if closeErr := readBuffer.CloseContext("reference"); closeErr != nil {
				return nil, closeErr
			}
		}
	}

	// Simple Field (closingTag)
	if pullErr := readBuffer.PullContext("closingTag"); pullErr != nil {
		return nil, pullErr
	}
	_closingTag, _closingTagErr := BACnetContextTagParse(readBuffer, tagNumber, BACnetDataType_CLOSING_TAG)
	if _closingTagErr != nil {
		return nil, errors.Wrap(_closingTagErr, "Error parsing 'closingTag' field")
	}
	closingTag := CastBACnetClosingTag(_closingTag)
	if closeErr := readBuffer.CloseContext("closingTag"); closeErr != nil {
		return nil, closeErr
	}

	if closeErr := readBuffer.CloseContext("BACnetNotificationParametersExtendedParameters"); closeErr != nil {
		return nil, closeErr
	}

	// Create the instance
	return NewBACnetNotificationParametersExtendedParameters(openingTag, nullValue, realValue, unsignedValue, booleanValue, integerValue, doubleValue, octetStringValue, characterStringValue, bitStringValue, enumeratedValue, dateValue, timeValue, objectIdentifier, reference, closingTag), nil
}

func (m *BACnetNotificationParametersExtendedParameters) Serialize(writeBuffer utils.WriteBuffer) error {
	if pushErr := writeBuffer.PushContext("BACnetNotificationParametersExtendedParameters"); pushErr != nil {
		return pushErr
	}

	// Simple Field (openingTag)
	if pushErr := writeBuffer.PushContext("openingTag"); pushErr != nil {
		return pushErr
	}
	_openingTagErr := m.OpeningTag.Serialize(writeBuffer)
	if popErr := writeBuffer.PopContext("openingTag"); popErr != nil {
		return popErr
	}
	if _openingTagErr != nil {
		return errors.Wrap(_openingTagErr, "Error serializing 'openingTag' field")
	}

	// Optional Field (nullValue) (Can be skipped, if the value is null)
	var nullValue *BACnetApplicationTagNull = nil
	if m.NullValue != nil {
		if pushErr := writeBuffer.PushContext("nullValue"); pushErr != nil {
			return pushErr
		}
		nullValue = m.NullValue
		_nullValueErr := nullValue.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("nullValue"); popErr != nil {
			return popErr
		}
		if _nullValueErr != nil {
			return errors.Wrap(_nullValueErr, "Error serializing 'nullValue' field")
		}
	}

	// Optional Field (realValue) (Can be skipped, if the value is null)
	var realValue *BACnetApplicationTagReal = nil
	if m.RealValue != nil {
		if pushErr := writeBuffer.PushContext("realValue"); pushErr != nil {
			return pushErr
		}
		realValue = m.RealValue
		_realValueErr := realValue.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("realValue"); popErr != nil {
			return popErr
		}
		if _realValueErr != nil {
			return errors.Wrap(_realValueErr, "Error serializing 'realValue' field")
		}
	}

	// Optional Field (unsignedValue) (Can be skipped, if the value is null)
	var unsignedValue *BACnetApplicationTagUnsignedInteger = nil
	if m.UnsignedValue != nil {
		if pushErr := writeBuffer.PushContext("unsignedValue"); pushErr != nil {
			return pushErr
		}
		unsignedValue = m.UnsignedValue
		_unsignedValueErr := unsignedValue.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("unsignedValue"); popErr != nil {
			return popErr
		}
		if _unsignedValueErr != nil {
			return errors.Wrap(_unsignedValueErr, "Error serializing 'unsignedValue' field")
		}
	}

	// Optional Field (booleanValue) (Can be skipped, if the value is null)
	var booleanValue *BACnetApplicationTagBoolean = nil
	if m.BooleanValue != nil {
		if pushErr := writeBuffer.PushContext("booleanValue"); pushErr != nil {
			return pushErr
		}
		booleanValue = m.BooleanValue
		_booleanValueErr := booleanValue.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("booleanValue"); popErr != nil {
			return popErr
		}
		if _booleanValueErr != nil {
			return errors.Wrap(_booleanValueErr, "Error serializing 'booleanValue' field")
		}
	}

	// Optional Field (integerValue) (Can be skipped, if the value is null)
	var integerValue *BACnetApplicationTagSignedInteger = nil
	if m.IntegerValue != nil {
		if pushErr := writeBuffer.PushContext("integerValue"); pushErr != nil {
			return pushErr
		}
		integerValue = m.IntegerValue
		_integerValueErr := integerValue.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("integerValue"); popErr != nil {
			return popErr
		}
		if _integerValueErr != nil {
			return errors.Wrap(_integerValueErr, "Error serializing 'integerValue' field")
		}
	}

	// Optional Field (doubleValue) (Can be skipped, if the value is null)
	var doubleValue *BACnetApplicationTagDouble = nil
	if m.DoubleValue != nil {
		if pushErr := writeBuffer.PushContext("doubleValue"); pushErr != nil {
			return pushErr
		}
		doubleValue = m.DoubleValue
		_doubleValueErr := doubleValue.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("doubleValue"); popErr != nil {
			return popErr
		}
		if _doubleValueErr != nil {
			return errors.Wrap(_doubleValueErr, "Error serializing 'doubleValue' field")
		}
	}

	// Optional Field (octetStringValue) (Can be skipped, if the value is null)
	var octetStringValue *BACnetApplicationTagOctetString = nil
	if m.OctetStringValue != nil {
		if pushErr := writeBuffer.PushContext("octetStringValue"); pushErr != nil {
			return pushErr
		}
		octetStringValue = m.OctetStringValue
		_octetStringValueErr := octetStringValue.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("octetStringValue"); popErr != nil {
			return popErr
		}
		if _octetStringValueErr != nil {
			return errors.Wrap(_octetStringValueErr, "Error serializing 'octetStringValue' field")
		}
	}

	// Optional Field (characterStringValue) (Can be skipped, if the value is null)
	var characterStringValue *BACnetApplicationTagCharacterString = nil
	if m.CharacterStringValue != nil {
		if pushErr := writeBuffer.PushContext("characterStringValue"); pushErr != nil {
			return pushErr
		}
		characterStringValue = m.CharacterStringValue
		_characterStringValueErr := characterStringValue.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("characterStringValue"); popErr != nil {
			return popErr
		}
		if _characterStringValueErr != nil {
			return errors.Wrap(_characterStringValueErr, "Error serializing 'characterStringValue' field")
		}
	}

	// Optional Field (bitStringValue) (Can be skipped, if the value is null)
	var bitStringValue *BACnetApplicationTagBitString = nil
	if m.BitStringValue != nil {
		if pushErr := writeBuffer.PushContext("bitStringValue"); pushErr != nil {
			return pushErr
		}
		bitStringValue = m.BitStringValue
		_bitStringValueErr := bitStringValue.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("bitStringValue"); popErr != nil {
			return popErr
		}
		if _bitStringValueErr != nil {
			return errors.Wrap(_bitStringValueErr, "Error serializing 'bitStringValue' field")
		}
	}

	// Optional Field (enumeratedValue) (Can be skipped, if the value is null)
	var enumeratedValue *BACnetApplicationTagEnumerated = nil
	if m.EnumeratedValue != nil {
		if pushErr := writeBuffer.PushContext("enumeratedValue"); pushErr != nil {
			return pushErr
		}
		enumeratedValue = m.EnumeratedValue
		_enumeratedValueErr := enumeratedValue.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("enumeratedValue"); popErr != nil {
			return popErr
		}
		if _enumeratedValueErr != nil {
			return errors.Wrap(_enumeratedValueErr, "Error serializing 'enumeratedValue' field")
		}
	}

	// Optional Field (dateValue) (Can be skipped, if the value is null)
	var dateValue *BACnetApplicationTagDate = nil
	if m.DateValue != nil {
		if pushErr := writeBuffer.PushContext("dateValue"); pushErr != nil {
			return pushErr
		}
		dateValue = m.DateValue
		_dateValueErr := dateValue.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("dateValue"); popErr != nil {
			return popErr
		}
		if _dateValueErr != nil {
			return errors.Wrap(_dateValueErr, "Error serializing 'dateValue' field")
		}
	}

	// Optional Field (timeValue) (Can be skipped, if the value is null)
	var timeValue *BACnetApplicationTagTime = nil
	if m.TimeValue != nil {
		if pushErr := writeBuffer.PushContext("timeValue"); pushErr != nil {
			return pushErr
		}
		timeValue = m.TimeValue
		_timeValueErr := timeValue.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("timeValue"); popErr != nil {
			return popErr
		}
		if _timeValueErr != nil {
			return errors.Wrap(_timeValueErr, "Error serializing 'timeValue' field")
		}
	}

	// Optional Field (objectIdentifier) (Can be skipped, if the value is null)
	var objectIdentifier *BACnetApplicationTagObjectIdentifier = nil
	if m.ObjectIdentifier != nil {
		if pushErr := writeBuffer.PushContext("objectIdentifier"); pushErr != nil {
			return pushErr
		}
		objectIdentifier = m.ObjectIdentifier
		_objectIdentifierErr := objectIdentifier.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("objectIdentifier"); popErr != nil {
			return popErr
		}
		if _objectIdentifierErr != nil {
			return errors.Wrap(_objectIdentifierErr, "Error serializing 'objectIdentifier' field")
		}
	}

	// Optional Field (reference) (Can be skipped, if the value is null)
	var reference *BACnetDeviceObjectPropertyReference = nil
	if m.Reference != nil {
		if pushErr := writeBuffer.PushContext("reference"); pushErr != nil {
			return pushErr
		}
		reference = m.Reference
		_referenceErr := reference.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("reference"); popErr != nil {
			return popErr
		}
		if _referenceErr != nil {
			return errors.Wrap(_referenceErr, "Error serializing 'reference' field")
		}
	}

	// Simple Field (closingTag)
	if pushErr := writeBuffer.PushContext("closingTag"); pushErr != nil {
		return pushErr
	}
	_closingTagErr := m.ClosingTag.Serialize(writeBuffer)
	if popErr := writeBuffer.PopContext("closingTag"); popErr != nil {
		return popErr
	}
	if _closingTagErr != nil {
		return errors.Wrap(_closingTagErr, "Error serializing 'closingTag' field")
	}

	if popErr := writeBuffer.PopContext("BACnetNotificationParametersExtendedParameters"); popErr != nil {
		return popErr
	}
	return nil
}

func (m *BACnetNotificationParametersExtendedParameters) String() string {
	if m == nil {
		return "<nil>"
	}
	buffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	m.Serialize(buffer)
	return buffer.GetBox().String()
}
