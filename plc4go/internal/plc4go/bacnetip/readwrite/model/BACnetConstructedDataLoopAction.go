/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/plc4go/spi/utils"
	"github.com/pkg/errors"
	"io"
)

// Code generated by code-generation. DO NOT EDIT.

// BACnetConstructedDataLoopAction is the data-structure of this message
type BACnetConstructedDataLoopAction struct {
	*BACnetConstructedData
	RawData *BACnetApplicationTagEnumerated

	// Arguments.
	TagNumber                  uint8
	PropertyIdentifierArgument BACnetContextTagPropertyIdentifier
}

// IBACnetConstructedDataLoopAction is the corresponding interface of BACnetConstructedDataLoopAction
type IBACnetConstructedDataLoopAction interface {
	IBACnetConstructedData
	// GetRawData returns RawData (property field)
	GetRawData() *BACnetApplicationTagEnumerated
	// GetIsDirect returns IsDirect (virtual field)
	GetIsDirect() bool
	// GetIsReverse returns IsReverse (virtual field)
	GetIsReverse() bool
	// GetLengthInBytes returns the length in bytes
	GetLengthInBytes() uint16
	// GetLengthInBits returns the length in bits
	GetLengthInBits() uint16
	// Serialize serializes this type
	Serialize(writeBuffer utils.WriteBuffer) error
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for discriminator values.
///////////////////////

func (m *BACnetConstructedDataLoopAction) GetObjectType() BACnetObjectType {
	return BACnetObjectType_LOOP
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

func (m *BACnetConstructedDataLoopAction) InitializeParent(parent *BACnetConstructedData, openingTag *BACnetOpeningTag, closingTag *BACnetClosingTag) {
	m.BACnetConstructedData.OpeningTag = openingTag
	m.BACnetConstructedData.ClosingTag = closingTag
}

func (m *BACnetConstructedDataLoopAction) GetParent() *BACnetConstructedData {
	return m.BACnetConstructedData
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *BACnetConstructedDataLoopAction) GetRawData() *BACnetApplicationTagEnumerated {
	return m.RawData
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for virtual fields.
///////////////////////

func (m *BACnetConstructedDataLoopAction) GetIsDirect() bool {
	rawData := m.RawData
	_ = rawData
	return bool(bool(bool((m.GetRawData()) != (nil))) && bool(bool(((*m.GetRawData()).GetActualValue()) == (0))))
}

func (m *BACnetConstructedDataLoopAction) GetIsReverse() bool {
	rawData := m.RawData
	_ = rawData
	return bool(bool(bool((m.GetRawData()) != (nil))) && bool(bool(((*m.GetRawData()).GetActualValue()) == (1))))
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewBACnetConstructedDataLoopAction factory function for BACnetConstructedDataLoopAction
func NewBACnetConstructedDataLoopAction(rawData *BACnetApplicationTagEnumerated, openingTag *BACnetOpeningTag, closingTag *BACnetClosingTag, tagNumber uint8, propertyIdentifierArgument BACnetContextTagPropertyIdentifier) *BACnetConstructedDataLoopAction {
	_result := &BACnetConstructedDataLoopAction{
		RawData:               rawData,
		BACnetConstructedData: NewBACnetConstructedData(openingTag, closingTag, tagNumber, propertyIdentifierArgument),
	}
	_result.Child = _result
	return _result
}

func CastBACnetConstructedDataLoopAction(structType interface{}) *BACnetConstructedDataLoopAction {
	if casted, ok := structType.(BACnetConstructedDataLoopAction); ok {
		return &casted
	}
	if casted, ok := structType.(*BACnetConstructedDataLoopAction); ok {
		return casted
	}
	if casted, ok := structType.(BACnetConstructedData); ok {
		return CastBACnetConstructedDataLoopAction(casted.Child)
	}
	if casted, ok := structType.(*BACnetConstructedData); ok {
		return CastBACnetConstructedDataLoopAction(casted.Child)
	}
	return nil
}

func (m *BACnetConstructedDataLoopAction) GetTypeName() string {
	return "BACnetConstructedDataLoopAction"
}

func (m *BACnetConstructedDataLoopAction) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *BACnetConstructedDataLoopAction) GetLengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(m.GetParentLengthInBits())

	// Optional Field (rawData)
	if m.RawData != nil {
		lengthInBits += (*m.RawData).GetLengthInBits()
	}

	// A virtual field doesn't have any in- or output.

	// A virtual field doesn't have any in- or output.

	return lengthInBits
}

func (m *BACnetConstructedDataLoopAction) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func BACnetConstructedDataLoopActionParse(readBuffer utils.ReadBuffer, tagNumber uint8, objectType BACnetObjectType, propertyIdentifierArgument *BACnetContextTagPropertyIdentifier) (*BACnetConstructedDataLoopAction, error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("BACnetConstructedDataLoopAction"); pullErr != nil {
		return nil, pullErr
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	// Optional Field (rawData) (Can be skipped, if a given expression evaluates to false)
	var rawData *BACnetApplicationTagEnumerated = nil
	{
		currentPos = positionAware.GetPos()
		if pullErr := readBuffer.PullContext("rawData"); pullErr != nil {
			return nil, pullErr
		}
		_val, _err := BACnetApplicationTagParse(readBuffer)
		switch {
		case errors.Is(_err, utils.ParseAssertError{}) || errors.Is(_err, io.EOF):
			readBuffer.Reset(currentPos)
		case _err != nil:
			return nil, errors.Wrap(_err, "Error parsing 'rawData' field")
		default:
			rawData = CastBACnetApplicationTagEnumerated(_val)
			if closeErr := readBuffer.CloseContext("rawData"); closeErr != nil {
				return nil, closeErr
			}
		}
	}

	// Virtual field
	_isDirect := bool(bool((rawData) != (nil))) && bool(bool(((*rawData).GetActualValue()) == (0)))
	isDirect := bool(_isDirect)
	_ = isDirect

	// Virtual field
	_isReverse := bool(bool((rawData) != (nil))) && bool(bool(((*rawData).GetActualValue()) == (1)))
	isReverse := bool(_isReverse)
	_ = isReverse

	if closeErr := readBuffer.CloseContext("BACnetConstructedDataLoopAction"); closeErr != nil {
		return nil, closeErr
	}

	// Create a partially initialized instance
	_child := &BACnetConstructedDataLoopAction{
		RawData:               CastBACnetApplicationTagEnumerated(rawData),
		BACnetConstructedData: &BACnetConstructedData{},
	}
	_child.BACnetConstructedData.Child = _child
	return _child, nil
}

func (m *BACnetConstructedDataLoopAction) Serialize(writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	ser := func() error {
		if pushErr := writeBuffer.PushContext("BACnetConstructedDataLoopAction"); pushErr != nil {
			return pushErr
		}

		// Optional Field (rawData) (Can be skipped, if the value is null)
		var rawData *BACnetApplicationTagEnumerated = nil
		if m.RawData != nil {
			if pushErr := writeBuffer.PushContext("rawData"); pushErr != nil {
				return pushErr
			}
			rawData = m.RawData
			_rawDataErr := rawData.Serialize(writeBuffer)
			if popErr := writeBuffer.PopContext("rawData"); popErr != nil {
				return popErr
			}
			if _rawDataErr != nil {
				return errors.Wrap(_rawDataErr, "Error serializing 'rawData' field")
			}
		}
		// Virtual field
		if _isDirectErr := writeBuffer.WriteVirtual("isDirect", m.GetIsDirect()); _isDirectErr != nil {
			return errors.Wrap(_isDirectErr, "Error serializing 'isDirect' field")
		}
		// Virtual field
		if _isReverseErr := writeBuffer.WriteVirtual("isReverse", m.GetIsReverse()); _isReverseErr != nil {
			return errors.Wrap(_isReverseErr, "Error serializing 'isReverse' field")
		}

		if popErr := writeBuffer.PopContext("BACnetConstructedDataLoopAction"); popErr != nil {
			return popErr
		}
		return nil
	}
	return m.SerializeParent(writeBuffer, m, ser)
}

func (m *BACnetConstructedDataLoopAction) String() string {
	if m == nil {
		return "<nil>"
	}
	buffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := m.Serialize(buffer); err != nil {
		return err.Error()
	}
	return buffer.GetBox().String()
}
