/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/plc4go/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// BACnetLiftGroupMode is an enum
type BACnetLiftGroupMode uint8

type IBACnetLiftGroupMode interface {
	Serialize(writeBuffer utils.WriteBuffer) error
}

const (
	BACnetLiftGroupMode_UNKNOWN         BACnetLiftGroupMode = 0
	BACnetLiftGroupMode_NORMAL          BACnetLiftGroupMode = 1
	BACnetLiftGroupMode_DOWN_PEAK       BACnetLiftGroupMode = 2
	BACnetLiftGroupMode_TWO_WAY         BACnetLiftGroupMode = 3
	BACnetLiftGroupMode_FOUR_WAY        BACnetLiftGroupMode = 4
	BACnetLiftGroupMode_EMERGENCY_POWER BACnetLiftGroupMode = 5
	BACnetLiftGroupMode_UP_PEAK         BACnetLiftGroupMode = 6
)

var BACnetLiftGroupModeValues []BACnetLiftGroupMode

func init() {
	_ = errors.New
	BACnetLiftGroupModeValues = []BACnetLiftGroupMode{
		BACnetLiftGroupMode_UNKNOWN,
		BACnetLiftGroupMode_NORMAL,
		BACnetLiftGroupMode_DOWN_PEAK,
		BACnetLiftGroupMode_TWO_WAY,
		BACnetLiftGroupMode_FOUR_WAY,
		BACnetLiftGroupMode_EMERGENCY_POWER,
		BACnetLiftGroupMode_UP_PEAK,
	}
}

func BACnetLiftGroupModeByValue(value uint8) BACnetLiftGroupMode {
	switch value {
	case 0:
		return BACnetLiftGroupMode_UNKNOWN
	case 1:
		return BACnetLiftGroupMode_NORMAL
	case 2:
		return BACnetLiftGroupMode_DOWN_PEAK
	case 3:
		return BACnetLiftGroupMode_TWO_WAY
	case 4:
		return BACnetLiftGroupMode_FOUR_WAY
	case 5:
		return BACnetLiftGroupMode_EMERGENCY_POWER
	case 6:
		return BACnetLiftGroupMode_UP_PEAK
	}
	return 0
}

func BACnetLiftGroupModeByName(value string) BACnetLiftGroupMode {
	switch value {
	case "UNKNOWN":
		return BACnetLiftGroupMode_UNKNOWN
	case "NORMAL":
		return BACnetLiftGroupMode_NORMAL
	case "DOWN_PEAK":
		return BACnetLiftGroupMode_DOWN_PEAK
	case "TWO_WAY":
		return BACnetLiftGroupMode_TWO_WAY
	case "FOUR_WAY":
		return BACnetLiftGroupMode_FOUR_WAY
	case "EMERGENCY_POWER":
		return BACnetLiftGroupMode_EMERGENCY_POWER
	case "UP_PEAK":
		return BACnetLiftGroupMode_UP_PEAK
	}
	return 0
}

func BACnetLiftGroupModeKnows(value uint8) bool {
	for _, typeValue := range BACnetLiftGroupModeValues {
		if uint8(typeValue) == value {
			return true
		}
	}
	return false
}

func CastBACnetLiftGroupMode(structType interface{}) BACnetLiftGroupMode {
	castFunc := func(typ interface{}) BACnetLiftGroupMode {
		if sBACnetLiftGroupMode, ok := typ.(BACnetLiftGroupMode); ok {
			return sBACnetLiftGroupMode
		}
		return 0
	}
	return castFunc(structType)
}

func (m BACnetLiftGroupMode) GetLengthInBits() uint16 {
	return 8
}

func (m BACnetLiftGroupMode) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func BACnetLiftGroupModeParse(readBuffer utils.ReadBuffer) (BACnetLiftGroupMode, error) {
	val, err := readBuffer.ReadUint8("BACnetLiftGroupMode", 8)
	if err != nil {
		return 0, nil
	}
	return BACnetLiftGroupModeByValue(val), nil
}

func (e BACnetLiftGroupMode) Serialize(writeBuffer utils.WriteBuffer) error {
	return writeBuffer.WriteUint8("BACnetLiftGroupMode", 8, uint8(e), utils.WithAdditionalStringRepresentation(e.name()))
}

func (e BACnetLiftGroupMode) name() string {
	switch e {
	case BACnetLiftGroupMode_UNKNOWN:
		return "UNKNOWN"
	case BACnetLiftGroupMode_NORMAL:
		return "NORMAL"
	case BACnetLiftGroupMode_DOWN_PEAK:
		return "DOWN_PEAK"
	case BACnetLiftGroupMode_TWO_WAY:
		return "TWO_WAY"
	case BACnetLiftGroupMode_FOUR_WAY:
		return "FOUR_WAY"
	case BACnetLiftGroupMode_EMERGENCY_POWER:
		return "EMERGENCY_POWER"
	case BACnetLiftGroupMode_UP_PEAK:
		return "UP_PEAK"
	}
	return ""
}

func (e BACnetLiftGroupMode) String() string {
	return e.name()
}
