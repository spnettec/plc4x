/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/plc4go/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// The data-structure of this message
type BACnetConstructedData struct {
	OpeningTag         *BACnetOpeningTag
	Data               []*BACnetConstructedDataElement
	PropertyIdentifier *BACnetContextTagPropertyIdentifier
	Content            *BACnetApplicationTag
	ClosingTag         *BACnetClosingTag
}

// The corresponding interface
type IBACnetConstructedData interface {
	LengthInBytes() uint16
	LengthInBits() uint16
	Serialize(writeBuffer utils.WriteBuffer) error
}

func NewBACnetConstructedData(openingTag *BACnetOpeningTag, data []*BACnetConstructedDataElement, propertyIdentifier *BACnetContextTagPropertyIdentifier, content *BACnetApplicationTag, closingTag *BACnetClosingTag) *BACnetConstructedData {
	return &BACnetConstructedData{OpeningTag: openingTag, Data: data, PropertyIdentifier: propertyIdentifier, Content: content, ClosingTag: closingTag}
}

func CastBACnetConstructedData(structType interface{}) *BACnetConstructedData {
	castFunc := func(typ interface{}) *BACnetConstructedData {
		if casted, ok := typ.(BACnetConstructedData); ok {
			return &casted
		}
		if casted, ok := typ.(*BACnetConstructedData); ok {
			return casted
		}
		return nil
	}
	return castFunc(structType)
}

func (m *BACnetConstructedData) GetTypeName() string {
	return "BACnetConstructedData"
}

func (m *BACnetConstructedData) LengthInBits() uint16 {
	return m.LengthInBitsConditional(false)
}

func (m *BACnetConstructedData) LengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(0)

	// Optional Field (openingTag)
	if m.OpeningTag != nil {
		lengthInBits += (*m.OpeningTag).LengthInBits()
	}

	// Array field
	if len(m.Data) > 0 {
		for _, element := range m.Data {
			lengthInBits += element.LengthInBits()
		}
	}

	// Optional Field (propertyIdentifier)
	if m.PropertyIdentifier != nil {
		lengthInBits += (*m.PropertyIdentifier).LengthInBits()
	}

	// Optional Field (content)
	if m.Content != nil {
		lengthInBits += (*m.Content).LengthInBits()
	}

	// Optional Field (closingTag)
	if m.ClosingTag != nil {
		lengthInBits += (*m.ClosingTag).LengthInBits()
	}

	return lengthInBits
}

func (m *BACnetConstructedData) LengthInBytes() uint16 {
	return m.LengthInBits() / 8
}

func BACnetConstructedDataParse(readBuffer utils.ReadBuffer, tagNumber uint8) (*BACnetConstructedData, error) {
	if pullErr := readBuffer.PullContext("BACnetConstructedData"); pullErr != nil {
		return nil, pullErr
	}

	// Optional Field (openingTag) (Can be skipped, if a given expression evaluates to false)
	var openingTag *BACnetOpeningTag = nil
	{
		currentPos := readBuffer.GetPos()
		if pullErr := readBuffer.PullContext("openingTag"); pullErr != nil {
			return nil, pullErr
		}
		_val, _err := BACnetContextTagParse(readBuffer, tagNumber, BACnetDataType_OPENING_TAG)
		switch {
		case _err != nil && _err != utils.ParseAssertError:
			return nil, errors.Wrap(_err, "Error parsing 'openingTag' field")
		case _err == utils.ParseAssertError:
			readBuffer.Reset(currentPos)
		default:
			openingTag = CastBACnetOpeningTag(_val)
			if closeErr := readBuffer.CloseContext("openingTag"); closeErr != nil {
				return nil, closeErr
			}
		}
	}

	// Array field (data)
	if pullErr := readBuffer.PullContext("data", utils.WithRenderAsList(true)); pullErr != nil {
		return nil, pullErr
	}
	// Terminated array
	data := make([]*BACnetConstructedDataElement, 0)
	{
		for !bool(IsBACnetConstructedDataClosingTag(readBuffer, tagNumber)) {
			_item, _err := BACnetConstructedDataElementParse(readBuffer)
			if _err != nil {
				return nil, errors.Wrap(_err, "Error parsing 'data' field")
			}
			data = append(data, _item)

		}
	}
	if closeErr := readBuffer.CloseContext("data", utils.WithRenderAsList(true)); closeErr != nil {
		return nil, closeErr
	}

	// Optional Field (propertyIdentifier) (Can be skipped, if a given expression evaluates to false)
	var propertyIdentifier *BACnetContextTagPropertyIdentifier = nil
	if bool((len(data)) == (0)) {
		currentPos := readBuffer.GetPos()
		if pullErr := readBuffer.PullContext("propertyIdentifier"); pullErr != nil {
			return nil, pullErr
		}
		_val, _err := BACnetContextTagParse(readBuffer, uint8(0), BACnetDataType_BACNET_PROPERTY_IDENTIFIER)
		switch {
		case _err != nil && _err != utils.ParseAssertError:
			return nil, errors.Wrap(_err, "Error parsing 'propertyIdentifier' field")
		case _err == utils.ParseAssertError:
			readBuffer.Reset(currentPos)
		default:
			propertyIdentifier = CastBACnetContextTagPropertyIdentifier(_val)
			if closeErr := readBuffer.CloseContext("propertyIdentifier"); closeErr != nil {
				return nil, closeErr
			}
		}
	}

	// Optional Field (content) (Can be skipped, if a given expression evaluates to false)
	var content *BACnetApplicationTag = nil
	if bool((len(data)) == (0)) {
		currentPos := readBuffer.GetPos()
		if pullErr := readBuffer.PullContext("content"); pullErr != nil {
			return nil, pullErr
		}
		_val, _err := BACnetApplicationTagParse(readBuffer)
		switch {
		case _err != nil && _err != utils.ParseAssertError:
			return nil, errors.Wrap(_err, "Error parsing 'content' field")
		case _err == utils.ParseAssertError:
			readBuffer.Reset(currentPos)
		default:
			content = CastBACnetApplicationTag(_val)
			if closeErr := readBuffer.CloseContext("content"); closeErr != nil {
				return nil, closeErr
			}
		}
	}

	// Optional Field (closingTag) (Can be skipped, if a given expression evaluates to false)
	var closingTag *BACnetClosingTag = nil
	{
		currentPos := readBuffer.GetPos()
		if pullErr := readBuffer.PullContext("closingTag"); pullErr != nil {
			return nil, pullErr
		}
		_val, _err := BACnetContextTagParse(readBuffer, tagNumber, BACnetDataType_CLOSING_TAG)
		switch {
		case _err != nil && _err != utils.ParseAssertError:
			return nil, errors.Wrap(_err, "Error parsing 'closingTag' field")
		case _err == utils.ParseAssertError:
			readBuffer.Reset(currentPos)
		default:
			closingTag = CastBACnetClosingTag(_val)
			if closeErr := readBuffer.CloseContext("closingTag"); closeErr != nil {
				return nil, closeErr
			}
		}
	}

	if closeErr := readBuffer.CloseContext("BACnetConstructedData"); closeErr != nil {
		return nil, closeErr
	}

	// Create the instance
	return NewBACnetConstructedData(openingTag, data, propertyIdentifier, content, closingTag), nil
}

func (m *BACnetConstructedData) Serialize(writeBuffer utils.WriteBuffer) error {
	if pushErr := writeBuffer.PushContext("BACnetConstructedData"); pushErr != nil {
		return pushErr
	}

	// Optional Field (openingTag) (Can be skipped, if the value is null)
	var openingTag *BACnetOpeningTag = nil
	if m.OpeningTag != nil {
		if pushErr := writeBuffer.PushContext("openingTag"); pushErr != nil {
			return pushErr
		}
		openingTag = m.OpeningTag
		_openingTagErr := openingTag.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("openingTag"); popErr != nil {
			return popErr
		}
		if _openingTagErr != nil {
			return errors.Wrap(_openingTagErr, "Error serializing 'openingTag' field")
		}
	}

	// Array Field (data)
	if m.Data != nil {
		if pushErr := writeBuffer.PushContext("data", utils.WithRenderAsList(true)); pushErr != nil {
			return pushErr
		}
		for _, _element := range m.Data {
			_elementErr := _element.Serialize(writeBuffer)
			if _elementErr != nil {
				return errors.Wrap(_elementErr, "Error serializing 'data' field")
			}
		}
		if popErr := writeBuffer.PopContext("data", utils.WithRenderAsList(true)); popErr != nil {
			return popErr
		}
	}

	// Optional Field (propertyIdentifier) (Can be skipped, if the value is null)
	var propertyIdentifier *BACnetContextTagPropertyIdentifier = nil
	if m.PropertyIdentifier != nil {
		if pushErr := writeBuffer.PushContext("propertyIdentifier"); pushErr != nil {
			return pushErr
		}
		propertyIdentifier = m.PropertyIdentifier
		_propertyIdentifierErr := propertyIdentifier.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("propertyIdentifier"); popErr != nil {
			return popErr
		}
		if _propertyIdentifierErr != nil {
			return errors.Wrap(_propertyIdentifierErr, "Error serializing 'propertyIdentifier' field")
		}
	}

	// Optional Field (content) (Can be skipped, if the value is null)
	var content *BACnetApplicationTag = nil
	if m.Content != nil {
		if pushErr := writeBuffer.PushContext("content"); pushErr != nil {
			return pushErr
		}
		content = m.Content
		_contentErr := content.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("content"); popErr != nil {
			return popErr
		}
		if _contentErr != nil {
			return errors.Wrap(_contentErr, "Error serializing 'content' field")
		}
	}

	// Optional Field (closingTag) (Can be skipped, if the value is null)
	var closingTag *BACnetClosingTag = nil
	if m.ClosingTag != nil {
		if pushErr := writeBuffer.PushContext("closingTag"); pushErr != nil {
			return pushErr
		}
		closingTag = m.ClosingTag
		_closingTagErr := closingTag.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("closingTag"); popErr != nil {
			return popErr
		}
		if _closingTagErr != nil {
			return errors.Wrap(_closingTagErr, "Error serializing 'closingTag' field")
		}
	}

	if popErr := writeBuffer.PopContext("BACnetConstructedData"); popErr != nil {
		return popErr
	}
	return nil
}

func (m *BACnetConstructedData) String() string {
	if m == nil {
		return "<nil>"
	}
	buffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	m.Serialize(buffer)
	return buffer.GetBox().String()
}
