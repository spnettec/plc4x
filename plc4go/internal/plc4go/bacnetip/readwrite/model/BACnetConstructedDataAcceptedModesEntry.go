/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/plc4go/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// BACnetConstructedDataAcceptedModesEntry is the data-structure of this message
type BACnetConstructedDataAcceptedModesEntry struct {
	RawData *BACnetApplicationTagEnumerated
}

// IBACnetConstructedDataAcceptedModesEntry is the corresponding interface of BACnetConstructedDataAcceptedModesEntry
type IBACnetConstructedDataAcceptedModesEntry interface {
	// GetRawData returns RawData (property field)
	GetRawData() *BACnetApplicationTagEnumerated
	// GetIsAcceptedModeProprietary returns IsAcceptedModeProprietary (virtual field)
	GetIsAcceptedModeProprietary() bool
	// GetAcceptedMode returns AcceptedMode (virtual field)
	GetAcceptedMode() BACnetLifeSafetyMode
	// GetAcceptedModeProprietary returns AcceptedModeProprietary (virtual field)
	GetAcceptedModeProprietary() uint16
	// GetLengthInBytes returns the length in bytes
	GetLengthInBytes() uint16
	// GetLengthInBits returns the length in bits
	GetLengthInBits() uint16
	// Serialize serializes this type
	Serialize(writeBuffer utils.WriteBuffer) error
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *BACnetConstructedDataAcceptedModesEntry) GetRawData() *BACnetApplicationTagEnumerated {
	return m.RawData
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for virtual fields.
///////////////////////

func (m *BACnetConstructedDataAcceptedModesEntry) GetIsAcceptedModeProprietary() bool {
	return bool(bool((m.GetRawData().GetActualValue()) > (255)))
}

func (m *BACnetConstructedDataAcceptedModesEntry) GetAcceptedMode() BACnetLifeSafetyMode {
	return BACnetLifeSafetyMode(MapBACnetLifeSafetyMode(m.GetRawData(), m.GetIsAcceptedModeProprietary()))
}

func (m *BACnetConstructedDataAcceptedModesEntry) GetAcceptedModeProprietary() uint16 {
	return uint16(utils.InlineIf(m.GetIsAcceptedModeProprietary(), func() interface{} { return uint16(m.GetRawData().GetActualValue()) }, func() interface{} { return uint16(uint16(0)) }).(uint16))
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewBACnetConstructedDataAcceptedModesEntry factory function for BACnetConstructedDataAcceptedModesEntry
func NewBACnetConstructedDataAcceptedModesEntry(rawData *BACnetApplicationTagEnumerated) *BACnetConstructedDataAcceptedModesEntry {
	return &BACnetConstructedDataAcceptedModesEntry{RawData: rawData}
}

func CastBACnetConstructedDataAcceptedModesEntry(structType interface{}) *BACnetConstructedDataAcceptedModesEntry {
	if casted, ok := structType.(BACnetConstructedDataAcceptedModesEntry); ok {
		return &casted
	}
	if casted, ok := structType.(*BACnetConstructedDataAcceptedModesEntry); ok {
		return casted
	}
	return nil
}

func (m *BACnetConstructedDataAcceptedModesEntry) GetTypeName() string {
	return "BACnetConstructedDataAcceptedModesEntry"
}

func (m *BACnetConstructedDataAcceptedModesEntry) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *BACnetConstructedDataAcceptedModesEntry) GetLengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(0)

	// Simple field (rawData)
	lengthInBits += m.RawData.GetLengthInBits()

	// A virtual field doesn't have any in- or output.

	// A virtual field doesn't have any in- or output.

	// A virtual field doesn't have any in- or output.

	return lengthInBits
}

func (m *BACnetConstructedDataAcceptedModesEntry) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func BACnetConstructedDataAcceptedModesEntryParse(readBuffer utils.ReadBuffer) (*BACnetConstructedDataAcceptedModesEntry, error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("BACnetConstructedDataAcceptedModesEntry"); pullErr != nil {
		return nil, pullErr
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	// Simple Field (rawData)
	if pullErr := readBuffer.PullContext("rawData"); pullErr != nil {
		return nil, pullErr
	}
	_rawData, _rawDataErr := BACnetApplicationTagParse(readBuffer)
	if _rawDataErr != nil {
		return nil, errors.Wrap(_rawDataErr, "Error parsing 'rawData' field")
	}
	rawData := CastBACnetApplicationTagEnumerated(_rawData)
	if closeErr := readBuffer.CloseContext("rawData"); closeErr != nil {
		return nil, closeErr
	}

	// Virtual field
	_isAcceptedModeProprietary := bool((rawData.GetActualValue()) > (255))
	isAcceptedModeProprietary := bool(_isAcceptedModeProprietary)
	_ = isAcceptedModeProprietary

	// Virtual field
	_acceptedMode := MapBACnetLifeSafetyMode(rawData, isAcceptedModeProprietary)
	acceptedMode := BACnetLifeSafetyMode(_acceptedMode)
	_ = acceptedMode

	// Virtual field
	_acceptedModeProprietary := utils.InlineIf(isAcceptedModeProprietary, func() interface{} { return uint16(rawData.GetActualValue()) }, func() interface{} { return uint16(uint16(0)) }).(uint16)
	acceptedModeProprietary := uint16(_acceptedModeProprietary)
	_ = acceptedModeProprietary

	if closeErr := readBuffer.CloseContext("BACnetConstructedDataAcceptedModesEntry"); closeErr != nil {
		return nil, closeErr
	}

	// Create the instance
	return NewBACnetConstructedDataAcceptedModesEntry(rawData), nil
}

func (m *BACnetConstructedDataAcceptedModesEntry) Serialize(writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	if pushErr := writeBuffer.PushContext("BACnetConstructedDataAcceptedModesEntry"); pushErr != nil {
		return pushErr
	}

	// Simple Field (rawData)
	if pushErr := writeBuffer.PushContext("rawData"); pushErr != nil {
		return pushErr
	}
	_rawDataErr := m.RawData.Serialize(writeBuffer)
	if popErr := writeBuffer.PopContext("rawData"); popErr != nil {
		return popErr
	}
	if _rawDataErr != nil {
		return errors.Wrap(_rawDataErr, "Error serializing 'rawData' field")
	}
	// Virtual field
	if _isAcceptedModeProprietaryErr := writeBuffer.WriteVirtual("isAcceptedModeProprietary", m.GetIsAcceptedModeProprietary()); _isAcceptedModeProprietaryErr != nil {
		return errors.Wrap(_isAcceptedModeProprietaryErr, "Error serializing 'isAcceptedModeProprietary' field")
	}
	// Virtual field
	if _acceptedModeErr := writeBuffer.WriteVirtual("acceptedMode", m.GetAcceptedMode()); _acceptedModeErr != nil {
		return errors.Wrap(_acceptedModeErr, "Error serializing 'acceptedMode' field")
	}
	// Virtual field
	if _acceptedModeProprietaryErr := writeBuffer.WriteVirtual("acceptedModeProprietary", m.GetAcceptedModeProprietary()); _acceptedModeProprietaryErr != nil {
		return errors.Wrap(_acceptedModeProprietaryErr, "Error serializing 'acceptedModeProprietary' field")
	}

	if popErr := writeBuffer.PopContext("BACnetConstructedDataAcceptedModesEntry"); popErr != nil {
		return popErr
	}
	return nil
}

func (m *BACnetConstructedDataAcceptedModesEntry) String() string {
	if m == nil {
		return "<nil>"
	}
	buffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := m.Serialize(buffer); err != nil {
		return err.Error()
	}
	return buffer.GetBox().String()
}
