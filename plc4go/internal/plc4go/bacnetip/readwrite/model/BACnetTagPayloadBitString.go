/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/plc4go/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// The data-structure of this message
type BACnetTagPayloadBitString struct {
	UnusedBits uint8
	Data       []bool
	Unused     []bool
}

// The corresponding interface
type IBACnetTagPayloadBitString interface {
	// GetUnusedBits returns UnusedBits
	GetUnusedBits() uint8
	// GetData returns Data
	GetData() []bool
	// GetUnused returns Unused
	GetUnused() []bool
	// LengthInBytes returns the length in bytes
	LengthInBytes() uint16
	// LengthInBits returns the length in bits
	LengthInBits() uint16
	// Serialize serializes this type
	Serialize(writeBuffer utils.WriteBuffer) error
}

///////////////////////////////////////////////////////////
// Accessors for property fields.
///////////////////////////////////////////////////////////
func (m *BACnetTagPayloadBitString) GetUnusedBits() uint8 {
	return m.UnusedBits
}

func (m *BACnetTagPayloadBitString) GetData() []bool {
	return m.Data
}

func (m *BACnetTagPayloadBitString) GetUnused() []bool {
	return m.Unused
}

///////////////////////////////////////////////////////////
// Accessors for virtual fields.
///////////////////////////////////////////////////////////

func NewBACnetTagPayloadBitString(unusedBits uint8, data []bool, unused []bool) *BACnetTagPayloadBitString {
	return &BACnetTagPayloadBitString{UnusedBits: unusedBits, Data: data, Unused: unused}
}

func CastBACnetTagPayloadBitString(structType interface{}) *BACnetTagPayloadBitString {
	castFunc := func(typ interface{}) *BACnetTagPayloadBitString {
		if casted, ok := typ.(BACnetTagPayloadBitString); ok {
			return &casted
		}
		if casted, ok := typ.(*BACnetTagPayloadBitString); ok {
			return casted
		}
		return nil
	}
	return castFunc(structType)
}

func (m *BACnetTagPayloadBitString) GetTypeName() string {
	return "BACnetTagPayloadBitString"
}

func (m *BACnetTagPayloadBitString) LengthInBits() uint16 {
	return m.LengthInBitsConditional(false)
}

func (m *BACnetTagPayloadBitString) LengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(0)

	// Simple field (unusedBits)
	lengthInBits += 8

	// Array field
	if len(m.Data) > 0 {
		lengthInBits += 1 * uint16(len(m.Data))
	}

	// Array field
	if len(m.Unused) > 0 {
		lengthInBits += 1 * uint16(len(m.Unused))
	}

	return lengthInBits
}

func (m *BACnetTagPayloadBitString) LengthInBytes() uint16 {
	return m.LengthInBits() / 8
}

func BACnetTagPayloadBitStringParse(readBuffer utils.ReadBuffer, actualLength uint32) (*BACnetTagPayloadBitString, error) {
	if pullErr := readBuffer.PullContext("BACnetTagPayloadBitString"); pullErr != nil {
		return nil, pullErr
	}

	// Simple Field (unusedBits)
	_unusedBits, _unusedBitsErr := readBuffer.ReadUint8("unusedBits", 8)
	if _unusedBitsErr != nil {
		return nil, errors.Wrap(_unusedBitsErr, "Error parsing 'unusedBits' field")
	}
	unusedBits := _unusedBits

	// Array field (data)
	if pullErr := readBuffer.PullContext("data", utils.WithRenderAsList(true)); pullErr != nil {
		return nil, pullErr
	}
	// Count array
	data := make([]bool, uint16(uint16(uint16(uint16(uint16(actualLength)-uint16(uint16(1))))*uint16(uint16(8))))-uint16(unusedBits))
	{
		for curItem := uint16(0); curItem < uint16(uint16(uint16(uint16(uint16(uint16(actualLength)-uint16(uint16(1))))*uint16(uint16(8))))-uint16(unusedBits)); curItem++ {
			_item, _err := readBuffer.ReadBit("")
			if _err != nil {
				return nil, errors.Wrap(_err, "Error parsing 'data' field")
			}
			data[curItem] = _item
		}
	}
	if closeErr := readBuffer.CloseContext("data", utils.WithRenderAsList(true)); closeErr != nil {
		return nil, closeErr
	}

	// Array field (unused)
	if pullErr := readBuffer.PullContext("unused", utils.WithRenderAsList(true)); pullErr != nil {
		return nil, pullErr
	}
	// Count array
	unused := make([]bool, unusedBits)
	{
		for curItem := uint16(0); curItem < uint16(unusedBits); curItem++ {
			_item, _err := readBuffer.ReadBit("")
			if _err != nil {
				return nil, errors.Wrap(_err, "Error parsing 'unused' field")
			}
			unused[curItem] = _item
		}
	}
	if closeErr := readBuffer.CloseContext("unused", utils.WithRenderAsList(true)); closeErr != nil {
		return nil, closeErr
	}

	if closeErr := readBuffer.CloseContext("BACnetTagPayloadBitString"); closeErr != nil {
		return nil, closeErr
	}

	// Create the instance
	return NewBACnetTagPayloadBitString(unusedBits, data, unused), nil
}

func (m *BACnetTagPayloadBitString) Serialize(writeBuffer utils.WriteBuffer) error {
	if pushErr := writeBuffer.PushContext("BACnetTagPayloadBitString"); pushErr != nil {
		return pushErr
	}

	// Simple Field (unusedBits)
	unusedBits := uint8(m.UnusedBits)
	_unusedBitsErr := writeBuffer.WriteUint8("unusedBits", 8, (unusedBits))
	if _unusedBitsErr != nil {
		return errors.Wrap(_unusedBitsErr, "Error serializing 'unusedBits' field")
	}

	// Array Field (data)
	if m.Data != nil {
		if pushErr := writeBuffer.PushContext("data", utils.WithRenderAsList(true)); pushErr != nil {
			return pushErr
		}
		for _, _element := range m.Data {
			_elementErr := writeBuffer.WriteBit("", _element)
			if _elementErr != nil {
				return errors.Wrap(_elementErr, "Error serializing 'data' field")
			}
		}
		if popErr := writeBuffer.PopContext("data", utils.WithRenderAsList(true)); popErr != nil {
			return popErr
		}
	}

	// Array Field (unused)
	if m.Unused != nil {
		if pushErr := writeBuffer.PushContext("unused", utils.WithRenderAsList(true)); pushErr != nil {
			return pushErr
		}
		for _, _element := range m.Unused {
			_elementErr := writeBuffer.WriteBit("", _element)
			if _elementErr != nil {
				return errors.Wrap(_elementErr, "Error serializing 'unused' field")
			}
		}
		if popErr := writeBuffer.PopContext("unused", utils.WithRenderAsList(true)); popErr != nil {
			return popErr
		}
	}

	if popErr := writeBuffer.PopContext("BACnetTagPayloadBitString"); popErr != nil {
		return popErr
	}
	return nil
}

func (m *BACnetTagPayloadBitString) String() string {
	if m == nil {
		return "<nil>"
	}
	buffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	m.Serialize(buffer)
	return buffer.GetBox().String()
}
