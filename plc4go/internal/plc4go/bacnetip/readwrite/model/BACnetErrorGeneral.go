/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/plc4go/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// BACnetErrorGeneral is the data-structure of this message
type BACnetErrorGeneral struct {
	*BACnetError
	Error *Error
}

// IBACnetErrorGeneral is the corresponding interface of BACnetErrorGeneral
type IBACnetErrorGeneral interface {
	IBACnetError
	// GetError returns Error (property field)
	GetError() *Error
	// GetLengthInBytes returns the length in bytes
	GetLengthInBytes() uint16
	// GetLengthInBits returns the length in bits
	GetLengthInBits() uint16
	// Serialize serializes this type
	Serialize(writeBuffer utils.WriteBuffer) error
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for discriminator values.
///////////////////////

func (m *BACnetErrorGeneral) GetErrorChoice() BACnetConfirmedServiceChoice {
	return 0
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

func (m *BACnetErrorGeneral) InitializeParent(parent *BACnetError) {}

func (m *BACnetErrorGeneral) GetParent() *BACnetError {
	return m.BACnetError
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *BACnetErrorGeneral) GetError() *Error {
	return m.Error
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewBACnetErrorGeneral factory function for BACnetErrorGeneral
func NewBACnetErrorGeneral(error *Error) *BACnetErrorGeneral {
	_result := &BACnetErrorGeneral{
		Error:       error,
		BACnetError: NewBACnetError(),
	}
	_result.Child = _result
	return _result
}

func CastBACnetErrorGeneral(structType interface{}) *BACnetErrorGeneral {
	if casted, ok := structType.(BACnetErrorGeneral); ok {
		return &casted
	}
	if casted, ok := structType.(*BACnetErrorGeneral); ok {
		return casted
	}
	if casted, ok := structType.(BACnetError); ok {
		return CastBACnetErrorGeneral(casted.Child)
	}
	if casted, ok := structType.(*BACnetError); ok {
		return CastBACnetErrorGeneral(casted.Child)
	}
	return nil
}

func (m *BACnetErrorGeneral) GetTypeName() string {
	return "BACnetErrorGeneral"
}

func (m *BACnetErrorGeneral) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *BACnetErrorGeneral) GetLengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(m.GetParentLengthInBits())

	// Simple field (error)
	lengthInBits += m.Error.GetLengthInBits()

	return lengthInBits
}

func (m *BACnetErrorGeneral) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func BACnetErrorGeneralParse(readBuffer utils.ReadBuffer, errorChoice BACnetConfirmedServiceChoice) (*BACnetErrorGeneral, error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("BACnetErrorGeneral"); pullErr != nil {
		return nil, pullErr
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	// Simple Field (error)
	if pullErr := readBuffer.PullContext("error"); pullErr != nil {
		return nil, pullErr
	}
	_error, _errorErr := ErrorParse(readBuffer)
	if _errorErr != nil {
		return nil, errors.Wrap(_errorErr, "Error parsing 'error' field")
	}
	error := CastError(_error)
	if closeErr := readBuffer.CloseContext("error"); closeErr != nil {
		return nil, closeErr
	}

	if closeErr := readBuffer.CloseContext("BACnetErrorGeneral"); closeErr != nil {
		return nil, closeErr
	}

	// Create a partially initialized instance
	_child := &BACnetErrorGeneral{
		Error:       CastError(error),
		BACnetError: &BACnetError{},
	}
	_child.BACnetError.Child = _child
	return _child, nil
}

func (m *BACnetErrorGeneral) Serialize(writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	ser := func() error {
		if pushErr := writeBuffer.PushContext("BACnetErrorGeneral"); pushErr != nil {
			return pushErr
		}

		// Simple Field (error)
		if pushErr := writeBuffer.PushContext("error"); pushErr != nil {
			return pushErr
		}
		_errorErr := m.Error.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("error"); popErr != nil {
			return popErr
		}
		if _errorErr != nil {
			return errors.Wrap(_errorErr, "Error serializing 'error' field")
		}

		if popErr := writeBuffer.PopContext("BACnetErrorGeneral"); popErr != nil {
			return popErr
		}
		return nil
	}
	return m.SerializeParent(writeBuffer, m, ser)
}

func (m *BACnetErrorGeneral) String() string {
	if m == nil {
		return "<nil>"
	}
	buffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := m.Serialize(buffer); err != nil {
		return err.Error()
	}
	return buffer.GetBox().String()
}
