/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/plc4go/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// BACnetLoggingType is an enum
type BACnetLoggingType uint8

type IBACnetLoggingType interface {
	Serialize(writeBuffer utils.WriteBuffer) error
}

const (
	BACnetLoggingType_VENDOR_PROPRIETARY_VALUE BACnetLoggingType = 0xFF
)

var BACnetLoggingTypeValues []BACnetLoggingType

func init() {
	_ = errors.New
	BACnetLoggingTypeValues = []BACnetLoggingType{
		BACnetLoggingType_VENDOR_PROPRIETARY_VALUE,
	}
}

func BACnetLoggingTypeByValue(value uint8) BACnetLoggingType {
	switch value {
	case 0xFF:
		return BACnetLoggingType_VENDOR_PROPRIETARY_VALUE
	}
	return 0
}

func BACnetLoggingTypeByName(value string) BACnetLoggingType {
	switch value {
	case "VENDOR_PROPRIETARY_VALUE":
		return BACnetLoggingType_VENDOR_PROPRIETARY_VALUE
	}
	return 0
}

func BACnetLoggingTypeKnows(value uint8) bool {
	for _, typeValue := range BACnetLoggingTypeValues {
		if uint8(typeValue) == value {
			return true
		}
	}
	return false
}

func CastBACnetLoggingType(structType interface{}) BACnetLoggingType {
	castFunc := func(typ interface{}) BACnetLoggingType {
		if sBACnetLoggingType, ok := typ.(BACnetLoggingType); ok {
			return sBACnetLoggingType
		}
		return 0
	}
	return castFunc(structType)
}

func (m BACnetLoggingType) GetLengthInBits() uint16 {
	return 8
}

func (m BACnetLoggingType) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func BACnetLoggingTypeParse(readBuffer utils.ReadBuffer) (BACnetLoggingType, error) {
	val, err := readBuffer.ReadUint8("BACnetLoggingType", 8)
	if err != nil {
		return 0, nil
	}
	return BACnetLoggingTypeByValue(val), nil
}

func (e BACnetLoggingType) Serialize(writeBuffer utils.WriteBuffer) error {
	return writeBuffer.WriteUint8("BACnetLoggingType", 8, uint8(e), utils.WithAdditionalStringRepresentation(e.name()))
}

func (e BACnetLoggingType) name() string {
	switch e {
	case BACnetLoggingType_VENDOR_PROPRIETARY_VALUE:
		return "VENDOR_PROPRIETARY_VALUE"
	}
	return ""
}

func (e BACnetLoggingType) String() string {
	return e.name()
}
