/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/plc4go/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// BACnetDoorSecuredStatus is an enum
type BACnetDoorSecuredStatus uint8

type IBACnetDoorSecuredStatus interface {
	Serialize(writeBuffer utils.WriteBuffer) error
}

const (
	BACnetDoorSecuredStatus_SECURED   BACnetDoorSecuredStatus = 0
	BACnetDoorSecuredStatus_UNSECURED BACnetDoorSecuredStatus = 1
	BACnetDoorSecuredStatus_UNKNOWN   BACnetDoorSecuredStatus = 2
)

var BACnetDoorSecuredStatusValues []BACnetDoorSecuredStatus

func init() {
	_ = errors.New
	BACnetDoorSecuredStatusValues = []BACnetDoorSecuredStatus{
		BACnetDoorSecuredStatus_SECURED,
		BACnetDoorSecuredStatus_UNSECURED,
		BACnetDoorSecuredStatus_UNKNOWN,
	}
}

func BACnetDoorSecuredStatusByValue(value uint8) BACnetDoorSecuredStatus {
	switch value {
	case 0:
		return BACnetDoorSecuredStatus_SECURED
	case 1:
		return BACnetDoorSecuredStatus_UNSECURED
	case 2:
		return BACnetDoorSecuredStatus_UNKNOWN
	}
	return 0
}

func BACnetDoorSecuredStatusByName(value string) BACnetDoorSecuredStatus {
	switch value {
	case "SECURED":
		return BACnetDoorSecuredStatus_SECURED
	case "UNSECURED":
		return BACnetDoorSecuredStatus_UNSECURED
	case "UNKNOWN":
		return BACnetDoorSecuredStatus_UNKNOWN
	}
	return 0
}

func BACnetDoorSecuredStatusKnows(value uint8) bool {
	for _, typeValue := range BACnetDoorSecuredStatusValues {
		if uint8(typeValue) == value {
			return true
		}
	}
	return false
}

func CastBACnetDoorSecuredStatus(structType interface{}) BACnetDoorSecuredStatus {
	castFunc := func(typ interface{}) BACnetDoorSecuredStatus {
		if sBACnetDoorSecuredStatus, ok := typ.(BACnetDoorSecuredStatus); ok {
			return sBACnetDoorSecuredStatus
		}
		return 0
	}
	return castFunc(structType)
}

func (m BACnetDoorSecuredStatus) GetLengthInBits() uint16 {
	return 8
}

func (m BACnetDoorSecuredStatus) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func BACnetDoorSecuredStatusParse(readBuffer utils.ReadBuffer) (BACnetDoorSecuredStatus, error) {
	val, err := readBuffer.ReadUint8("BACnetDoorSecuredStatus", 8)
	if err != nil {
		return 0, nil
	}
	return BACnetDoorSecuredStatusByValue(val), nil
}

func (e BACnetDoorSecuredStatus) Serialize(writeBuffer utils.WriteBuffer) error {
	return writeBuffer.WriteUint8("BACnetDoorSecuredStatus", 8, uint8(e), utils.WithAdditionalStringRepresentation(e.name()))
}

func (e BACnetDoorSecuredStatus) name() string {
	switch e {
	case BACnetDoorSecuredStatus_SECURED:
		return "SECURED"
	case BACnetDoorSecuredStatus_UNSECURED:
		return "UNSECURED"
	case BACnetDoorSecuredStatus_UNKNOWN:
		return "UNKNOWN"
	}
	return ""
}

func (e BACnetDoorSecuredStatus) String() string {
	return e.name()
}
